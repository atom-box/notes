# Query: ->assert

10000 results - 1356 files

DiscountOfficeItems • library/Dx/PHPUnit/CatalogFunctionsTrait.php:
   75:         $this->assertEquals($expected, $array, $message);
  374:         $this->assertEquals($expectedCallList, $actualCallList);

DiscountOfficeItems • library/Dx/PHPUnit/TestLogger.php:
   21:  * $testLogger->assertLogsContains('Things', 'Did not contain things');
  124:             $this->assertMessageLogged($logItem[0], $logItem[1], $logItem[2] ?? []);
  136:             $this->assertMessageNotLogged($logItem[0], $logItem[1], $logItem[2] ?? []);

DiscountOfficeItems • library/Dx/PHPUnit/WebTestCase.php:
  55:             $this->assertEquals($expected, $clientResponse->getResponse()->getStatusCode(), $message);
  61:             $this->assertEquals($expected, $clientResponse->getStatusCode(), $message);

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Category/AttributeNormalizerTest.php:
   57:         $this->assertEquals($expected, $actual);
   73:         $this->assertSameSize($expected, $actual);
   74:         $this->assertArraySubset($expected, $actual);
   92:         $this->assertSameSize($expected, $actual);
   93:         $this->assertArraySubset($expected, $actual);
  113:         $this->assertSameSize($expected, $actual);
  114:         $this->assertArraySubset($expected, $actual);
  130:         $this->assertSameSize($expected, $actual);
  131:         $this->assertArraySubset($expected, $actual);
  160:         $this->assertSameSize($expected, $actual);
  161:         $this->assertArraySubset($expected, $actual);

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Category/TagNormalizerTest.php:
  26:         $this->assertEquals([], $actual);
  42:         $this->assertArraySubset($expected, $actual);
  60:         $this->assertArraySubset($expected, $actual);
  85:         $this->assertSameSize($expected, $actual);
  86:         $this->assertArraySubset($expected, $actual);

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Command/ApplyScheduledPriceChangesCommandTest.php:
  124:         $this->log->assertLogsContains(sprintf(ApplyScheduledPriceChangesCommand::MSG_APPLYING, 0));
  125:         $this->log->assertLogsContains(sprintf(ApplyScheduledPriceChangesCommand::MSG_COMPLETED, 0));
  163:         $this->log->assertLogsContains(sprintf(ApplyScheduledPriceChangesCommand::MSG_APPLYING, 0));
  164:         $this->log->assertLogsContains(sprintf(ApplyScheduledPriceChangesCommand::MSG_COMPLETED, 0));
  166:         $this->assertPrices(
  202:         $this->log->assertLogsContains(sprintf(ApplyScheduledPriceChangesCommand::MSG_APPLYING, 1));
  203:         $this->log->assertLogsContains(sprintf(ApplyScheduledPriceChangesCommand::MSG_COMPLETED, 1));
  205:         $this->assertPrices(
  243:         $this->log->assertLogsContains(sprintf(ApplyScheduledPriceChangesCommand::MSG_APPLYING, 1));
  244:         $this->log->assertLogsContains(sprintf(ApplyScheduledPriceChangesCommand::MSG_COMPLETED, 1));
  246:         $this->assertPrices(
  256:         $this->assertSchedule(
  296:         $this->log->assertLogsContains(
  302:         $this->log->assertLogsContains(
  308:         $this->log->assertLogsContains(
  315:         $this->assertPrices(
  350:         $this->assertEquals($expected, $actual);
  391:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Command/ApplyScheduledProductStatusChangesCommandTest.php:
  110:         $this->log->assertLogsContains(sprintf(ApplyScheduledProductStatusChangesCommand::MSG_APPLYING, 0));
  111:         $this->log->assertLogsContains(sprintf(ApplyScheduledProductStatusChangesCommand::MSG_COMPLETED, 0));
  150:         $this->log->assertLogsContains(sprintf(ApplyScheduledProductStatusChangesCommand::MSG_APPLYING, 0));
  151:         $this->log->assertLogsContains(sprintf(ApplyScheduledProductStatusChangesCommand::MSG_COMPLETED, 0));
  153:         $this->assertStatuses($scheduled);
  176:         $this->log->assertLogsContains(sprintf(ApplyScheduledProductStatusChangesCommand::MSG_APPLYING, 1));
  177:         $this->log->assertLogsContains(sprintf(ApplyScheduledProductStatusChangesCommand::MSG_COMPLETED, 1));
  179:         $this->assertStatusesEmpty();
  220:         $this->log->assertLogsContains(sprintf(ApplyScheduledProductStatusChangesCommand::MSG_APPLYING, 3));
  221:         $this->log->assertLogsContains(sprintf(ApplyScheduledProductStatusChangesCommand::MSG_COMPLETED, 3));
  223:         $this->assertStatusesEmpty();
  269:         $this->log->assertLogsContains(sprintf(ApplyScheduledProductStatusChangesCommand::MSG_APPLYING, 2));
  270:         $this->log->assertLogsContains(sprintf(ApplyScheduledProductStatusChangesCommand::MSG_COMPLETED, 2));
  272:         $this->assertStatuses([$expectedTableRows]);
  293:         $this->log->assertLogsContains(sprintf(ApplyScheduledProductStatusChangesCommand::MSG_APPLYING, 1));
  294:         $this->log->assertLogsContains(sprintf(ApplyScheduledProductStatusChangesCommand::MSG_NOT_FOUND, $prodId));
  295:         $this->log->assertLogsContains(sprintf(ApplyScheduledProductStatusChangesCommand::MSG_COMPLETED, 1));
  297:         $this->assertStatuses($scheduled);
  333:         $this->log->assertLogsContains(sprintf(ApplyScheduledProductStatusChangesCommand::MSG_APPLYING, 1));
  334:         $this->log->assertLogsContains(sprintf(ApplyScheduledProductStatusChangesCommand::MSG_COMPLETED, 1));
  336:         $this->assertStatuses($expected);
  351:         $this->assertEquals(0, $actual);
  395:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Command/CmsCleanupCommandTest.php:
   44:         $this->assertInstanceOf(Command::class, $this->fixture);
   63:         $this->assertEquals($expected, $actual);
   66:         $this->assertEquals(
  167:         $this->assertEquals($expected, $actual);
  170:         $this->assertEquals('', $output);

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Command/ProcessWorkflowsCommandTest.php:
  138:         $this->assertEquals('Skipping run, not a business day today'.PHP_EOL, $display);
  154:         $this->assertEquals('Skipping run, not a business day today'.PHP_EOL, $display);
  180:         $this->assertStringNotContainsString('Skipping run, not a business day today'.PHP_EOL, $display, 'day of the week: '.$day);

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Command/TaxCertificateExpirationEmailerCommandTest.php:
   97:         $this->assertEquals($expected, $actual);
  123:         $this->assertEquals($expected, $actual);
  142:         $this->assertEquals($expected, $actual);
  175:         $this->assertEquals($expected, $actual);
  200:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Command/SubscriptionWorkflows/FillableSubscriptionTest.php:
   36:         $this->assertTrue($execution->isCancelled());
   74:         $this->assertTrue($execution->isSuspended());
   75:         $this->logs->assertLogsContains('Subscription Shipping Soon');
   99:         $this->logs->assertLogsContains(CreateSubscriptionOrder::class);
  100:         $this->logs->assertLogsContains(AdvanceSubscriptionDate::class);
  102:         $this->assertTrue($execution->hasEnded());

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Controller/AdminWebTestCase.php:
  30:         $this->assertStatusCode(200, $client);

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Controller/BrandControllerTest.php:
  29:         $this->assertStatusCode(200, $client);
  31:         $this->assertStatusCode(200, $client);
  47:         $this->assertGreaterThan(0, $crawler->filter('[value="Test"]')->count());
  59:         $this->assertGreaterThan(0, $crawler->filter('[value="Test Foo"]')->count());
  68:         $this->assertNotRegExp('/Test Foo/', $client->getResponse()->getContent(), 'Entry was not removed');

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Controller/CouponControllerTest.php:
  29:         $this->assertStatusCode(200, $client);
  58:         $this->assertTrue($crawler->filter('[value="KIM602"]')->count() > 0);
  83:         $this->assertTrue($crawler->filter('[value="KIM602"]')->count() > 0);
  92:         $this->assertNotRegExp('/KIM602/', $client->getResponse()->getContent());

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Controller/CustomerControllerTest.php:
  41:         $this->assertStatusCode(200, $client);
  58:         $this->assertGreaterThan(0, $crawler->filter('[value="Foo"]')->count());
  59:         $this->assertGreaterThan(0, $crawler->filter('[value="Testing Tester"]')->count());
  60:         $this->assertGreaterThan(0, $crawler->filter('[value="updated@email.com"]')->count());

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Controller/FlagsControllerTest.php:
   26:         $this->assertEquals(
   44:         $this->assertGreaterThan(
   51:         $this->assertEquals(
   57:         $this->assertGreaterThan(
   63:         $this->assertGreaterThan(
   72:         $this->assertGreaterThan(
   79:         $this->assertGreaterThan(
   86:         $this->assertGreaterThan(
  107:         $this->assertGreaterThan(

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Controller/ProductBlockControllerTest.php:
   41:         $this->assertEquals(
   61:         $this->assertGreaterThan(
   69:         $this->assertGreaterThan(
   76:         $this->assertGreaterThan(
  101:         $this->assertGreaterThan(
  118:         $this->assertStringNotContainsString(

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Controller/QuoteFormsControllerTest.php:
  39:         $this->assertStatusCode(200, $client);
  60:         $this->assertGreaterThan(0, $crawler->filter('[value="Testing Tester"]')->count());
  73:         $this->assertGreaterThan(0, $crawler->filter('[value="Foo"]')->count());
  82:         $this->assertNotRegExp('/Foo/', $client->getResponse()->getContent());

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Controller/SessionControllerTest.php:
  56:         $this->assertStatusCode(200, $client);
  73:         $this->assertRegExp('flashSuccess', $client->getResponse()->getContent());

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Controller/StatsControllerTest.php:
   76:         $this->assertEquals(
   83:         $this->assertEquals(
   88:         $this->assertEquals(
  105:         $this->assertEquals(
  110:         $this->assertEquals(
  115:         $this->assertEquals(
  128:         $this->assertEquals(
  135:         $this->assertEquals(
  150:         $this->assertEquals(
  165:         $this->assertEquals(
  186:             $this->assertStringEndsWith(
  204:             $this->assertStringEndsWith(
  218:             $this->assertStringEndsWith(

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Controller/SupplierAccountControllerTest.php:
  37:         $this->assertStatusCode(200, $client);
  58:         $this->assertTrue($crawler->filter('[value="Test"]')->count() > 0);
  70:         $this->assertTrue($crawler->filter('[value="Test Foo"]')->count() > 0);

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Controller/OrderController/EmailPdfTest.php:
  219:         $this->assertEquals(
  254:         $this->assertCount(1, $invocationList, 'Did not send correct number of emails');
  259:         $this->assertEquals(['user@example.com' => 'Test'], $email->getTo());
  260:         $this->assertEquals(
  264:         $this->assertEquals($subject, $email->getSubject());
  266:         $this->assertEquals(
  302:         $this->assertEquals($renderedPdf, $attachmentList[0]->getContent(), 'Pdf not attached');
  352:         $this->assertEquals(
  379:         $this->assertEquals(400, $actual->getStatusCode());
  380:         $this->assertEquals($expected, $actual->getContent());
  398:         $this->assertEquals(400, $actual->getStatusCode());
  399:         $this->assertEquals($expected, $actual->getContent());

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Controller/ProductController/GetProductAndPriceFromSkuActionTest.php:
   60:         $this->assertEquals([], $actual);
   82:         $this->assertEquals([], $actual);
  117:         $this->assertEquals(['name' => $name, 'price' => $price], $actual);
  134:         $this->assertEquals(['name' => $name, 'price' => null], $actual);
  148:         $this->assertEquals(['name' => $name, 'price' => null], $actual);

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Controller/StatsController/OrderSalesActionTest.php:
   59:         $this->assertStatusCode(200, $client);
   60:         $this->assertRegExp(
   65:         $this->assertRegExp(
   74:         $this->assertStatusCode(200, $client);
   75:         $this->assertRegExp(
   80:         $this->assertRegExp(
   85:         $this->assertRegExp(
   94:         $this->assertStatusCode(200, $client);
   96:         $this->assertRegExp(
  101:         $this->assertRegExp(

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Controller/StatsController/OrderSalesByStateActionTest.php:
  59:         $this->assertStatusCode(200, $client);
  60:         $this->assertRegExp(

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Controller/StatsController/OrderSalesGraphActionTest.php:
  59:         $this->assertStatusCode(200, $client);
  60:         $this->assertRegExp(

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Controller/StatsController/OrdersProcessedActionTest.php:
  26:         $this->assertStatusCode(
  33:         $this->assertEquals(
  38:         $this->assertEquals(

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Controller/StatsController/ProductsSoldActionTest.php:
  84:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Controller/StatsController/ProductsSoldDataActionTest.php:
  74:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Cost/CostDisablerTest.php:
  58:         $this->assertNotEmpty($outcome);
  79:         $this->assertEmpty($outcome);

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Cost/CsvCostUpdaterTest.php:
   87:         $this->assertEquals(0, $actual);
  103:         $this->assertFalse($return);
  148:         $this->assertEquals(
  163:         $this->assertEmpty($seen[0]['lines']);
  175:         $this->assertEmpty($seen[0]['lines']);
  196:         $this->assertNotEmpty($seen[0]['lines']);
  259:         $this->assertEmpty($seen[0]['lines']);
  492:         $this->assertEquals([$fieldList], $seen[0]['lines']);
  515:         $this->assertEquals($count, $this->inventory->getCount($productId));
  544:         $this->assertEquals($count * 2, $this->inventory->getCount($productId));
  569:                     $this->assertNotEquals('onInventoryPreSetQuantity', $args[0]);
  599:                     $this->assertNotEquals('onInventoryPreSetQuantity', $args[0]);
  680:         $this->assertEquals($expected, $fieldList[$field], $message);

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/DependencyInjection/Compiler/RegisterEdiEstimatorPassTest.php:
   81:         $this->assertEquals(
  104:         $this->assertEquals([$estimatorA], $addedEstimatorList, 'Store foo estimators do not match expected');

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Edi/InvoiceHandlerTest.php:
  58:             $this->log->assertLogsContains($message);

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Edi/Po/RequestFixedAddressTest.php:
  74:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Edi/Po/RequestTest.php:
   56:         $this->assertFailsMinimumLength($invoice, null, null, $dateTime);
   66:         $this->assertFailsMaximumLength($invoice, null, null, $dateTime);
   86:         $this->assertFailsMinimumLength($invoice);
   96:         $this->assertFailsMaximumLength($invoice);
  180:         $this->assertFailsMinimumLength($invoice);
  205:         $this->assertFailsMaximumLength($invoice);
  230:         $this->assertEquals($expected, $actual[4][2]);
  271:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Edi/Supplier/ImporterTest.php:
  173:         $this->assertEquals(count($rowList), $actual);

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Edi/Supplier/ParserTest.php:
  70:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Form/CouponTypeTest.php:
  37:         $this->assertTrue($form->isSynchronized());
  38:         $this->assertEquals($coupon, $form->getData());
  44:             $this->assertArrayHasKey($key, $children);

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Form/SupplierEdiCapabilityTypeTest.php:
  35:         $this->assertTrue($form->isSynchronized());
  36:         $this->assertEquals($entity, $form->getData());
  42:             $this->assertArrayHasKey($key, $children);

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Form/DataTransformer/CategoryListTransformerTest.php:
  43:         $this->assertEquals($expected, $actual);
  83:         $this->assertContainsOnlyInstancesOf(Categories::class, $actual);
  84:         $this->assertEquals($expectedCategories, iterator_to_array($actual));

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Form/DataTransformer/ProductBrandTransformTest.php:
   33:         $this->assertEquals($expected, $actual);
   55:         $this->assertEquals('', $actual);
   68:         $this->assertEquals($id.' - '.$name, $actual);
   81:         $this->assertEqualBrands($expected, $actual);
  138:             $this->assertNull($actual);
  143:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Form/DataTransformer/ProductManufacturerTransformTest.php:
   33:         $this->assertEquals($expected, $actual);
   55:         $this->assertEquals('', $actual);
   68:         $this->assertEquals($name.' ('.$id.')', $actual);
   81:         $this->assertEqualManufacturers($expected, $actual);
  130:             $this->assertNull($actual);
  135:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Form/DataTransformer/XmlFormatTransformTest.php:
  32:         $this->assertEquals($expected, $actual);
  44:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Form/Handler/RelatedProductFormHandlerTest.php:
  135:         $this->assertEquals(
  180:         $this->assertEquals(
  249:         $this->assertEquals(
  342:         $this->assertEquals(
  430:         $this->assertEquals(

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Form/Handler/RelatedProductIndexFormValidatorTest.php:
   87:         $this->assertFalse($actual);
  117:         $this->assertTrue($actual);
  144:         $this->assertFalse($actual);
  205:         $this->assertTrue($actual);
  218:         $this->assertFalse($actual);

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Form/Listener/NewCategorySubscriberTest.php:
  30:         $this->assertInstanceOf(EventSubscriberInterface::class, $this->fixture);
  39:         $this->assertEquals($expected, $actual);
  91:         $this->assertEquals('New Categories', $actual['label']);
  92:         $this->assertContainsOnlyInstancesOf(CategoryInterface::class, $actual['choices']);
  93:         $this->assertEquals($expected, $actualChoiceList);

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Image/FileTest.php:
   25:         $this->assertEquals($expected, $fixture->isImage());
   49:         $this->assertEquals($contents, $fixture->getContent());
   63:         $this->assertEquals($expected, $fixture->getFilePath());
  115:         $this->assertEquals($expected, $fixture->getFileName());
  124:         $this->assertEquals($directory, $fixture->getDirectory());

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Invoice/CancellationReporterTest.php:
  115:         $this->assertEquals($this->recipient, $actual->getTo());
  116:         $this->assertEquals($expectedSubject, $actual->getSubject());
  117:         $this->assertEquals($expectedText, $actual->getText());

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Listener/CategoryChangeListenerTest.php:
  87:         $this->assertInstanceOf(EventSubscriberInterface::class, $this->fixture);
  98:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Listener/InThreadInvoiceWorkflowListenerTest.php:
  35:         $this->assertInstanceOf(EventSubscriberInterface::class, $this->fixture);
  43:             $this->assertTrue(is_callable([$this->fixture, $callback[0]]), 'contains uncallable hook');
  46:         $this->assertArrayHasKey(
  51:         $this->assertArrayHasKey(

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Listener/InvoiceWorkflowListenerTest.php:
  35:         $this->assertInstanceOf(EventSubscriberInterface::class, $this->fixture);
  43:             $this->assertTrue(is_callable([$this->fixture, $callback[0]]), 'contains uncallable hook');
  46:         $this->assertArrayHasKey(
  51:         $this->assertArrayHasKey(

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Listener/WatchlistListenerTest.php:
   47:         $this->assertInstanceOf(EventSubscriberInterface::class, $this->fixture);
   55:         $this->assertEquals($expected, $actual);
  128:         $this->assertEquals(['takeSnapshot', 'setWhiteList', 'save'], $actual);

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Listener/ZeroOutInventoryListenerTest.php:
  75:         $this->assertInstanceOf(EventSubscriberInterface::class, $this->fixture);
  82:         $this->assertEquals(['onProductChanged' => 'onProductChanged'], $actual);

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/MinimumAdvertisedPrice/HpParserTest.php:
   55:         $this->assertEquals([], $actual);
   92:         $this->assertEquals([], $actual);
  143:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/MinimumAdvertisedPrice/ImporterTest.php:
  124:         $this->logs->assertLogsContains($sku.' is invalid.');
  138:         $this->logs->assertLogsContains('Suppressing invalid SKU warnings.');
  153:         $this->logs->assertLogsContains($count.' entries have invalid SKUs.');
  214:         $this->logs->assertLogsContains('Invalid price for '.$sku.': '.$price);
  231:         $this->logs->assertLogsContains('Import for '.$sku.' blocked by -MAP flag.');
  253:         $this->assertEquals(['MAP'], array_unique($fieldList));
  254:         $this->assertCount(1, $fieldList);
  255:         $this->assertEquals(
  282:         $this->logs->assertLogsContains('Suppressing invalid price warnings.');
  304:         $this->logs->assertLogsContains('11 entries have invalid prices.');
  328:         $this->logs->assertLogsContains(count($sample).' entries have invalid prices.');
  352:         $this->logs->assertLogsContains(count($sample).' entries saved.');
  608:         $this->logs->assertLogsContains('2 entries deleted.');
  630:         $this->assertEquals(['MAP'], array_unique($fieldList));
  631:         $this->assertCount(2, $fieldList);
  632:         $this->assertEquals(
  656:         $this->logs->assertLogsContains('2 entries saved.');
  680:         $this->assertEquals(['MAP'], array_unique($fieldList));
  681:         $this->assertCount(2, $fieldList);
  682:         $this->assertEquals(
  701:         $this->logs->assertLogsContains('2 entries have invalid SKUs.');
  720:         $this->logs->assertLogsContains('2 entries have invalid prices.');

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/MinimumAdvertisedPrice/ParserTest.php:
  36:         $this->assertEquals([], $actual);
  46:         $this->assertEquals([], $actual);
  76:         $this->assertEquals($expected, $actual);
  99:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Model/OverridableOrderInvoiceTest.php:
   48:         $this->assertInstanceOf(OrderInvoiceInterface::class, $this->fixture);
   59:         $this->assertEquals($expected, $actual);
   70:         $this->assertEquals($expected, $actual);
   81:         $this->assertSame($expected, $actual);
   92:         $this->assertEquals($expected, $actual);
  103:         $this->assertEquals($expected, $actual);
  114:         $this->assertEquals($expected, $actual);
  125:         $this->assertEquals($expected, $actual);
  136:         $this->assertEquals($expected, $actual);
  147:         $this->assertEquals($expected, $actual);
  158:         $this->assertEquals($expected, $actual);
  169:         $this->assertEquals($expected, $actual);
  180:         $this->assertEquals($expected, $actual);
  192:         $this->assertEquals($expected, $actual);
  203:         $this->assertSame($expected, $actual);
  210:         $this->assertSame($this->shippingAddress, $actual);
  221:         $this->assertSame($expected, $actual);
  228:         $this->assertSame($this->longInvoiceId, $actual);
  239:         $this->assertSame($expected, $actual);
  250:         $this->assertSame($expected, $actual);
  261:         $this->assertSame($expected, $actual);
  273:         $this->assertSame($expected, $actual);
  284:         $this->assertSame($expected, $actual);
  295:         $this->assertSame($expected, $actual);
  306:         $this->assertSame($expected, $actual);

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Order/InvoiceIdValidatorTest.php:
  31:         $this->assertTrue($actual);
  54:         $this->assertFalse($actual);

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Order/ChangeHandler/ChangeHandlerTest.php:
  60:         $this->assertSame(['order' => []], $actual);

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Order/ChangeHandler/Handlers/AddressHandlerTest.php:
  44:         $this->assertInstanceOf(HandlerInterface::class, $this->fixture);
  92:         $this->assertEquals([], $actual);

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Order/ChangeHandler/Handlers/CouponHandlerTest.php:
   36:         $this->assertInstanceOf(HandlerInterface::class, $this->fixture);
  119:         $this->assertEquals([], $actual);
  137:         $this->assertEquals([], $actual);
  154:         $this->assertEquals(['notices' => [CouponHandler::ERR_NO_LONGER_APPLIES]], $actual);

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Order/ChangeHandler/Handlers/CustomerHandlerTest.php:
   36:         $this->assertInstanceOf(HandlerInterface::class, $this->fixture);
   86:         $this->assertEquals([], $actual);
  100:         $this->assertEquals([], $actual);
  123:         $this->assertEquals([], $actual);
  148:         $this->assertEquals([], $actual);

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Order/ChangeHandler/Handlers/ExpressProcessingHandlerTest.php:
  27:         $this->assertInstanceOf(HandlerInterface::class, $this->fixture);
  51:         $this->assertEquals([], $actual);

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Order/ChangeHandler/Handlers/LineItemBulkValidatorTest.php:
  46:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Order/ChangeHandler/Handlers/LineItemHandlerTest.php:
   53:         $this->assertInstanceOf(HandlerInterface::class, $this->fixture);
   70:         $this->assertEquals([], $actual);
  468:         $this->assertEquals($newId, $actual->getProductId());
  469:         $this->assertEquals($newUnit, $actual->getUnit());
  470:         $this->assertEquals($productName, $actual->getProductName());
  471:         $this->assertEquals($qty, $actual->getQuantity());
  472:         $this->assertEquals($price, $actual->getItemPrice());
  473:         $this->assertEquals($tax, $actual->getLineTax());
  474:         $this->assertEquals($discount, $actual->getLineDiscount());
  475:         $this->assertEquals($flags & ~CartInterface::MFGDIR, $actual->getFlags());
  519:         $this->assertEquals($productId, $actual->getProductId());
  520:         $this->assertEquals($unit, $actual->getUnit());
  521:         $this->assertEquals($productName, $actual->getProductName());
  522:         $this->assertEquals($qty, $actual->getQuantity());
  523:         $this->assertEquals($price, $actual->getItemPrice());
  524:         $this->assertEquals($tax, $actual->getLineTax());
  525:         $this->assertEquals($discount, $actual->getLineDiscount());
  526:         $this->assertEquals($flags | CartInterface::MFGDIR, $actual->getFlags());

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Order/ChangeHandler/Handlers/TotalHandlerTest.php:
   47:         $this->assertInstanceOf(HandlerInterface::class, $this->fixture);
  215:         $this->assertCount(3, $order->getTotals());
  216:         $this->assertContains($totalA, $order->getTotals());
  217:         $this->assertContains($totalB, $order->getTotals());
  218:         $this->assertContains($totalC, $order->getTotals());
  229:         $this->assertEmpty($order->getTotals());
  240:         $this->assertEmpty($order->getTotals());
  253:         $this->assertCount(1, $order->getTotals());
  257:         $this->assertEquals($change['title'], $actual->getTitle());
  258:         $this->assertEquals($change['value'], $actual->getValue());
  259:         $this->assertEquals($change['class'], $actual->getClass());
  260:         $this->assertEquals($change['sortOrder'], $actual->getSortOrder());
  261:         $this->assertEquals($change['flags'], $actual->getFlags());
  272:         $this->assertCount(1, $order->getTotals());
  276:         $this->assertEquals($change['title'], $actual->getTitle());
  277:         $this->assertEquals($change['value'], $actual->getValue());
  278:         $this->assertEquals($change['class'], $actual->getClass());
  279:         $this->assertEquals($change['sortOrder'], $actual->getSortOrder());
  280:         $this->assertEquals($change['flags'] | OrderTotal::FLAG_REFUND, $actual->getFlags());
  295:         $this->assertCount(1, $order->getTotals());
  299:         $this->assertEquals($total->getTitle(), $actual->getTitle());
  300:         $this->assertEquals($total->getValue(), $actual->getValue());
  301:         $this->assertEquals($total->getClass(), $actual->getClass());
  302:         $this->assertEquals($total->getSortOrder(), $actual->getSortOrder());
  303:         $this->assertEquals($total->getFlags(), $actual->getFlags());
  317:         $this->assertEmpty($order->getTotals());
  331:         $this->assertCount(1, $order->getTotals());
  335:         $this->assertEquals($change['title'], $actual->getTitle());
  336:         $this->assertEquals($change['value'], $actual->getValue());
  337:         $this->assertEquals($change['class'], $actual->getClass());
  338:         $this->assertEquals($change['sortOrder'], $actual->getSortOrder());
  339:         $this->assertEquals($change['flags'], $actual->getFlags());
  354:         $this->assertCount(1, $order->getTotals());
  358:         $this->assertEquals(OrderTotal::SORT_REFUND, $actual->getSortOrder());
  373:         $this->assertCount(1, $order->getTotals());
  377:         $this->assertEquals(OrderTotal::SORT_REFUND, $actual->getSortOrder());
  392:         $this->assertCount(1, $order->getTotals());
  396:         $this->assertEquals(OrderTotal::SORT_REFUND + 1, $actual->getSortOrder());
  440:         $this->assertEquals($expected, $actual->getSortOrder());
  608:         $this->assertNull($order->getCouponId());
  620:         $this->assertFalse($order->getExpressProcessing());
  636:         $this->assertTrue($order->getExpressProcessing());
  647:         $this->assertEquals([], $actual);

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Order/Edit/AdjusterTest.php:
   60:         $this->assertTrue($refundFilter(-0.01), 'refund filter did not accept refund');
   61:         $this->assertFalse($refundFilter(0), 'refund filter did not reject zero');
   62:         $this->assertFalse($refundFilter(0.01), 'refund filter did not reject charge');
   63:         $this->assertFalse($chargeFilter(-0.01), 'charge filter did not reject refund');
   64:         $this->assertFalse($chargeFilter(0), 'charge filter did not reject zero');
   65:         $this->assertTrue($chargeFilter(0.01), 'charge filter did not accept charge');
  378:         $this->assertEquals([$logA, $logB, $logC, $logD], $actual);

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Order/Edit/AdjustmentLineMergerTest.php:
  61:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Order/Edit/UpdaterTest.php:
  187:         $this->assertSame([], $actual);
  202:                 $this->assertInstanceOf(AddressInterface::class, $target);
  209:         $this->assertStringContainsString('Delivery name has been changed', $actual[0]);
  210:         $this->assertStringContainsString($after['delivery']['name'], $actual[0]);
  212:         $this->assertEquals($after['delivery']['name'], $order->getDeliveryName());
  254:                 $this->assertInstanceOf(LineItemInterface::class, $target);
  266:         $this->assertStringContainsString('has been changed', $actual[0]);
  267:         $this->assertStringContainsString($afterName, $actual[0]);
  269:         $this->assertEquals($afterName, $order->getLineItems()[0]->getProductName());
  341:         $this->assertEquals($expect, $order->getLineItems()[0]->getFlags());
  393:                 $this->assertInstanceOf(TotalInterface::class, $target);
  400:         $this->assertStringContainsString('has been changed', $actual[0]);
  401:         $this->assertStringContainsString($afterName, $actual[0]);
  403:         $this->assertEquals($afterName, $order->getTotals()[0]->getTitle());
  413:         $this->assertStringContainsString('Coupon removed from order', $actual[0]);
  415:         $this->assertNull($order->getCouponId());
  436:         $this->assertEmpty($actual);
  438:         $this->assertEquals($couponId, $order->getCouponId());
  523:                 $this->assertInstanceOf(LineItemInterface::class, $target);
  530:         $this->assertEquals($productId, $line->getProductId());
  531:         $this->assertEquals($unit, $line->getUnit());
  533:         $this->assertEmpty($actual);
  553:         $this->assertEmpty($actual);
  575:         $this->assertStringContainsString('customer email address', $actual[0]);
  603:         $this->assertStringContainsString('Updating', $actual[0]);
  604:         $this->assertStringContainsString('customer ID', $actual[0]);
  605:         $this->assertEquals($customer->getId(), $order->getCustomerId());
  606:         $this->assertTrue($order->getCustomer()->getWhiteList());
  626:         $this->assertStringContainsString('Updating', $actual[0]);
  627:         $this->assertStringContainsString('customer ID', $actual[0]);
  628:         $this->assertEquals($customer->getId(), $order->getCustomerId());
  681:         $this->assertCount(0, $order->getLineItems());
  682:         $this->assertStringContainsString('Removed', $actual[0]);
  714:         $this->assertContains("Changed order status from {$oldStatusText} to {$newStatusText}", $actual);
  730:         $this->assertNull($order->getCouponId());
  774:         $this->assertStringContainsString('Updated', $actual[0]);
  775:         $this->assertStringContainsString('to $0.00', $actual[0]);
  777:         $this->assertCount(0, $order->getTotals());
  847:         $this->assertCount(3, $actual);
  848:         $this->assertStringContainsString('Removing refund for '.$sku.' (x'.$qty.')', $actual[0]);
  849:         $this->assertStringContainsString('Updated', $actual[1]);
  850:         $this->assertStringContainsString('Updated', $actual[2]);
  915:         $this->assertCount(1, $order->getTotals());
  964:         $this->assertCount(1, $order->getLineItems());
  965:         $this->assertStringContainsString('Adding', $actual[0]);

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Order/Edit/Adjuster/AdjustmentApplicatorTest.php:
  198:         $this->assertEquals([], $actual);
  232:         $this->assertEquals([], $actual);
  255:         $this->assertEquals([$logA, $logB, $logC, $logD, $logE, $logF], $actual);

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Order/Edit/Adjuster/OrderFactoryTest.php:
   35:         $this->assertEquals($order->getStore(), $actual->getStore());
   45:         $this->assertEquals($orderId, $actual->getId());
   54:         $this->assertEquals(Order::STATUS_LOCKED, $actual->getOrderStatus());
   64:         $this->assertEquals($customer, $actual->getCustomer());
   74:         $this->assertEquals($email, $actual->getCustomerEmailAddress());
   85:         $this->assertEquals($value, $actual->getDeliveryAddress()->getName());
   96:         $this->assertEquals($value, $actual->getDeliveryAddress()->getCompany());
  107:         $this->assertEquals($value, $actual->getDeliveryAddress()->getStreetAddress());
  118:         $this->assertEquals($value, $actual->getDeliveryAddress()->getSuburb());
  129:         $this->assertEquals($value, $actual->getDeliveryAddress()->getCity());
  140:         $this->assertEquals($value, $actual->getDeliveryAddress()->getState());
  151:         $this->assertEquals($value, $actual->getDeliveryAddress()->getZip());
  162:         $this->assertEquals($value, $actual->getDeliveryAddress()->getCountry());
  173:         $this->assertEquals($value, $actual->getDeliveryAddress()->getPhone());
  187:         $this->assertEquals($value, $actual->getLineItems()[0]->getProductName());
  208:         $this->assertEquals($value, $actual->getLineItems()[0]->getProductName());
  239:         $this->assertEquals($orderValue, $actual->getLineItems()[0]->getProductName());
  240:         $this->assertEquals($adjustmentValue, $actual->getLineItems()[1]->getProductName());
  254:         $this->assertEquals($value, $actual->getTotals()[0]->getClass());
  278:         $this->assertEmpty($actual->getTotals());
  312:         $this->assertEquals($orderValue, $actual->getTotals()[0]->getClass());
  313:         $this->assertCount(1, $actual->getTotals());

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Order/Edit/Adjuster/RefundApplicatorTest.php:
  177:         $this->assertEquals($lineList, $actual);
  215:         $this->assertEquals($lineList, $actual);
  255:         $this->assertEquals($lineList, $actual);
  329:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Order/Edit/Adjuster/SortOrderGetterTest.php:
  36:         $this->assertEquals($expected, $actual);
  90:         $this->assertEquals($expected, $actualA);
  91:         $this->assertEquals($expected + 1, $actualB);
  92:         $this->assertEquals($expected + 2, $actualC);

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Order/Edit/Adjuster/TaxApplicatorTest.php:
  118:         $this->assertEquals([$expected], $actual);
  229:         $this->assertEquals([$expected], $actual);
  278:         $this->assertEquals([], $actual);

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Order/Edit/Adjuster/TotalApplicatorTest.php:
  571:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Order/Email/TemplateManagerTest.php:
  61:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Order/Email/Filter/OutstandingBalanceTest.php:
  49:         $this->assertEquals($order, $actual['order']);
  63:         $this->assertEquals($due, $actual['due']);

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Order/FollowUp/ReporterTest.php:
   54:         $this->assertSame($expected, $actual);
   71:         $this->assertSame($expected, $actual);
  104:         $this->assertEquals($expected, $actual);
  133:         $this->assertEquals($expected, $actual);
  153:         $this->assertSame($expected, $actual);
  188:         $this->assertEquals($expected, $actual);
  217:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Order/View/OrderRefundFactoryTest.php:
   32:         $this->assertRefundsArrayEquals($expected, $actual);
   98:         $this->assertTrue($actual[$orderA->getId()]->getIsPaused());
   99:         $this->assertTrue($actual[$orderB->getId()]->getIsPaused());
  113:         $this->assertEquals($expected, $actual);
  127:         $this->assertEquals($expected, $actual);
  139:         $this->assertEquals($expected, $actual);
  182:         $this->assertEquals($expected, $actual);
  196:         $this->assertEquals($expected, $actual);
  210:         $this->assertEquals($expected, $actual);
  224:         $this->assertEquals($expected, $actual);
  238:         $this->assertEquals($expected, $actual);
  250:         $this->assertEquals($expected, $actual);
  301:         $this->assertEquals($expected, $actual);
  319:         $this->assertEquals($expected, $actual);
  335:         $this->assertEquals($expected, $actual);
  349:         $this->assertEquals($expected, $actual);
  361:         $this->assertEquals($expected, $actual);
  507:         $this->assertEquals($expected, $actualData, $message);

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Parser/ProductAttributeSheetTest.php:
  45:         $this->assertEquals($expected, $data);

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Parser/TrimegaMapperTest.php:
  188:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Parser/TrimegaSheetTest.php:
  87:         $this->assertTrue($account === $fixture->getDefaultAccount(), 'Wrong account');
  88:         $this->assertEquals($prefix, $fixture->getPrefixes());
  96:         $this->assertEquals($expected, $data);

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Processor/BulkProductAttributeTest.php:
  153:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Product/AlternateIdUpdaterTest.php:
   97:         $this->assertFalse($actual);
  114:         $this->assertTrue($actual);
  143:         $this->assertFalse($actual);
  163:         $this->assertEquals([0 => $altIdA, 2 => $altIdC], $altIdList);
  191:         $this->assertTrue($actual);
  220:         $this->assertFalse($actual);
  240:         $this->assertEquals([0 => $altIdA, 2 => $altIdC], $altIdList);
  241:         $this->assertTrue($actual);
  278:         $this->assertTrue($actual);
  297:         $this->assertFalse($actual);

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Product/BlockFactoryTest.php:
  112:         $this->assertProductBlock($actual, 'default');
  124:         $this->assertProductBlock($actual, 'default');
  136:         $this->assertProductBlock($actual, 'default');
  148:         $this->assertProductBlock($actual, 'default');
  180:         $this->assertProductBlock($actual, $expected);
  387:         $this->assertProductBlock($actual, 'default');
  401:         $this->assertProductBlock($actual, $display);
  513:         $this->assertInstanceOf(ProductBlock::class, $actual);
  514:         $this->assertEquals($display, $actual->getDisplay(), 'Display did not match.');

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Product/CategoryUpdaterTest.php:
  220:                         $this->assertEquals('onProductChanged', $event->getSubject(), 'Event subject does not match.');
  221:                         $this->assertEquals(['id' => $productId], $event->getArguments(), 'Event argument do not match.');
  253:         $this->assertMethodOrdering($spy);
  321:         $this->assertEquals(

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Product/FlagSearcherTest.php:
   71:         $this->assertSame($pagination, $actual);
  108:         $this->assertContainsOnlyInstancesOf(Products::class, $actual);
  138:         $this->assertCount(1, $actual, 'Expected one product selected.');
  139:         $this->assertEquals($productIdA, $actual[0]->getId());
  167:         $this->assertCount(1, $actual, 'Expected one product selected.');
  168:         $this->assertEquals($productIdA, $actual[0]->getId());
  197:         $this->assertCount(1, $actual, 'Expected one product selected.');
  198:         $this->assertEquals($productId, $actual[0]['id']);
  199:         $this->assertEquals($sku, $actual[0]['sku']);

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Product/ProductUpdaterTest.php:
  303:                         $this->assertEquals('onProductChanged', $event->getSubject(), 'Event subject does not match.');
  304:                         $this->assertEquals(['id' => $productId], $event->getArguments(), 'Event argument do not match.');

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Product/Block/AttributeSuggesterTest.php:
  42:         $this->assertEquals([], $this->fixture->suggestAttributeIdList([$productList]));
  68:         $this->assertEquals(
  91:         $this->assertEquals(

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Product/Search/AltHandlerTest.php:
  36:         $this->assertInstanceOf(HandlerInterface::class, $this->fixture);
  51:         $this->assertEquals($productIds, $actual);
  66:         $this->assertEquals($productIds, $actual);
  79:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Product/Search/HandlerTest.php:
  20:         $this->assertInstanceOf(HandlerInterface::class, $this->fixture);
  50:         $this->assertEquals($productIds, $actual);
  78:         $this->assertEquals($productIds, $actual);
  87:         $this->assertTrue($actual);

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Product/Search/SkuIdHandlerTest.php:
  37:         $this->assertInstanceOf(HandlerInterface::class, $this->fixture);
  53:         $this->assertEquals([$productId], $actual);
  69:         $this->assertEquals([$productId], $actual);
  76:         $this->assertEmpty($actual);
  83:         $this->assertTrue($actual);

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/ProductMedia/FileTest.php:
  21:         $this->assertEquals($contents, $fixture->getContent());
  30:         $this->assertEquals($fileName, $fixture->getFileName());

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/ProductQtyPrice/ProductPriceEventDispatcherTest.php:
  116:         $this->assertEquals('Price:'.ucfirst($key), $event->getField());
  117:         $this->assertEquals($oldValue, $event->getOldValue());
  118:         $this->assertEquals($newValue, $event->getNewValue());
  153:         $this->assertInstanceOf(Dx_FieldHandler_ChangeEvent::class, $event);
  154:         $this->assertEquals('Product', $event->getObjectType());
  155:         $this->assertEquals($productId, $event->getObjectId());
  156:         $this->assertEquals("Contract=$contractId:MinQty=$minQty", $event->getSubField());
  174:         $this->assertFalse($actual);
  183:         $this->assertTrue($actual);
  200:         $this->assertEquals('onProductChanged', $eventType);
  201:         $this->assertInstanceOf(GenericEvent::class, $event);
  202:         $this->assertEquals('onProductChanged', $event->getSubject());
  203:         $this->assertEquals($productId, $event->getArgument('id'));

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Quote/ApprovalEmailParameterGeneratorTest.php:
  330:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Quote/CartGeneratorTest.php:
  191:         $this->assertEquals($qty, $pricePoint->getMinQty());
  192:         $this->assertEquals($price, $pricePoint->getPrice());
  193:         $this->assertEquals(1, $pricePoint->getBlockSize());
  194:         $this->assertEquals(LocalClock::normalize('1 day'), $pricePoint->getExpiresOn());
  234:         $this->assertEquals($qtyA, $pricePointA->getMinQty());
  235:         $this->assertEquals($priceA, $pricePointA->getPrice());
  236:         $this->assertEquals(1, $pricePointA->getBlockSize());
  237:         $this->assertEquals(LocalClock::normalize('1 day'), $pricePointA->getExpiresOn());
  238:         $this->assertEquals($qtyB, $pricePointB->getMinQty());
  239:         $this->assertEquals($priceB, $pricePointB->getPrice());
  240:         $this->assertEquals(1, $pricePointB->getBlockSize());
  241:         $this->assertEquals(LocalClock::normalize('1 day'), $pricePointB->getExpiresOn());
  302:         $this->assertEquals($cart, $actual);

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Quote/CartToQuoteLinePricerTest.php:
   42:         $this->assertEquals($price, $actual);
   75:         $this->assertEquals($price, $actual);
  118:         $this->assertEquals($price, $actual);
  131:         $this->assertNull($actual);

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Quote/PdfGeneratorTest.php:
   85:         $this->assertCount(1, $lineItemList);
   86:         $this->assertEquals($product, $lineItemList[0]->getProduct(), 'invalid product');
   87:         $this->assertEquals($qty, $lineItemList[0]->getQuantity(), 'invalid quantity');
   88:         $this->assertEquals($price, $lineItemList[0]->getItemPrice(), 'invalid price');
   89:         $this->assertEquals(1, $lineItemList[0]->getBlockSize(), 'invalid block size');
   90:         $this->assertEquals($flags, $lineItemList[0]->getFlags(), 'invalid flags');
  138:         $this->assertEquals($template, $parameterList[0], 'invalid template');
  139:         $this->assertEquals($order, $actualOrder, 'invalid order');
  140:         $this->assertEquals($name, $actualQuote->getCustomerName(), 'invalid customer name');
  141:         $this->assertEquals($requested, $actualQuote->getDate()->format('Y-m-d H:i:s'), 'invalid request date');
  142:         $this->assertEquals($expires, $actualQuote->getExpires()->format('Y-m-d'), 'invalid expires date');
  143:         $this->assertEquals($company, $actualQuote->getCompany(), 'invalid company');
  144:         $this->assertEquals($phone, $actualQuote->getTelephone(), 'invalid phone');
  145:         $this->assertEquals($email, $actualQuote->getEmail(), 'invalid email');
  146:         $this->assertEquals($comments, $actualQuote->getComments(), 'invalid comments');
  231:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Rebate/EntityToFormMapperTest.php:
  63:         $this->assertSame($form, $actual);

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Rebate/InputToEntityMapperTest.php:
  40:         $this->assertSame($rebate, $actual);

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/RelatedProduct/RelatedProductReporterTest.php:
  111:         $this->assertEquals($expected, $actual);
  262:         $this->assertEquals($expected, $actual);
  370:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Report/ConflictReportGeneratorTest.php:
   67:         $this->assertEquals([], $actual);
   98:         $this->assertEquals($expected, $actual);
  121:         $this->assertEquals($valueRender, $actual['liveValueRender']);
  160:         $this->assertEquals($expected, $actual['conflictList']);

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Report/ConflictReportResolverTest.php:
   97:         $this->assertEquals($expected, $actual);
  114:         $this->assertEquals($expected, $actual);
  156:         $this->assertEquals($expected, $actual);
  175:         $this->assertEquals($expected, $actual);
  194:         $this->assertEquals($expected, $actual);
  213:         $this->assertEquals($expected, $actual);
  234:         $this->assertEquals($expected, $actual);
  299:         $this->assertEquals($expected, $actual);
  322:         $this->assertEquals($expected, $actual);
  347:         $this->assertEquals($expected, $actual);
  370:         $this->assertEquals($expected, $actual);
  397:         $this->assertEquals($expected, $actual);
  420:         $this->assertEquals($expected, $actual);
  522:         $this->assertEquals(null, $actual);
  611:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Report/SessionReportGeneratorTest.php:
  100:         $this->assertStringContainsString('- no cart -', $actual);
  168:         $this->assertStringContainsString($lastSeenString, $actual);
  169:         $this->assertStringContainsString($cartId, $actual);
  170:         $this->assertStringContainsString($customerId, $actual);
  171:         $this->assertStringContainsString($email, $actual);
  172:         $this->assertStringContainsString($agent, $actual);
  173:         $this->assertStringContainsString($channel, $actual);
  174:         $this->assertStringContainsString($couponCode, $actual);
  176:         $this->assertStringContainsString($priceExpiresOnString, $actual);
  177:         $this->assertStringContainsString($dateAddedString, $actual);
  178:         $this->assertStringContainsString($quantity, $actual);
  179:         $this->assertStringContainsString($sku, $actual);
  180:         $this->assertStringContainsString($productName, $actual);
  181:         $this->assertStringContainsString($unit, $actual);
  182:         $this->assertStringContainsString($itemPrice, $actual);
  183:         $this->assertStringContainsString($minQty, $actual);
  184:         $this->assertStringContainsString($blockSize, $actual);
  185:         $this->assertStringContainsString($channel, $actual);
  210:         $this->assertStringContainsString($trackingData, $actual);

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Report/Task/AccountsReceivableTaskTest.php:
  23:         $this->assertInstanceOf(Task::class, $this->fixture);
  37:         $this->assertEquals($type.'/'.$year.'/'.$year.'0101.json', $actual);

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Report/Type/AbstractOrderSalesTestCase.php:
  184:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Report/Type/AccountsReceivableDetailsTest.php:
  44:         $this->assertInstanceOf(AbstractReport::class, $this->fixture);
  86:         $this->assertEquals(json_encode($data), $actual);
  96:         $this->assertFalse($actual);

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Report/Type/AccountsReceivableSummaryTest.php:
  44:         $this->assertInstanceOf(AbstractReport::class, $this->fixture);
  86:         $this->assertEquals(json_encode($data), $actual);
  96:         $this->assertFalse($actual);

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Report/Type/OrderSalesByDayTest.php:
  34:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Report/Type/OrderSalesByStateTest.php:
  28:         $this->assertSame($expected, $actual);

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Report/Type/OrderSalesDetailsTest.php:
  34:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Report/Type/OrderSalesTest.php:
  26:         $this->assertSame(OrderSales::TYPE, $actual);
  43:         $this->assertSame($expected, $actual);
  85:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Report/Type/SaleProductsTest.php:
   43:         $this->assertInstanceOf(AbstractReport::class, $this->fixture);
   78:         $this->assertEquals($productIds, $actual);
  109:         $this->assertEquals($productIds, $actual);
  119:         $this->assertFalse($actual);

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Report/ViewModel/InventoryLogFactoryTest.php:
   71:         $this->assertEquals($order, $actual->getOrder());
  102:         $this->assertEquals($product, $actual->getProduct());
  118:         $this->assertEquals($zip, $actual->getZip());
  134:         $this->assertEquals($qty, $actual->getRequestedQuantity());
  150:         $this->assertEquals($qty, $actual->getLiveQuantity());
  166:         $this->assertEquals($dc, $actual->getDc());
  182:         $this->assertEquals($created, $actual->getCreated());
  205:         $this->assertTrue($actual->isMissing());
  228:         $this->assertFalse($actual->isMissing());
  245:         $this->assertTrue($actual->hasZipMismatch());
  263:         $this->assertFalse($actual->hasZipMismatch());
  284:         $this->assertTrue($actual->hasLowAvailability());
  305:         $this->assertFalse($actual->hasLowAvailability());
  312:         $this->assertEquals([], $actual);
  374:         $this->assertEquals($orderA, $actual[0]->getOrder());
  375:         $this->assertEquals($productA, $actual[0]->getProduct());
  376:         $this->assertEquals($requestedQuantityA, $actual[0]->getRequestedQuantity());
  377:         $this->assertEquals($zipA, $actual[0]->getZip());
  378:         $this->assertEquals($liveQuantityA, $actual[0]->getLiveQuantity());
  379:         $this->assertEquals($createdA, $actual[0]->getCreated());
  381:         $this->assertEquals($orderB, $actual[1]->getOrder());
  382:         $this->assertEquals($productB, $actual[1]->getProduct());
  383:         $this->assertEquals($requestedQuantityB, $actual[1]->getRequestedQuantity());
  384:         $this->assertEquals($zipB, $actual[1]->getZip());
  385:         $this->assertEquals($liveQuantityB, $actual[1]->getLiveQuantity());
  386:         $this->assertEquals($createdB, $actual[1]->getCreated());

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Repository/DcDowntimeRepositoryTest.php:
  37:         $this->assertInstanceOf(RWEntityRepository::class, $this->fixture);
  56:         $this->assertCount(2, $actual);
  57:         $this->assertEqualsCanonicalizing([$dcCodeB, $dcCodeC], $actual);

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Repository/FavoriteRepositoryTest.php:
  34:         $this->assertInstanceOf(RWEntityRepository::class, $this->fixture);
  49:         $this->assertEquals([$expected], $actual);
  64:         $this->assertEquals([], $actual);
  87:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Security/NameGetterTest.php:
   39:         $this->assertNull($this->fixture->getName());
   46:         $this->assertNull($this->fixture->getName());
   62:         $this->assertNull($this->fixture->getName());
   85:         $this->assertNull($this->fixture->getName());
  110:         $this->assertEquals($username, $this->fixture->getName());

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Security/Core/Authorization/Voter/OfficeVoterTest.php:
   40:         $this->assertTrue($this->fixture->supportsAttribute(OfficeVoter::ROLE));
   41:         $this->assertFalse($this->fixture->supportsAttribute(uniqid()));
   46:         $this->assertTrue($this->fixture->supportsClass(uniqid()));
   51:         $this->assertFalse($this->fixture->hasValidHash());
   58:         $this->assertFalse($this->fixture->hasValidHash());
   73:         $this->assertFalse($this->fixture->hasValidHash());
   88:         $this->assertFalse($this->fixture->hasValidHash());
  103:         $this->assertTrue($this->fixture->hasValidHash());
  108:         $this->assertEquals(VoterInterface::ACCESS_DENIED, $this->getVote());
  113:         $this->assertEquals(VoterInterface::ACCESS_ABSTAIN, $this->getVote(uniqid()));
  128:         $this->assertEquals(VoterInterface::ACCESS_DENIED, $this->getVote());
  143:         $this->assertEquals(VoterInterface::ACCESS_DENIED, $this->getVote());
  158:         $this->assertEquals(VoterInterface::ACCESS_GRANTED, $this->getVote());

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Security/Login/CartUpdaterTest.php:
   62:         $this->assertEquals($cartId, $actual);
  150:         $this->assertEquals($cartId, $actual);

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Service/CostSortingTest.php:
  31:         $this->assertEquals(count($expectedSortedList), count($unsortedList));
  36:             $this->assertEquals($expectedSortedAccount->getId(), $actualSortedAccount->getId());
  37:             $this->assertEquals($expectedSortedAccount->getSupplierId(), $actualSortedAccount->getSupplierId());

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Service/FullChangeEventTest.php:
  53:         $this->assertEquals(
  74:         $this->assertEquals(

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Service/ProductsSoldReporterTest.php:
   52:         $this->assertEquals($expected, $actual);
  159:         $this->assertEquals($expected, $actual);
  281:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Service/StatsInventoryTest.php:
  101:         $this->assertEquals($expected, $result);
  138:         $this->assertTrue($fileReader->canRead($filename));
  143:         $this->assertEquals($expected, $result);

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Service/Invoice/RenderTest.php:
  196:         $this->assertEquals('DealExpressAdminBundle:Invoice:failed.html.twig', $actual);
  213:         $this->assertEquals('DealExpressAdminBundle:Invoice:'.$state.'.html.twig', $actual);
  227:         $this->assertOutputEquals('MfgDirect', 'pdfMethodLabel');
  242:         $this->assertOutputEquals($invoice, 'invoice');
  257:         $this->assertOutputEquals('Pick Ticket', 'pickTicketLabel');
  273:         $this->assertOutputEquals('RA#', 'pickTicketLabel');
  288:         $this->assertOutputEquals($supplier, 'supplier');
  314:         $this->assertOutputEquals($expected, 'supplierOptionList');
  335:         $this->assertOutputEquals($virtualSuppliers, 'virtualSuppliers');
  384:         $this->assertEquals($expected, $actual);
  471:         $this->assertEquals('DealExpressAdminBundle:Invoice:newInvoice.html.twig', $actual);
  489:         $this->assertOutputEquals($estimators, 'estimators');
  508:         $this->assertOutputEquals($invoice, 'invoice');
  527:         $this->assertOutputEquals($ignoreMinimum, 'ignoreMinimum');
  548:         $this->assertOutputEquals($expected, 'isReturn');
  612:         $this->assertOutputEquals($expected, 'estimatorList');
  633:                         $test->assertEquals($expected, $params[$paramKey]);

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Shipping/SuggestionNormalizerTest.php:
  107:         $this->assertNormalization($suggestion, $expected);
  129:         $this->assertNormalization($suggestion, $expected);
  152:         $this->assertNormalization($suggestion, $expected);
  180:         $this->assertNormalization($suggestion, $expected);
  200:         $this->assertNormalization($suggestion, $expected);
  221:         $this->assertNormalization($suggestion, $expected);
  249:         $this->assertNormalization($suggestion, $expected);
  264:         $this->assertNormalization($suggestion, $expected);
  355:         $this->assertNormalization($suggestion, $expected);
  402:         $this->assertNormalization($suggestion, $expected);
  449:         $this->assertNormalization($suggestion, $expected);
  463:         $this->assertNormalization($suggestion, $expected);
  627:         $this->assertArraySubset($expected, $actual);

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Sidebar/CountManagerTest.php:
   87:         $this->assertEquals($data, $actual);
  106:         $this->assertEquals($expected, $actual);
  183:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Sqs/Consumer/ProductAttributeConsumerTest.php:
   40:         $this->assertInstanceOf(SqsConsumerInterface::class, $this->fixture);
   52:         $this->assertEquals(SqsConsumerInterface::MSG_REJECT, $actual);
  111:         $this->assertEquals(SqsConsumerInterface::MSG_ACK, $actual);

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Stats/CouponMarginReporterTest.php:
  41:         $this->assertEquals($expectedReport, $actual, 'Repo did not return expected report');

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Stats/FulfillmentMethodsReporterTest.php:
   57:         $this->assertCount(2, $suppliers);
   93:         $this->assertEquals($expectedOrderIds, $actualOrderIds, 'Expected order ids did not match actual');
  164:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Stats/GoalQuickViewTest.php:
  45:         $this->assertEquals($expected, $response);
  71:         $this->assertEquals($expected, $normalized);

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Stats/StateTaxReporterTest.php:
   56:         $this->assertArrayHasKey('title', $actual);
   57:         $this->assertEquals($expected, $actual['title']);
   76:         $this->assertArrayHasKey('title', $actual);
   77:         $this->assertEquals($expected, $actual['title']);
  116:         $this->assertArrayHasKey('taxableSales', $actual);
  117:         $this->assertEquals($expected, $actual['taxableSales']);
  159:         $this->assertArrayHasKey('taxableSales', $actual);
  160:         $this->assertEquals($expected, $actual['data']);

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/SupplierAccount/SupplierAccountUpdaterTest.php:
  174:                         $this->assertEquals('onSupplierAccountChanged', $event->getSubject(), 'Event subject does not match.');
  175:                         $this->assertEquals(['id' => $supplierAccountId], $event->getArguments(), 'Event argument do not match.');

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Tax/CertificateFormUploaderTest.php:
   86:         $this->assertEquals($expected, $actual);
   96:         $this->assertEquals([], $actual);
  212:         $this->assertEquals($expected, $actual);
  264:         $this->assertNotFalse($result);
  279:         $this->assertFalse($result);
  296:         $this->assertSame($result, $fileUrl);

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Tax/ExemptionUpdaterTest.php:
  112:         $this->assertFalse($actual);
  163:         $this->assertFalse($actual);
  220:         $this->assertFalse($actual);
  231:         $this->assertSame($customer, $actual);

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Tax/ExemptionUpdater/CustomerLookupTest.php:
  112:         $this->assertEquals($expected, $actual);
  229:         $this->assertSame($customer, $actual);
  241:         $this->assertSame($existingCustomer, $actual);

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Trimega/TrackingImporterTest.php:
  189:         $this->assertEquals($trackingDataList, iterator_to_array($trackingDataIterator));
  239:         $this->assertEquals($invoiceIdList, $actual);

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Trimega/TrackingImport/AccoParserTest.php:
  120:         $this->assertEquals(0, $actual->count());
  140:         $this->assertEquals([$expected], $actual->current()['numbers']);
  169:         $this->assertEquals($carrierName, $actual->current()['method']);
  189:         $this->assertEquals($expected, $actual->current()['method']);
  220:         $this->assertEquals($mappedName, $actual->current()['method']);
  252:         $this->assertEquals(0, $actual->count());
  287:         $this->assertEquals(1, $actual->count());
  288:         $this->assertEquals($expected, $actual->current()['invoice']);
  353:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Trimega/TrackingImport/AveryParserTest.php:
  125:         $this->assertCount(0, $actual);
  158:         $this->assertCount(1, $actual);
  159:         $this->assertEquals($expected, $actual->current()['invoice']);
  185:         $this->assertCount(0, $actual);
  202:         $this->assertEquals($expected, $actual->current()['numbers']);
  239:         $this->assertEquals($expected, $actual->current()['method']);
  267:         $this->assertEquals($mappedName, $actual->current()['method']);
  294:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Trimega/TrackingImport/FellowesParserTest.php:
  110:         $this->assertCount(0, $actual);
  143:         $this->assertCount(1, $actual);
  144:         $this->assertEquals($expected, $actual[0]['invoice']);
  170:         $this->assertCount(0, $actual);
  187:         $this->assertEquals($expected, $actual[0]['numbers']);
  224:         $this->assertEquals($expected, $actual[0]['method']);
  252:         $this->assertEquals($mappedName, $actual[0]['method']);
  280:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Trimega/TrackingImport/SafcoParserTest.php:
  65:         $this->assertInstanceOf(\CallbackFilterIterator::class, $actual);
  66:         $this->assertEquals($this->fileReader, $actual->getInnerIterator());
  76:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Trimega/TrackingImport/SafcoPipelineTest.php:
  31:         $this->assertEquals([], $actual);
  58:         $this->assertEquals($mappedName, $actual['method']);
  85:         $this->assertEquals($expected, $actual);
  97:         $this->assertEquals([], $actual);

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Trimega/TrackingImport/SmeadParserTest.php:
  63:         $this->assertEquals($this->fileReader, $actual);

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Trimega/TrackingImport/SmeadPipelineTest.php:
  31:         $this->assertEquals([], $actual);
  66:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Trimega/TrackingImport/UpsQuantumViewParserTest.php:
  67:         $this->assertInstanceOf(\CallbackFilterIterator::class, $actual);
  68:         $this->assertEquals($this->fileReader, $actual->getInnerIterator());
  78:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Trimega/TrackingImport/UpsQuantumViewPipelineTest.php:
   74:         $this->assertEquals([], $actual);
  111:         $this->assertArraySubset(['numbers' => [$trackingNumber]], $actual);
  127:         $this->assertArraySubset(['method' => $expectedMethod], $actual);
  142:         $this->assertArraySubset(['method' => $method], $actual);
  198:         $this->assertArraySubset(['invoice' => $expected], $actual);
  248:         $this->assertEquals([], $actual);

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Twig/Extension/CategoryAttributeUrlExtensionTest.php:
   40:         $this->assertInstanceOf(AbstractExtension::class, $this->fixture);
   82:         $this->assertEquals('', $actual, 'Missing parameter index: attributeId.');
   93:         $this->assertEquals('', $actual, 'Missing parameter index: displayValue.');
  138:         $this->assertEquals($expected, $actual, 'Generated return did not match expected return');
  165:             $this->assertInstanceOf(TwigFunction::class, $actualFunction);

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/Twig/Extension/WatchlistTest.php:
   46:         $this->assertInstanceOf(AbstractExtension::class, $this->fixture);
   53:         $this->assertCount(2, $actual);
   54:         $this->assertContainsOnlyInstancesOf(TwigFunction::class, $actual);
   55:         $this->assertEquals('watchlistWarnings', $actual[0]->getName());
   56:         $this->assertEquals([$this->fixture, 'getWatchlistWarnings'], $actual[0]->getCallable());
   57:         $this->assertEquals('watchlistFlagNames', $actual[1]->getName());
   58:         $this->assertEquals([$this->fixture, 'getWatchlistFlagNames'], $actual[1]->getCallable());
  145:         $this->assertEquals($expected, $actual);
  154:         $this->assertEquals('', $actual);
  173:         $this->assertEquals($nameList, $actual);

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/ViewModel/CostFactoryTest.php:
   57:         $this->assertEmpty($actual);
   75:         $this->assertEmpty($actual);
  128:         $this->assertCount(2, $actual);
  131:         $this->assertEquals($productIdA, $actualA->getProductId());
  132:         $this->assertEquals($vendorSkuA, $actualA->getVendorSku());
  133:         $this->assertEquals($ourSkuA, $actualA->getOurSku());
  134:         $this->assertEquals($productNameA, $actualA->getProductName());
  135:         $this->assertEquals($supplierNameA, $actualA->getSupplierName());
  136:         $this->assertEquals($categoryNameA, $actualA->getPrimaryCategory());
  137:         $this->assertEquals($disabledUntilA, $actualA->getDisabledUntil());
  140:         $this->assertEquals($productIdB, $actualB->getProductId());
  141:         $this->assertEquals($vendorSkuB, $actualB->getVendorSku());
  142:         $this->assertEquals($ourSkuB, $actualB->getOurSku());
  143:         $this->assertEquals($productNameB, $actualB->getProductName());
  144:         $this->assertEquals($supplierNameB, $actualB->getSupplierName());
  145:         $this->assertEquals('', $actualB->getPrimaryCategory());
  146:         $this->assertEquals($disabledUntilB, $actualB->getDisabledUntil());

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/ViewModel/DcDowntimeFactoryTest.php:
   51:         $this->assertEquals($entity->getId(), $actual->getId());
   52:         $this->assertEquals($supplier->getTag(), $actual->getSupplier());
   53:         $this->assertEquals($entity->getSupplierId(), $actual->getSupplierId());
   54:         $this->assertEquals($entity->getDcCode(), $actual->getDcCode());
   55:         $this->assertEquals($entity->getReason(), $actual->getReason());
   56:         $this->assertEquals($entity->getStartDate(), $actual->getStartDate());
   57:         $this->assertEquals($entity->getEndDate(), $actual->getEndDate());
   58:         $this->assertEquals($dc->getCity(), $actual->getCity());
   59:         $this->assertEquals($dc->getState(), $actual->getState());
   60:         $this->assertEquals($dc->getPhone(), $actual->getPhone());
  107:         $this->assertCount(1, $actualPast);
  108:         $this->assertEquals($entityA->getId(), reset($actualPast)->getId());
  109:         $this->assertEquals($supplier->getTag(), reset($actualPast)->getSupplier());
  110:         $this->assertEquals($entityA->getSupplierId(), reset($actualPast)->getSupplierId());
  111:         $this->assertEquals($entityA->getDcCode(), reset($actualPast)->getDcCode());
  112:         $this->assertEquals($entityA->getReason(), reset($actualPast)->getReason());
  113:         $this->assertEquals($entityA->getStartDate(), reset($actualPast)->getStartDate());
  114:         $this->assertEquals($entityA->getEndDate(), reset($actualPast)->getEndDate());
  115:         $this->assertEquals($dcA->getCity(), reset($actualPast)->getCity());
  116:         $this->assertEquals($dcA->getState(), reset($actualPast)->getState());
  117:         $this->assertEquals($dcA->getPhone(), reset($actualPast)->getPhone());
  119:         $this->assertCount(1, $actualCurrent);
  120:         $this->assertEquals($entityB->getId(), reset($actualCurrent)->getId());
  121:         $this->assertEquals($supplier->getTag(), reset($actualCurrent)->getSupplier());
  122:         $this->assertEquals($entityB->getSupplierId(), reset($actualCurrent)->getSupplierId());
  123:         $this->assertEquals($entityB->getDcCode(), reset($actualCurrent)->getDcCode());
  124:         $this->assertEquals($entityB->getReason(), reset($actualCurrent)->getReason());
  125:         $this->assertEquals($entityB->getStartDate(), reset($actualCurrent)->getStartDate());
  126:         $this->assertEquals($entityB->getEndDate(), reset($actualCurrent)->getEndDate());
  127:         $this->assertEquals($dcB->getCity(), reset($actualCurrent)->getCity());
  128:         $this->assertEquals($dcB->getState(), reset($actualCurrent)->getState());
  129:         $this->assertEquals($dcB->getPhone(), reset($actualCurrent)->getPhone());
  131:         $this->assertCount(1, $actualFuture);
  132:         $this->assertEquals($entityC->getId(), reset($actualFuture)->getId());
  133:         $this->assertEquals($supplier->getTag(), reset($actualFuture)->getSupplier());
  134:         $this->assertEquals($entityC->getSupplierId(), reset($actualFuture)->getSupplierId());
  135:         $this->assertEquals($entityC->getDcCode(), reset($actualFuture)->getDcCode());
  136:         $this->assertEquals($entityC->getReason(), reset($actualFuture)->getReason());
  137:         $this->assertEquals($entityC->getStartDate(), reset($actualFuture)->getStartDate());
  138:         $this->assertEquals($entityC->getEndDate(), reset($actualFuture)->getEndDate());
  139:         $this->assertEquals($dcC->getCity(), reset($actualFuture)->getCity());
  140:         $this->assertEquals($dcC->getState(), reset($actualFuture)->getState());
  141:         $this->assertEquals($dcC->getPhone(), reset($actualFuture)->getPhone());

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/ViewModel/SubscriptionFactoryTest.php:
  41:         $this->assertInstanceOf(Subscription::class, $actual);
  58:         $this->assertEquals($expected, $actual->getName());
  71:         $this->assertEquals('2 weeks', $actual->getFrequency());

DiscountOfficeItems • src/DealExpress/AdminBundle/Tests/ViewModel/SubscriptionTest.php:
  44:         $this->assertEquals($expected, $actual);
  54:         $this->assertEquals($this->frequency, $actual);
  60:         $this->assertEquals($this->frequency, $actual);
  72:         $this->assertEquals($expected, $actual);
  83:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/AmazonBundle/Tests/CloudSearch/FacetIdListGeneratorTest.php:
   90:         $this->assertEquals($expected, $actual);
  223:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/AmazonBundle/Tests/CloudSearch/IndexFieldDifferentiatorTest.php:
  29:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/AmazonBundle/Tests/CloudSearch/IndexFieldGeneratorTest.php:
   26:         $this->assertEquals(14, $actual);
   39:         $this->assertEquals($expected, $actual[$name]);
  205:         $this->assertEquals($expected, $actual[$facetId]);
  217:         $this->assertEquals($expectedA, $actual[$facetIdA]);
  218:         $this->assertEquals($expectedB, $actual[$facetIdB]);

DiscountOfficeItems • src/DealExpress/AmazonBundle/Tests/CloudSearch/IndexFieldManagerTest.php:
   76:         $this->assertEquals($expected, $actual);
  272:         $this->assertFalse($actual);
  273:         $this->assertEquals($startTime, $endTime);
  288:         $this->assertTrue($actual);
  289:         $this->assertEquals($startTime, $endTime);
  314:         $this->assertFalse($actual);
  315:         $this->assertEquals($startTime, $endTime);
  340:         $this->assertTrue($actual);
  341:         $this->assertEquals($startTime + 60, $endTime);

DiscountOfficeItems • src/DealExpress/AmazonBundle/Tests/CloudSearch/Feed/FeedEncoderTest.php:
  161:         $this->assertEquals($actualA->toArray(), []);
  162:         $this->assertEquals($actualB->toArray(), $entryListB->toArray());
  209:         $this->assertEquals($expected, $arrayResponse, $message);
  217:         $this->assertInstanceOf(
  223:         $this->assertEquals(

DiscountOfficeItems • src/DealExpress/AmazonBundle/Tests/CloudSearch/Feed/ProductNormalizerTest.php:
   61:         $this->assertEquals($id, $actual['id']);
   70:         $this->assertEquals('add', $actual['type']);
   80:         $this->assertEquals($expected, $actual);
   92:         $this->assertEquals($expected, $actual['fields'][$field]);
  147:         $this->assertEquals($expected, $actual['fields']['short_description']);
  159:         $this->assertEquals($expected, $actual['fields']['long_description']);
  187:         $this->assertArrayNotHasKey('brand', $actual['fields']);
  200:         $this->assertEquals($name, $actual['fields']['brand']);
  219:         $this->assertEquals($value, $actual['fields']['brand']);
  232:         $this->assertEquals($ref, $actual['fields']['primary_image']);
  245:         $this->assertEquals([$id], $actual['fields']['category_id_list']);
  263:         $this->assertEquals(sort($expected), sort($actual['fields']['category_ancestry_id_list']));
  320:         $this->assertEquals($price, $actual['fields'][$priceIndex]);
  333:         $this->assertEquals([], $actual['fields']);
  348:         $this->assertEquals(['a'.$id => [$value]], $actual['fields']);
  367:         $this->assertEquals($expected, $actual['fields']);
  384:         $this->assertEquals($expected, $actual['fields']);
  402:         $this->assertEquals($expected, $actual['fields']);

DiscountOfficeItems • src/DealExpress/AmazonBundle/Tests/CloudSearch/Query/FacetSerializerTest.php:
   37:         $this->assertEquals('', $actual);
   49:         $this->assertEquals('', $actual);
   66:         $this->assertEquals('', $actual);
   83:         $this->assertEquals('', $actual);
   98:         $this->assertEquals('', $actual);
  113:         $this->assertEquals('', $actual);
  141:         $this->assertEquals('', $actual);
  169:         $this->assertEquals('(term field='.$id.' \''.$value.'\')', $actual);
  209:         $this->assertEquals('(term field='.$id.' \''.$valueOne.'\') (term field='.$id.' \''.$valueTwo.'\')', $actual);
  247:         $this->assertEquals(
  279:         $this->assertEquals('(range field='.$id.' ['.$valueMin.','.$valueMax.'])', $actual);
  322:         $this->assertEquals($expectedFacet1.' '.$expectedFacet2, $actual);
  351:         $this->assertEquals('(range field='.$id.' {,'.$valueMax.'])', $actual);
  380:         $this->assertEquals('(range field='.$id.' ['.$valueMin.',})', $actual);

DiscountOfficeItems • src/DealExpress/AmazonBundle/Tests/CloudSearch/Query/ParameterGeneratorTest.php:
   58:         $this->assertInstanceOf(ParameterGeneratorInterface::class, $this->fixture);
   67:         $this->assertArraySubset(['q' => $keywords], $parameterList);
   82:         $this->assertArraySubset(['size' => $resultsPerPage], $queryArguments);
   83:         $this->assertArraySubset(['start' => $start], $queryArguments);
  125:         $this->assertArraySubset(['sort' => $displayName], $queryArguments);
  147:         $this->assertEquals($expected, $actual['q']);
  148:         $this->assertEquals('structured', $actual['q.parser']);
  171:         $this->assertEquals($keywords, $actual['q']);
  172:         $this->assertEquals($expected, $actual['fq']);
  173:         $this->assertArrayNotHasKey('q.parser', $actual);
  206:         $this->assertArraySubset(['q' => $categoryResult], $queryArguments);
  238:         $this->assertEquals('{}', $actual['facet.'.$facetA]);
  239:         $this->assertEquals('{}', $actual['facet.'.$facetB]);
  240:         $this->assertEquals('{}', $actual['facet.'.$facetC]);
  248:         $this->assertEquals('(range field=store_1_price [2,}) ', $actual['q']);

DiscountOfficeItems • src/DealExpress/AmazonBundle/Tests/CloudSearch/Results/DataNormalizerTest.php:
   37:         $this->assertEquals([], $actual);
  105:         $this->assertEquals($expected, $actual);
  131:         $this->assertEquals($expected, $actual);
  159:         $this->assertEquals($expected, $actual);
  166:         $this->assertEquals([], $actual);

DiscountOfficeItems • src/DealExpress/AmazonBundle/Tests/CloudSearch/Results/FacetTranslatorTest.php:
   49:         $this->assertEquals([], $actual);
   80:         $this->assertEquals([], $actual);
  150:         $this->assertEquals([$facetA, $facetB], $actual);

DiscountOfficeItems • src/DealExpress/AmazonBundle/Tests/CloudSearch/Results/ProductDenormalizerTest.php:
   43:         $this->assertInstanceOf(ProductInterface::class, $actual);
   52:         $this->assertEquals($id, $actual->getId());
   59:         $this->assertSame('', $actual->getSku());
   68:         $this->assertEquals($value, $actual->getSku());
   75:         $this->assertInstanceOf(NullInterface::class, $actual->getManufacturer());
   76:         $this->assertInstanceOf(ManufacturerInterface::class, $actual->getManufacturer());
   83:         $this->assertSame(0, $actual->getManufacturerId());
   92:         $this->assertEquals($value, $actual->getManufacturerId());
   99:         $this->assertEquals('', $actual->getMfgpartno());
  106:         $this->assertInstanceOf(NullInterface::class, $actual->getBrand());
  107:         $this->assertInstanceOf(BrandInterface::class, $actual->getBrand());
  114:         $this->assertSame(0, $actual->getBrandId());
  123:         $this->assertEquals($value, $actual->getBrandId());
  130:         $this->assertSame('', $actual->getName());
  139:         $this->assertEquals($value, $actual->getName());
  146:         $this->assertSame('', $actual->getShortDescription());
  155:         $this->assertEquals($value, $actual->getShortDescription());
  162:         $this->assertSame('', $actual->getLongDescription());
  171:         $this->assertEquals($value, $actual->getLongDescription());
  178:         $this->assertEquals([], $actual->getBulletPointList());
  185:         $this->assertSame('', $actual->getKeywords());
  194:         $this->assertEquals($value, $actual->getKeywords());
  201:         $this->assertSame(0.0, $actual->getMsrp());
  208:         $this->assertSame(0.0, $actual->getWeight());
  215:         $this->assertSame('', $actual->getUnitOfMeasure());
  224:         $this->assertEquals($value, $actual->getUnitOfMeasure());
  234:         $this->assertEquals($now, $actual->getDateAdded());
  244:         $this->assertEquals($now, $actual->getLastModified());
  251:         $this->assertSame(0, $actual->getReviewCount());
  260:         $this->assertEquals($value, $actual->getReviewCount());
  267:         $this->assertSame(0.0, $actual->getAverageRating());
  276:         $this->assertEquals($value, $actual->getAverageRating());
  283:         $this->assertInstanceOf(Collection::class, $actual->getAttributeList());
  284:         $this->assertEmpty($actual->getAttributeList());
  291:         $this->assertInstanceOf(Collection::class, $actual->getImageList());
  292:         $this->assertEmpty($actual->getImageList());
  299:         $this->assertInstanceOf(Collection::class, $actual->getAlternateImageList());
  300:         $this->assertEmpty($actual->getAlternateImageList());
  307:         $this->assertInstanceOf(Collection::class, $actual->getMediaList());
  308:         $this->assertEmpty($actual->getMediaList());
  315:         $this->assertNull($actual->getPrimaryImage());
  325:         $this->assertInstanceOf(ImageRefInterface::class, $image);
  326:         $this->assertEquals($value, $image->getRef());
  327:         $this->assertTrue($image->isPrimary());
  334:         $this->assertEquals([], $actual->getAlternateIDList());
  341:         $this->assertInstanceOf(NullInterface::class, $actual->getBlock());
  342:         $this->assertInstanceOf(BlockInterface::class, $actual->getBlock());
  349:         $this->assertEquals([], $actual->getPackList());
  356:         $this->assertFalse($actual->isInCategory(rand()));
  365:         $this->assertTrue($actual->isInCategory($value));
  366:         $this->assertFalse($actual->isInCategory(rand(200, 299)));
  377:         $this->assertTrue($actual->isInCategory($value));
  378:         $this->assertFalse($actual->isInCategory(rand(200, 299)));
  385:         $this->assertInstanceOf(Collection::class, $actual->getCategoryList());
  386:         $this->assertEmpty($actual->getCategoryList());
  410:         $this->assertInstanceOf(Collection::class, $actual->getCategoryList());
  411:         $this->assertEquals([$value], $actual->getCategoryList()->toArray());

DiscountOfficeItems • src/DealExpress/AmazonBundle/Tests/CloudSearch/Results/ResultsFactoryTest.php:
   73:         $this->assertInstanceOf(ResultsFactoryInterface::class, $this->fixture);
  149:         $this->assertEquals([$productOne, $productTwo], $listSets['products']);
  212:         $this->assertEquals($facetList, $listSets['facets']);
  229:         $this->assertEquals([$suggestedSpelling], $listSets['suggestedSpellings']);
  243:         $this->assertSame($results, $actual);

DiscountOfficeItems • src/DealExpress/AmazonBundle/Tests/Command/IndexSyncCommandTest.php:
   79:         $this->assertEmpty($tester->getDisplay());
   94:         $this->assertStringContainsString('Gathering data for '.$facetMax.' facets.', $actual);
  113:         $this->assertStringContainsString('Gathering data for '.$facetMax.' facets.', $actual);
  234:         $this->assertEquals($expected, $methodList);
  262:         $this->assertEquals($expected, $methodList);
  289:         $this->assertEquals($expected, $methodList);
  309:         $this->assertStringContainsString($expected, $actual);

DiscountOfficeItems • src/DealExpress/AmazonBundle/Tests/Pwa/AddressFactoryTest.php:
   27:         $this->assertInstanceOf(AddressInterface::class, $actual);
   38:         $this->assertEquals($firstName, $actual->getFirstName());
   49:         $this->assertEquals($lastName, $actual->getLastName());
   61:         $this->assertEquals($firstName.' '.$lastName, $actual->getName());
   72:         $this->assertEquals($phoneNumber, $actual->getPhone());
   83:         $this->assertEquals($city, $actual->getCity());
   93:         $this->assertEquals('WI', $actual->getState());
  102:         $this->assertSame('', $actual->getState());
  113:         $this->assertEquals($country, $actual->getCountry());
  124:         $this->assertEquals($zip, $actual->getZip());
  137:         $this->assertEquals($company, $actual->getCompany());
  148:         $this->assertEquals('', $actual->getCompany());
  159:         $this->assertEquals('', $actual->getCompany());
  170:         $this->assertEquals('', $actual->getCompany());
  183:         $this->assertEquals($address, $actual->getStreetAddress());
  196:         $this->assertEquals($streetAddress, $actual->getStreetAddress());
  209:         $this->assertEquals($streetAddress, $actual->getStreetAddress());
  222:         $this->assertEquals($suburb, $actual->getSuburb());
  235:         $this->assertEquals($suburb, $actual->getSuburb());
  248:         $this->assertEquals($suburb, $actual->getSuburb());

DiscountOfficeItems • src/DealExpress/AmazonBundle/Tests/Pwa/CancelTest.php:
  43:         $this->assertInstanceOf(CancelInterface::class, $this->fixture);
  88:         $this->assertSame($paymentResult, $actual);

DiscountOfficeItems • src/DealExpress/AmazonBundle/Tests/Pwa/CaptureTest.php:
  43:         $this->assertInstanceOf(CaptureInterface::class, $this->fixture);
  88:         $this->assertSame($paymentResult, $actual);

DiscountOfficeItems • src/DealExpress/AmazonBundle/Tests/Pwa/ClientAdapterTest.php:
   89:         $this->assertInstanceOf(UnknownErrorTransaction::class, $actual);
  116:         $this->assertEquals($transaction, $actual);
  134:         $this->assertInstanceOf(UnknownErrorTransaction::class, $actual);
  173:         $this->assertEquals($transaction, $actual);

DiscountOfficeItems • src/DealExpress/AmazonBundle/Tests/Pwa/IpnTest.php:
   73:         $this->assertInstanceOf(IpnInterface::class, $this->fixture);
  223:         $this->assertInstanceOf(Response::class, $actual);

DiscountOfficeItems • src/DealExpress/AmazonBundle/Tests/Pwa/OnSiteTest.php:
   75:         $this->assertInstanceOf(OnSiteInterface::class, $this->fixture);
   84:         $this->assertInstanceOf(OnSiteForm::class, $actual);
   85:         $this->assertEquals(PwaType::class, $actual->getFormType());
   86:         $this->assertEquals([], $actual->getOptions());
  122:         $this->assertSame($result, $actual);
  143:         $this->assertSame($result, $actual);
  208:         $this->assertSame($result, $actual);
  244:         $this->assertSame($result, $actual);
  262:         $this->assertSame($result, $actual);

DiscountOfficeItems • src/DealExpress/AmazonBundle/Tests/Pwa/RefundTest.php:
   70:         $this->assertInstanceOf(RefundInterface::class, $this->fixture);
  155:         $this->assertSame($refundResult, $actual);
  187:         $this->assertSame($paymentResult, $actual);

DiscountOfficeItems • src/DealExpress/AmazonBundle/Tests/Pwa/StatusCheckTest.php:
   62:         $this->assertInstanceOf(StatusCheckInterface::class, $this->fixture);
   90:         $this->assertSame($paymentResult, $actual);
  149:         $this->assertSame($paymentResult, $actual);
  172:         $this->assertEquals(PaymentResultInterface::ERROR_REQUEST, $actual->getErrorType());
  173:         $this->assertEquals('Missing authorization or capture ID', $actual->getMessage());
  200:         $this->assertSame($paymentResult, $actual);

DiscountOfficeItems • src/DealExpress/AmazonBundle/Tests/Pwa/Cancel/ClientTest.php:
  34:         $this->assertInstanceOf(ClientInterface::class, $this->fixture);
  62:         $this->assertSame($response, $actual);

DiscountOfficeItems • src/DealExpress/AmazonBundle/Tests/Pwa/Cancel/PaymentResultFactoryTest.php:
   32:         $this->assertInstanceOf(AbstractPaymentResultFactory::class, $this->fixture);
   42:         $this->assertInstanceOf(PaymentResult::class, $actual);
   52:         $this->assertEquals(PaymentResult::ERROR_OUTAGE, $actual->getErrorType());
   53:         $this->assertEquals('Payment system not responsive', $actual->getMessage());
   65:         $this->assertEquals(PaymentResult::ERROR_SERVICE, $actual->getErrorType());
   66:         $this->assertEquals($message, $actual->getMessage());
   78:         $this->assertEquals(PaymentResult::ERROR_REQUEST, $actual->getErrorType());
   79:         $this->assertEquals($message, $actual->getMessage());
   91:         $this->assertEquals(PaymentResult::ERROR_REQUEST, $actual->getErrorType());
   92:         $this->assertEquals($message, $actual->getMessage());
  103:         $this->assertStringContainsString('Canceled Transaction ID: '.$transactionId, $actual->getLogDetail());
  114:         $this->assertStringContainsString('Cancel Reason: '.$reason, $actual->getLogDetail());
  124:         $this->assertSame(0.0, $actual->getAmount());
  134:         $this->assertSame(PaymentInterface::VOID, $actual->getStatus());

DiscountOfficeItems • src/DealExpress/AmazonBundle/Tests/Pwa/Capture/CaptureClientTest.php:
  37:         $this->assertInstanceOf(ClientInterface::class, $this->fixture);
  68:         $this->assertInstanceOf(ResponseInterface::class, $actual);

DiscountOfficeItems • src/DealExpress/AmazonBundle/Tests/Pwa/Capture/CloseOrderClientTest.php:
  34:         $this->assertInstanceOf(ClientInterface::class, $this->fixture);
  62:         $this->assertInstanceOf(ResponseInterface::class, $actual);

DiscountOfficeItems • src/DealExpress/AmazonBundle/Tests/Pwa/Capture/PaymentResultFactoryTest.php:
   41:         $this->assertInstanceOf(AbstractPaymentResultFactory::class, $this->fixture);
   51:         $this->assertInstanceOf(PaymentResult::class, $actual);
   61:         $this->assertEquals(PaymentResult::ERROR_OUTAGE, $actual->getErrorType());
   62:         $this->assertEquals('Payment system not responsive', $actual->getMessage());
   74:         $this->assertEquals(PaymentResult::ERROR_SERVICE, $actual->getErrorType());
   75:         $this->assertEquals($message, $actual->getMessage());
   87:         $this->assertEquals(PaymentResult::ERROR_REQUEST, $actual->getErrorType());
   88:         $this->assertEquals($message, $actual->getMessage());
  100:         $this->assertEquals(PaymentResult::ERROR_REQUEST, $actual->getErrorType());
  101:         $this->assertEquals($message, $actual->getMessage());
  114:         $this->assertEquals($transactionId, $actual->getTransactionId());
  125:         $this->assertStringContainsString('Transaction ID: '.$captureId, $actual->getLogDetail());
  137:         $this->assertStringContainsString('Amount: '.$expected, $actual->getLogDetail());
  166:         $this->assertStringContainsString($expected, $actual->getLogDetail());
  187:         $this->assertStringContainsString('Ack: Unknown: '.$status, $actual->getLogDetail());
  198:         $this->assertSame($amount, $actual->getAmount());
  210:         $this->assertSame($statusId, $actual->getStatus());
  221:         $this->assertSame($childResultList, $actual->getChildPaymentList());
  233:         $this->assertEquals($errorType, $actual->getErrorType(), 'getErrorType() failed.');
  234:         $this->assertEquals('Unknown status: '.$status, $actual->getMessage(), 'getMessage() failed.');
  244:         $this->assertNull($actual->getStatus());
  259:         $this->assertEquals($expected, $actual->getDetails());
  271:         $this->assertNull($actual->getSummary());
  285:         $this->assertNull($actual->getDetails(), 'getDetails() failed.');
  286:         $this->assertNull($actual->getSummary(), 'getSummary() failed.');
  287:         $this->assertNull($actual->getLogDetail(), 'getLogDetails() failed.');

DiscountOfficeItems • src/DealExpress/AmazonBundle/Tests/Pwa/Ipn/IpnHandlerFactoryTest.php:
  46:         $this->assertSame($expectedHeaders, $realHeaders);
  57:         $this->assertInstanceOf(IpnHandlerInterface::class, $actual);

DiscountOfficeItems • src/DealExpress/AmazonBundle/Tests/Pwa/Ipn/IpnHandlerTest.php:
   90:         $this->assertInstanceOf(UnknownErrorTransaction::class, $actual);
  117:         $this->assertEquals($transaction, $actual);
  135:         $this->assertInstanceOf(UnknownErrorTransaction::class, $actual);
  175:         $this->assertEquals($transaction, $actual);

DiscountOfficeItems • src/DealExpress/AmazonBundle/Tests/Pwa/OnSite/OrderAuthorizerTest.php:
   87:                         $this->assertInstanceOf(RequestErrorTransaction::class, $actual);
   88:                         $this->assertEquals($message, $actual->getErrorMessage());
  149:         $this->assertEquals($result, $actual);

DiscountOfficeItems • src/DealExpress/AmazonBundle/Tests/Pwa/OnSite/PaymentResultFactoryTest.php:
   41:         $this->assertInstanceOf(AbstractPaymentResultFactory::class, $this->fixture);
   50:         $this->assertInstanceOf(PaymentResult::class, $actual);
   63:         $this->assertEquals($expected, $actual->getLogDetail());
   72:         $this->assertEquals(PaymentResult::ERROR_OUTAGE, $actual->getErrorType());
   73:         $this->assertEquals('Payment system not responsive', $actual->getMessage());
   84:         $this->assertEquals(PaymentResult::ERROR_SERVICE, $actual->getErrorType());
   85:         $this->assertEquals($message, $actual->getMessage());
   96:         $this->assertEquals(PaymentResult::ERROR_REQUEST, $actual->getErrorType());
   97:         $this->assertEquals($message, $actual->getMessage());
  108:         $this->assertEquals(PaymentResult::ERROR_REQUEST, $actual->getErrorType());
  109:         $this->assertEquals($message, $actual->getMessage());
  119:         $this->assertEquals(PaymentResult::ERROR_OUTAGE, $actual->getErrorType());
  120:         $this->assertEquals('Unknown status: '.$status, $actual->getMessage());
  129:         $this->assertEquals(PaymentInterface::PENDING, $actual->getStatus());
  130:         $this->assertStringContainsString('Ack: '.PaymentInterface::PENDING, $actual->getLogDetail());
  140:         $this->assertStringContainsString('Transaction ID: '.$transactionId, $actual->getLogDetail());
  151:         $this->assertStringContainsString('Amount: '.$expectedAmount, $actual->getLogDetail());
  161:         $this->assertStringContainsString('Authorization ID: '.$transactionId, $actual->getDetails());
  171:         $this->assertStringContainsString('Amazon Ref ID: '.$referenceId, $actual->getSummary());
  181:         $this->assertNull($actual->getSummary(), 'getSummary() failed.');
  182:         $this->assertNull($actual->getDetails(), 'getDetails() failed.');
  183:         $this->assertNull($actual->getLogDetail(), 'getLogDetail() failed.');
  192:         $this->assertInstanceOf(PaymentResultInterface::class, $actual);
  193:         $this->assertEquals($actual->getErrorType(), PaymentResultInterface::ERROR_REQUEST);
  194:         $this->assertEquals($actual->getMessage(), $message);

DiscountOfficeItems • src/DealExpress/AmazonBundle/Tests/Pwa/OnSite/Client/AuthorizeClientTest.php:
  38:         $this->assertInstanceOf(ClientInterface::class, $this->fixture);
  71:         $this->assertInstanceOf(ResponseInterface::class, $actual);

DiscountOfficeItems • src/DealExpress/AmazonBundle/Tests/Pwa/OnSite/Client/ConfirmOrderClientTest.php:
  34:         $this->assertInstanceOf(ClientInterface::class, $this->fixture);
  60:         $this->assertInstanceOf(ResponseInterface::class, $actual);

DiscountOfficeItems • src/DealExpress/AmazonBundle/Tests/Pwa/OnSite/Client/GetOrderDetailsClientTest.php:
  34:         $this->assertInstanceOf(ClientInterface::class, $this->fixture);
  62:         $this->assertInstanceOf(ResponseInterface::class, $actual);

DiscountOfficeItems • src/DealExpress/AmazonBundle/Tests/Pwa/OnSite/Client/SetOrderDetailsClientTest.php:
  35:         $this->assertInstanceOf(ClientInterface::class, $this->fixture);
  67:         $this->assertInstanceOf(ResponseInterface::class, $actual);

DiscountOfficeItems • src/DealExpress/AmazonBundle/Tests/Pwa/Refund/AmountCalculatorTest.php:
   54:         $this->assertEquals($amount, $actual);
   66:         $this->assertEquals(null, $actual);
   79:         $this->assertEquals($amount, $actual);
   94:         $this->assertEquals($amount + $partial, $actual);
  109:         $this->assertEquals($amount + $partial, $actual);

DiscountOfficeItems • src/DealExpress/AmazonBundle/Tests/Pwa/Refund/ClientTest.php:
  75:         $this->assertInstanceOf(ResponseInterface::class, $actual);

DiscountOfficeItems • src/DealExpress/AmazonBundle/Tests/Pwa/Refund/PaymentResultFactoryTest.php:
   33:         $this->assertInstanceOf(AbstractPaymentResultFactory::class, $this->fixture);
   43:         $this->assertInstanceOf(PaymentResult::class, $actual);
   53:         $this->assertEquals(PaymentResult::ERROR_OUTAGE, $actual->getErrorType());
   54:         $this->assertEquals('Payment system not responsive', $actual->getMessage());
   66:         $this->assertEquals(PaymentResult::ERROR_SERVICE, $actual->getErrorType());
   67:         $this->assertEquals($message, $actual->getMessage());
   79:         $this->assertEquals(PaymentResult::ERROR_REQUEST, $actual->getErrorType());
   80:         $this->assertEquals($message, $actual->getMessage());
   92:         $this->assertEquals(PaymentResult::ERROR_REQUEST, $actual->getErrorType());
   93:         $this->assertEquals($message, $actual->getMessage());
  104:         $this->assertEquals($transactionId, $actual->getTransactionId());
  115:         $this->assertStringContainsString('Refunded Transaction ID: '.$transactionId, $actual->getLogDetail());
  126:         $this->assertStringContainsString('Refund Transaction ID: '.$transactionId, $actual->getLogDetail());
  137:         $this->assertStringContainsString('Refund Amount: '.$amount, $actual->getLogDetail());
  148:         $this->assertStringContainsString('Refund Reason: '.$reason, $actual->getLogDetail());
  159:         $this->assertEquals('Refund: Amazon Ref ID: '.$transactionId, $actual->getSummary());
  170:         $this->assertNull($actual->getSummary());
  181:         $this->assertNull($actual->getLogDetail());
  193:         $this->assertEquals(-$amountB, $actual->getAmount());
  204:         $this->assertStringContainsString('Refund Amount: '.$amount, $actual->getLogDetail());
  220:         $this->assertEquals($resultStatus, $actual->getStatus());
  221:         $this->assertNull($actual->getErrorType());
  222:         $this->assertNull($actual->getMessage());
  242:         $this->assertEquals(PaymentResultInterface::FAILED, $actual->getStatus());
  254:         $this->assertEquals(PaymentResultInterface::ERROR_OUTAGE, $actual->getErrorType());
  255:         $this->assertEquals($message, $actual->getMessage());

DiscountOfficeItems • src/DealExpress/AmazonBundle/Tests/Pwa/StatusCheck/AuthorizationDetailsClientTest.php:
  34:         $this->assertInstanceOf(ClientInterface::class, $this->fixture);
  60:         $this->assertInstanceOf(ResponseInterface::class, $actual);

DiscountOfficeItems • src/DealExpress/AmazonBundle/Tests/Pwa/StatusCheck/CaptureDetailsClientTest.php:
  34:         $this->assertInstanceOf(ClientInterface::class, $this->fixture);
  60:         $this->assertInstanceOf(ResponseInterface::class, $actual);

DiscountOfficeItems • src/DealExpress/AmazonBundle/Tests/Pwa/StatusCheck/CaptureLookupTest.php:
  201:         $this->assertSame($paymentResult, $actual);

DiscountOfficeItems • src/DealExpress/AmazonBundle/Tests/Pwa/StatusCheck/RefundDetailsClientTest.php:
  34:         $this->assertInstanceOf(ClientInterface::class, $this->fixture);
  60:         $this->assertInstanceOf(ResponseInterface::class, $actual);

DiscountOfficeItems • src/DealExpress/AmazonBundle/Tests/Pwa/StatusCheck/RefundLookupTest.php:
  84:         $this->assertSame($paymentResult, $actual);

DiscountOfficeItems • src/DealExpress/AmazonBundle/Tests/Pwa/Transaction/AbstractErrorTransactionTest.php:
   27:         $this->assertInstanceOf(TransactionInterface::class, $this->fixture);
   33:         $this->assertSame('', $actual);
   43:         $this->assertSame($message, $actual);
   49:         $this->assertSame('', $actual);
   59:         $this->assertEquals($message, $actual);
   65:         $this->assertFalse($actual);
   71:         $this->assertSame('error', $actual);
   77:         $this->assertSame('', $status);
   83:         $this->assertInstanceOf(AddressInterface::class, $actual);
   84:         $this->assertInstanceOf(NullInterface::class, $actual);
   90:         $this->assertSame('', $actual);
   96:         $this->assertSame('', $actual);
  102:         $this->assertSame(0.0, $actual);
  108:         $this->assertSame(0.0, $actual);

DiscountOfficeItems • src/DealExpress/AmazonBundle/Tests/Pwa/Transaction/Factory/AuthorizeTransactionFactoryTest.php:
  34:         $this->assertInstanceOf(TransactionFactoryInterface::class, $this->fixture);
  43:         $this->assertInstanceOf(SuccessTransaction::class, $actual);
  52:         $this->assertEquals('debit', $actual->getType());
  62:         $this->assertEquals($status, $actual->getStatus());
  72:         $this->assertEquals($authorizationId, $actual->getId());
  82:         $this->assertSame($amount, $actual->getAmount());

DiscountOfficeItems • src/DealExpress/AmazonBundle/Tests/Pwa/Transaction/Factory/CaptureTransactionFactoryTest.php:
   35:         $this->assertInstanceOf(TransactionFactoryInterface::class, $this->fixture);
   44:         $this->assertInstanceOf(SuccessTransaction::class, $actual);
   53:         $this->assertInstanceOf(CaptureTransaction::class, $actual);
   62:         $this->assertEquals('debit', $actual->getType());
   72:         $this->assertEquals($status, $actual->getStatus());
   82:         $this->assertEquals($captureId, $actual->getId());
   92:         $this->assertSame($amount, $actual->getAmount());
  102:         $this->assertSame($amount, $actual->getRefundedAmount());
  112:         $this->assertEquals([], $actual->getChildIdList());
  124:         $this->assertEquals([$childId], $actual->getChildIdList());
  134:         $this->assertSame($memberList, $actual->getChildIdList());

DiscountOfficeItems • src/DealExpress/AmazonBundle/Tests/Pwa/Transaction/Factory/ErrorTransactionFactoryTest.php:
  30:         $this->assertInstanceOf(TransactionFactoryInterface::class, $this->fixture);
  61:         $this->assertInstanceOf($className, $actual);
  62:         $this->assertEquals($message, $actual->getErrorMessage());
  63:         $this->assertEquals(

DiscountOfficeItems • src/DealExpress/AmazonBundle/Tests/Pwa/Transaction/Factory/IpnTransactionFactoryTest.php:
  35:         $this->assertInstanceOf(AbstractTransactionFactory::class, $this->fixture);
  68:         $this->assertSame($transaction, $actual);

DiscountOfficeItems • src/DealExpress/AmazonBundle/Tests/Pwa/Transaction/Factory/OrderDetailsTransactionFactoryTest.php:
   43:         $this->assertInstanceOf(TransactionFactoryInterface::class, $this->fixture);
   52:         $this->assertInstanceOf(SuccessTransaction::class, $actual);
   61:         $this->assertEquals('debit', $actual->getType());
   71:         $this->assertEquals($status, $actual->getStatus());
   98:         $this->assertEquals($address, $actual->getShippingAddress());
  108:         $this->assertEquals($emailAddress, $actual->getEmailAddress());
  118:         $this->assertEquals($referenceId, $actual->getId());
  128:         $this->assertSame($amount, $actual->getAmount());
  168:         $this->assertSame(0.0, $actual->getAmount());
  190:         $this->assertSame('', $actual->getEmailAddress());

DiscountOfficeItems • src/DealExpress/AmazonBundle/Tests/Pwa/Transaction/Factory/RefundTransactionFactoryTest.php:
  34:         $this->assertInstanceOf(TransactionFactoryInterface::class, $this->fixture);
  43:         $this->assertInstanceOf(SuccessTransaction::class, $actual);
  52:         $this->assertEquals('credit', $actual->getType());
  62:         $this->assertEquals($status, $actual->getStatus());
  72:         $this->assertEquals($refundId, $actual->getId());
  82:         $this->assertSame($amount, $actual->getAmount());

DiscountOfficeItems • src/DealExpress/AmazonBundle/Tests/Pwa/Transaction/Factory/SuccessTransactionFactoryTest.php:
   29:         $this->assertInstanceOf(TransactionFactoryInterface::class, $this->fixture);
   45:         $this->assertInstanceOf(TransactionInterface::class, $actual);
   46:         $this->assertTrue($actual->isSuccess());
   53:         $this->assertSame('', $actual->getClientErrorMessage());
   60:         $this->assertSame('', $actual->getErrorMessage());
   67:         $this->assertTrue($actual->isSuccess());
   74:         $this->assertSame('', $actual->getType());
   81:         $this->assertSame('', $actual->getStatus());
   88:         $this->assertInstanceOf(AddressInterface::class, $actual->getShippingAddress());
   89:         $this->assertInstanceOf(NullInterface::class, $actual->getShippingAddress());
   96:         $this->assertSame('', $actual->getEmailAddress());
  103:         $this->assertSame('', $actual->getId());
  110:         $this->assertSame(0.0, $actual->getAmount());
  117:         $this->assertSame(0.0, $actual->getRefundedAmount());

DiscountOfficeItems • src/DealExpress/AmazonBundle/Tests/Pwa/Transaction/Factory/TransactionFactoryListTest.php:
   42:         $this->assertInstanceOf(TransactionFactoryInterface::class, $this->fixture);
  119:         $this->assertSame($transaction, $actual);

DiscountOfficeItems • src/DealExpress/AmazonBundle/Tests/Service/FeedSubmitterTest.php:
  57:         $this->assertEquals($delay, $actual);

DiscountOfficeItems • src/DealExpress/AmazonBundle/Tests/Twig/Extension/PayWithAmazonTest.php:
  21:         $this->assertInstanceOf(AbstractExtension::class, $this->fixture);
  30:         $this->assertCount(4, $actual);
  31:         $this->assertContainsOnlyInstancesOf(TwigFunction::class, $actual);
  41:         $this->assertEquals($jsUri, $actual);
  51:         $this->assertEquals($clientId, $actual);
  61:         $this->assertEquals($sellerId, $actual);
  73:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/ApiBundle/PHPUnit/ApiTestCase.php:
   57:                 $this->assertAggregateException($this->expectedApiException, $exception);
   59:                 $this->assertApiException($this->expectedApiException, $exception);
   86:         $this->assertThat($actual, $constraint);
  102:         $this->assertThat($actual, $constraint);
  115:         $this->assertThat(null, $constraint);

DiscountOfficeItems • src/DealExpress/ApiBundle/Tests/ApiResource/IncluderTest.php:
  265:         $this->assertSame([], $actual);
  282:         $this->assertEquals([], $actual);
  305:         $this->assertSame([[$input, $subIncluded]], $actual);
  333:         $this->assertSame($expected, $actual);
  360:         $this->assertSame([[$inputA, $subIncludedA]], $actual);

DiscountOfficeItems • src/DealExpress/ApiBundle/Tests/ApiResource/ListReaderTest.php:
  267:         $this->assertSame($content, $actual);

DiscountOfficeItems • src/DealExpress/ApiBundle/Tests/ApiResource/ReaderTest.php:
  245:         $this->assertSame($content, $actual);

DiscountOfficeItems • src/DealExpress/ApiBundle/Tests/ApiResource/UrlGeneratorTest.php:
  164:         $this->assertEquals($url, $actual);
  182:         $this->assertEquals($url, $actual);

DiscountOfficeItems • src/DealExpress/ApiBundle/Tests/ApiResource/Brand/ReaderTest.php:
  106:         $this->assertEquals($expected, $actual, 'Returned a different object then expected');
  111:             $this->assertEquals(
  175:         $this->assertEquals([$brand->getId() => $expected], $actual, 'Returned a different object then expected');
  180:             $this->assertEquals(

DiscountOfficeItems • src/DealExpress/ApiBundle/Tests/ApiResource/BuilderRegistry/BuilderRegistryTest.php:
  37:         $this->assertInstanceOf(BuilderRegistryInterface::class, $this->fixture);
  46:         $this->assertSame($builderData['builder'], $actual);
  55:         $this->assertEquals($builderData['type'], $actual);
  65:         $this->assertEquals($builderData['builder'], $actual);

DiscountOfficeItems • src/DealExpress/ApiBundle/Tests/ApiResource/BuilderRegistry/ContainerAwareDecoratorTest.php:
   40:         $this->assertInstanceOf(BuilderRegistryInterface::class, $this->fixture);
  107:         $this->assertSame($expected, $actual);
  195:         $this->assertSame($expected, $actual);

DiscountOfficeItems • src/DealExpress/ApiBundle/Tests/ApiResource/Category/ReaderTest.php:
  116:         $this->assertEquals($expected, $actual, 'Returned a different object then expected');
  121:             $this->assertEquals(
  238:         $this->assertEquals([$category->getId() => $expected], $actual, 'Returned a different object then expected');
  243:             $this->assertEquals(

DiscountOfficeItems • src/DealExpress/ApiBundle/Tests/ApiResource/Includer/RelationshipDeterminerTest.php:
   57:         $this->assertEquals($expected, $actual);
   75:         $this->assertEquals($expected, $actual);
  100:         $this->assertEquals($expected, $actual);
  112:         $this->assertEquals([], $actual);
  131:         $this->assertEquals($expected, $actual);
  147:         $this->assertEquals([], $actual);
  167:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/ApiBundle/Tests/ApiResource/Includer/ResourceInputFactoryTest.php:
  106:         $this->assertSame($response, $actual);

DiscountOfficeItems • src/DealExpress/ApiBundle/Tests/ApiResource/Manufacturer/ReaderTest.php:
  106:         $this->assertEquals($expected, $actual, 'Returned a different object then expected');
  111:             $this->assertEquals(
  175:         $this->assertEquals([$manufacturer->getId() => $expected], $actual, 'Returned different object');
  180:             $this->assertEquals(

DiscountOfficeItems • src/DealExpress/ApiBundle/Tests/ApiResource/Product/ReaderTest.php:
  144:         $this->assertSame($content, $actual);
  170:         $this->assertSame([$id => $content], $actual);

DiscountOfficeItems • src/DealExpress/ApiBundle/Tests/Content/ContentManagerTest.php:
  54:         $this->assertInstanceOf(ContentBuilder::class, $actual);

DiscountOfficeItems • src/DealExpress/ApiBundle/Tests/Content/Builder/ContentBuilderTest.php:
   96:         $this->assertInstanceOf(ResourceInputBuilder::class, $actual);
  103:         $this->assertInstanceOf(MetadataInputBuilder::class, $actual);
  166:         $this->assertInstanceOf(ErrorInputBuilder::class, $actual);
  294:         $this->assertEquals($response, $actual);
  313:         $this->assertEquals($content, $actual);

DiscountOfficeItems • src/DealExpress/ApiBundle/Tests/Content/Builder/ContentInputTest.php:
   32:         $this->assertEquals('hide', $actual);
   41:         $this->assertEquals('single', $actual);
   50:         $this->assertEquals('list', $actual);
   61:         $this->assertEquals([$resourceInput], $actual);
   72:         $this->assertEquals([$resourceInput], $actual);
   86:         $this->assertEquals($expected, $actual);
  113:         $this->assertEquals($metadata, $actual);
  124:         $this->assertEquals([$errorInput], $actual);
  136:         $this->assertEquals([$name => $linkInput], $actual);
  141:         $this->assertSame('', $this->fixture->getPointer());

DiscountOfficeItems • src/DealExpress/ApiBundle/Tests/Content/Builder/ErrorInputBuilderTest.php:
   52:         $this->assertSame($errorInput, $actual);
   64:         $this->assertEquals($title, $actual->getTitle());
   76:         $this->assertEquals($httpStatusCode, $actual->getHttpStatusCode());
   88:         $this->assertEquals($message, $actual->getMessage());
  100:         $this->assertEquals($pointer, $actual->getJsonPointer());
  112:         $this->assertEquals($queryParameter, $actual->getQueryParameter());
  119:         $this->assertInstanceOf(MetadataInputBuilder::class, $actual);
  134:         $this->assertEquals($metadata, $actual->getMetadata());
  178:         $this->assertEquals([$name => $linkInput], $actual->getLinkList());

DiscountOfficeItems • src/DealExpress/ApiBundle/Tests/Content/Builder/MetadataInputBuilderTest.php:
  42:         $this->assertSame($metadataInput, $actual);
  55:         $this->assertEquals([$name => $value], $actual->getMetadata());

DiscountOfficeItems • src/DealExpress/ApiBundle/Tests/Content/Builder/Data/ResourceInputBuilderTest.php:
   72:         $this->assertSame($resourceInput, $actual);
   80:         $this->assertEquals($this->id, $actual->getId());
   88:         $this->assertEquals($this->type, $actual->getType());
  101:         $this->assertEquals([$name => $value], $actual->getAttributeList());
  145:         $this->assertEquals([$name => $linkInput], $actual->getLinkList());
  152:         $this->assertInstanceOf(RelationshipInputBuilder::class, $actual);
  165:         $this->assertEquals([$name => $input], $actual->getRelationshipList());
  172:         $this->assertInstanceOf(MetadataInputBuilder::class, $actual);
  186:         $this->assertEquals($metadata, $actual->getMetadata());

DiscountOfficeItems • src/DealExpress/ApiBundle/Tests/Content/Builder/Data/ResourceInputDecoratorFactoryTest.php:
   42:         $this->assertInstanceOf(ResourceInputDecorator::class, $actual);
   71:         $this->assertEquals($response, $actual->getLinkList());
   85:         $this->assertEquals($expected, $actual->getPointer());
  102:         $this->assertInstanceOf(
  143:         $this->assertEquals($response, $actual->getRelationshipList()[$name]->getLinkList());
  161:         $this->assertEquals($expected, $actual->getRelationshipList()[$name]->getPointer());
  178:         $this->assertEquals($id, $resource->getId());
  179:         $this->assertEquals($type, $resource->getType());
  193:         $this->assertInstanceOf(ResourceInputDecorator::class, $resource);
  211:         $this->assertEquals($expected, $resource->getPointer());
  229:         $this->assertEquals('//relationships/0/data/0', $resourceList[0]->getPointer());
  230:         $this->assertEquals('//relationships/0/data/1', $resourceList[1]->getPointer());

DiscountOfficeItems • src/DealExpress/ApiBundle/Tests/Content/Builder/Data/ResourceInputDecoratorTest.php:
  19:         $this->assertEquals($linkList, $fixture->getLinkList());
  31:         $this->assertEquals($metadata, $fixture->getMetadata());
  43:         $this->assertEquals($attributeList, $fixture->getAttributeList());
  54:         $this->assertEquals($pointer, $fixture->getPointer());
  65:         $this->assertEquals($relationshipList, $fixture->getRelationshipList());

DiscountOfficeItems • src/DealExpress/ApiBundle/Tests/Content/Builder/Data/Resource/RelationshipInputBuilderTest.php:
   54:         $this->assertSame($relationshipInput, $actual);
   64:         $this->assertEquals('hide', $actual->getResourceDisplay());
   74:         $this->assertEquals('single', $actual->getResourceDisplay());
   84:         $this->assertEquals('list', $actual->getResourceDisplay());
  128:         $this->assertEquals([$name => $linkInput], $actual->getLinkList());
  142:         $this->assertEquals($id, $resource->getId(), 'ID mismatch.');
  143:         $this->assertEquals($type, $resource->getType(), 'Type mismatch.');
  158:         $this->assertInstanceOf(ResourceInputInterface::class, $resource);
  159:         $this->assertEquals($metadata, $resource->getMetadata());
  166:         $this->assertInstanceOf(MetadataInputBuilder::class, $actual);
  180:         $this->assertEquals($metadata, $actual->getMetadata());
  188:         $this->assertSame('', $actual->getPointer());

DiscountOfficeItems • src/DealExpress/ApiBundle/Tests/Content/Builder/Data/Resource/RelationshipInputDecoratorTest.php:
  19:         $this->assertEquals($linkList, $fixture->getLinkList());
  31:         $this->assertEquals($metadata, $fixture->getMetadata());
  43:         $this->assertEquals($resourceDisplay, $fixture->getResourceDisplay());
  54:         $this->assertEquals($pointer, $fixture->getPointer());
  65:         $this->assertEquals($relationshipList, $fixture->getResourceList());

DiscountOfficeItems • src/DealExpress/ApiBundle/Tests/Content/Builder/Link/LinkInputFactoryTest.php:
   29:         $this->assertInstanceOf(LinkInputInterface::class, $actual);
   38:         $this->assertEquals($href, $actual->getHref());
   48:         $this->assertEquals($metadata, $actual->getMetadata());
   55:         $this->assertEquals([], $actual->getMetadata());
   64:         $this->assertEquals($pointer, $actual->getPointer());
   75:         $this->assertInstanceOf(LinkInputInterface::class, $actual[$name]);
   86:         $this->assertEquals($href, $actual[0]->getHref());
   98:         $this->assertEquals($metadata, $actual[0]->getMetadata());
  110:         $this->assertEquals($pointer, $actual[0]->getPointer());

DiscountOfficeItems • src/DealExpress/ApiBundle/Tests/Content/Factory/ContentFactoryAdapterTest.php:
  230:         $this->assertEquals($content, $actual);

DiscountOfficeItems • src/DealExpress/ApiBundle/Tests/Content/Factory/ContentFactoryTest.php:
   41:         $this->assertInstanceOf(ContentInterface::class, $actual);
   53:         $this->assertEquals($data, $actual->getData());
   66:         $this->assertEquals([$error], $actual->getErrorList());
   78:         $this->assertEquals($linkList, $actual->getLinkList());
   90:         $this->assertEquals($included, $actual->getIncluded());
  102:         $this->assertEquals($metadata, $actual->getMetadata());

DiscountOfficeItems • src/DealExpress/ApiBundle/Tests/Content/Factory/DataFactoryTest.php:
   49:         $this->assertInstanceOf(EmptyData::class, $actual);
   77:         $this->assertInstanceOf(NullObject::class, $actual);
  109:         $this->assertSame($data, $actual);
  151:         $this->assertInstanceOf(ResourceList::class, $actual);

DiscountOfficeItems • src/DealExpress/ApiBundle/Tests/Content/Factory/ErrorFactoryTest.php:
   48:         $this->assertEquals([], $actual);
   61:         $this->assertInstanceOf(ErrorInterface::class, reset($actual));
   75:         $this->assertEquals($title, reset($actual)->getTitle());
   89:         $this->assertEquals($httpStatusCode, reset($actual)->getHttpStatusCode());
  103:         $this->assertEquals($details, reset($actual)->getDetails());
  117:         $this->assertEquals($pointer, reset($actual)->getSource()->getPointer());
  131:         $this->assertEquals($queryParameter, reset($actual)->getSource()->getParameter());
  158:         $this->assertEquals($metadata, reset($actual)->getMetadata());
  185:         $this->assertEquals($linkList, reset($actual)->getLinkList());

DiscountOfficeItems • src/DealExpress/ApiBundle/Tests/Content/Factory/IncludedFactoryTest.php:
  43:         $this->assertInstanceOf(IncludedInterface::class, $actual);
  55:         $this->assertInstanceOf(EmptyIncluded::class, $actual);
  71:         $this->assertCount(1, $invocationList, 'Data factory only expected to be called once.');
  74:         $this->assertEquals('list', $dataInput->getResourceDisplay());
  75:         $this->assertEquals($resourceInputList, $dataInput->getResourceList());
  87:         $this->assertSame($data, $actual->getData());

DiscountOfficeItems • src/DealExpress/ApiBundle/Tests/Content/Factory/LinkListFactoryTest.php:
   51:         $this->assertInstanceOf(LinkListInterface::class, $actual);
   63:         $this->assertInstanceOf(EmptyLinkList::class, $actual);
  138:         $this->assertArrayHasKey($key, $actual->getArray());
  151:         $this->assertEquals($url, $linkArray[$key]->getUrl());
  164:         $this->assertEquals($url, $linkArray[$key]->getUrl());
  173:         $this->assertCount(2, $actual->getArray());

DiscountOfficeItems • src/DealExpress/ApiBundle/Tests/Content/Factory/MetadataFactoryTest.php:
   49:         $this->assertInstanceOf(MetadataInterface::class, $actual);
   58:         $this->assertInstanceOf(EmptyMetadata::class, $actual);
  119:         $this->assertEquals($elementList, $actual->getArray());

DiscountOfficeItems • src/DealExpress/ApiBundle/Tests/Content/Factory/Data/ApiResourceFactoryTest.php:
   73:         $this->assertInstanceOf(AbstractResourceFactoryInterface::class, $this->fixture);
   81:         $this->assertInstanceOf(ApiResource::class, $actual);
  123:         $this->assertEquals($id, $actual->getId());
  124:         $this->assertEquals($type, $actual->getType());
  125:         $this->assertEquals($metadata, $actual->getMetadata());
  149:         $this->assertEquals($attributeList, $actual->getAttributeList());
  174:         $this->assertEquals($relationshipList, $actual->getRelationshipList());
  197:         $this->assertEquals($linkList, $actual->getLinkList());

DiscountOfficeItems • src/DealExpress/ApiBundle/Tests/Content/Factory/Data/ResourceIdentifierFactoryTest.php:
   48:         $this->assertInstanceOf(AbstractResourceFactoryInterface::class, $this->fixture);
   55:         $this->assertInstanceOf(ResourceIdentifier::class, $actual);
   65:         $this->assertEquals($id, $actual->getId());
  100:         $this->assertEquals($type, $actual->getType());
  122:         $this->assertSame($metadata, $actual->getMetadata());

DiscountOfficeItems • src/DealExpress/ApiBundle/Tests/Content/Factory/Data/Resource/AttributeListFactoryTest.php:
   57:         $this->assertInstanceOf(AttributeListInterface::class, $actual);
   94:         $this->assertEquals($attribute, reset($attributeArray)->getValue());
  161:         $this->assertEquals($attributeName, $attributeArray[$attributeName]->getName());

DiscountOfficeItems • src/DealExpress/ApiBundle/Tests/Content/Factory/Data/Resource/RelationshipFactoryTest.php:
   64:         $this->assertInstanceOf(RelationshipInterface::class, $actual);
   93:         $this->assertSame($linkList, $actual->getLinkList());
  122:         $this->assertSame($data, $actual->getData());
  152:         $this->assertEquals($metadata, $actual->getMetadata());

DiscountOfficeItems • src/DealExpress/ApiBundle/Tests/Content/Factory/Data/Resource/RelationshipListFactoryTest.php:
   48:         $this->assertInstanceOf(RelationshipListInterface::class, $actual);
  106:         $this->assertEquals($response, $relationshipList[$memberName]);

DiscountOfficeItems • src/DealExpress/ApiBundle/Tests/Content/Serializer/ContentSerializerTest.php:
  75:         $this->assertEquals($response, $actual);

DiscountOfficeItems • src/DealExpress/ApiBundle/Tests/Content/Serializer/Encoder/JsonEncoderTest.php:
  26:         $this->assertInstanceOf(EncoderInterface::class, $this->fixture);
  36:         $this->assertSame($expected, $actual);

DiscountOfficeItems • src/DealExpress/ApiBundle/Tests/Content/Serializer/Normalizer/ContentNormalizerTest.php:
   97:         $this->assertArraySubset($normalizedData, $actual);
  123:         $this->assertArraySubset(['error' => [$normalizedError]], $actual);
  134:         $this->assertArrayNotHasKey('error', $actual);
  160:         $this->assertArraySubset($normalizedMetadata, $actual);
  186:         $this->assertArraySubset($normalizedLinkList, $actual);
  212:         $this->assertArraySubset($normalizedIncluded, $actual);

DiscountOfficeItems • src/DealExpress/ApiBundle/Tests/Content/Serializer/Normalizer/ErrorNormalizerTest.php:
   49:         $this->assertArraySubset(['title' => $title], $actual);
   60:         $this->assertArraySubset(['code' => $httpStatusCode], $actual);
   71:         $this->assertArraySubset(['detail' => $details], $actual);
   82:         $this->assertArraySubset(['source' => ['pointer' => $pointer]], $actual);
   83:         $this->assertArrayNotHasKey('parameter', $actual['source']);
   94:         $this->assertArraySubset(['source' => ['parameter' => $sourceParameter]], $actual);
   95:         $this->assertArrayNotHasKey('pointer', $actual['source']);
  120:         $this->assertArraySubset($response, $actual);
  145:         $this->assertArraySubset($response, $actual);
  154:         $this->assertEquals([], $actual);

DiscountOfficeItems • src/DealExpress/ApiBundle/Tests/Content/Serializer/Normalizer/IncludedNormalizerTest.php:
  41:         $this->assertEquals([], $actual);
  64:         $this->assertEquals(['included' => $response], $actual);

DiscountOfficeItems • src/DealExpress/ApiBundle/Tests/Content/Serializer/Normalizer/LinkListNormalizerTest.php:
   40:         $this->assertEquals([], $actual);
   71:         $this->assertEquals([$name => ['href' => $url] + $normalizedMetadata], $actual['links']);
   86:         $this->assertEquals(['links' => [$name => $url]], $actual);
  104:         $this->assertEquals(['links' => [$nameA => $urlA, $nameB => $urlB]], $actual);

DiscountOfficeItems • src/DealExpress/ApiBundle/Tests/Content/Serializer/Normalizer/MetadataNormalizerTest.php:
  30:         $this->assertEquals([], $actual);
  42:         $this->assertEquals(['meta' => $expectedArray], $actual);

DiscountOfficeItems • src/DealExpress/ApiBundle/Tests/Content/Serializer/Normalizer/Data/AbstractResourceNormalizerTest.php:
   39:         $this->assertInstanceOf(DataNormalizerInterface::class, $this->fixture);
   48:         $this->assertFalse($actual);
   57:         $this->assertTrue($actual);
   85:         $this->assertArraySubset(['type' => $type], $actual);
  102:         $this->assertArraySubset(['id' => $id], $actual);
  135:         $this->assertArraySubset($metadataArray, $actual);

DiscountOfficeItems • src/DealExpress/ApiBundle/Tests/Content/Serializer/Normalizer/Data/ApiResourceNormalizerTest.php:
   58:         $this->assertInstanceOf(DataNormalizerInterface::class, $this->fixture);
   67:         $this->assertFalse($actual);
   76:         $this->assertTrue($actual);
  111:         $this->assertArraySubset($normalizedData, $actual);
  130:         $this->assertArraySubset(['attributes' => [$idA => $valueA, $idB => $valueB]], $actual);
  141:         $this->assertArrayNotHasKey('attributes', $actual);
  173:         $this->assertArraySubset(['relationships' => [$memberName => $response]], $actual);
  185:         $this->assertArrayNotHasKey('relationships', $actual);
  220:         $this->assertArraySubset($normalizedLinkList, $actual);

DiscountOfficeItems • src/DealExpress/ApiBundle/Tests/Content/Serializer/Normalizer/Data/DataNormalizerListTest.php:
   37:         $this->assertInstanceOf(DataNormalizerInterface::class, $this->fixture);
   51:         $this->assertTrue($actual);
   65:         $this->assertTrue($actual);
   74:         $this->assertFalse($actual);
  134:         $this->assertEquals($normalizedData, $actual);

DiscountOfficeItems • src/DealExpress/ApiBundle/Tests/Content/Serializer/Normalizer/Data/DataNormalizerTest.php:
  34:         $this->assertInstanceOf(DataNormalizerInterface::class, $this->fixture);
  48:         $this->assertTrue($actual);
  59:         $this->assertFalse($actual);
  70:         $this->assertEquals([], $actual);
  95:         $this->assertEquals(['data' => $normalizedData], $actual);

DiscountOfficeItems • src/DealExpress/ApiBundle/Tests/Content/Serializer/Normalizer/Data/NullObjectNormalizerTest.php:
  28:         $this->assertInstanceOf(DataNormalizerInterface::class, $this->fixture);
  37:         $this->assertFalse($actual);
  46:         $this->assertTrue($actual);
  66:         $this->assertNull($actual);

DiscountOfficeItems • src/DealExpress/ApiBundle/Tests/Content/Serializer/Normalizer/Data/ResourceIdentifierNormalizerTest.php:
  35:         $this->assertInstanceOf(DataNormalizerInterface::class, $this->fixture);
  44:         $this->assertFalse($actual);
  53:         $this->assertTrue($actual);
  87:         $this->assertEquals($normalizedData, $actual);

DiscountOfficeItems • src/DealExpress/ApiBundle/Tests/Content/Serializer/Normalizer/Data/ResourceListNormalizerTest.php:
   36:         $this->assertInstanceOf(DataNormalizerInterface::class, $this->fixture);
   45:         $this->assertFalse($actual);
   56:         $this->assertTrue($actual);
   81:         $this->assertEquals($response, $actual);
  103:         $this->assertEquals([], $actual);
  123:         $this->assertSameSize($resourceList, $invocationList, 'normalize() not called correct times.');
  125:             $this->assertSame($resourceList[$index], $invocation->getParameters()[0]);
  140:         $this->assertEquals([$normalizedResource], $actual);

DiscountOfficeItems • src/DealExpress/ApiBundle/Tests/Content/Serializer/Normalizer/Data/Resource/RelationshipNormalizerTest.php:
   59:         $this->assertIsArray($actual);
   83:         $this->assertArraySubset($response, $actual);
  107:         $this->assertArraySubset($response, $actual);
  144:         $this->assertArraySubset($metadataArray, $actual);

DiscountOfficeItems • src/DealExpress/ApiBundle/Tests/Content/Validation/UniqueMemberValidatorTest.php:
  127:         $this->assertSameSize($aggregateException->getExceptionList(), $conflictList);
  135:             $this->assertInstanceOf($exceptionType, $exception, $clarity);
  136:             $this->assertEquals($conflict.' must be a unique member name.', $exception->getMessage(), $clarity);

DiscountOfficeItems • src/DealExpress/ApiBundle/Tests/Content/Validation/ValueValidatorTest.php:
  104:         $this->assertNull($actual);
  114:         $this->assertNull($actual);

DiscountOfficeItems • src/DealExpress/ApiBundle/Tests/DependencyInjection/Compiler/AddResourceTypeBuilderTest.php:
   27:         $this->assertInstanceOf(CompilerPassInterface::class, $this->fixture);
   48:         $this->assertContainerCall($container, $serviceId, [['setBuilderId', $parameterList]]);
   75:         $this->assertContainerCall($container, $serviceId, $expected);
  118:         $this->assertTrue(true, 'Should not attempt to use undefined service');
  152:         $this->assertEquals($expected, $callList);

DiscountOfficeItems • src/DealExpress/ApiBundle/Tests/HttpFoundation/ApiResponseTest.php:
  15:         $this->assertInstanceOf(Response::class, $fixture);

DiscountOfficeItems • src/DealExpress/ApiBundle/Tests/Listener/ApiExceptionListenerTest.php:
   78:         $this->assertResponse($actual, $serializedContent, $code);
  121:         $this->assertCount(1, $invocationList, 'Setting the response should only be called once.');
  138:         $this->assertEquals($content, $response->getContent());
  139:         $this->assertEquals($code, $response->getStatusCode());

DiscountOfficeItems • src/DealExpress/ApiBundle/Tests/Listener/ApiException/ContentFactoryTest.php:
  150:         $this->assertEquals($content, $actual);

DiscountOfficeItems • src/DealExpress/ApiBundle/Tests/Listener/ApiException/ErrorInputFactoryTest.php:
  96:         $this->assertSame($errorInput, $actual);

DiscountOfficeItems • src/DealExpress/ApiBundle/Tests/Listener/ApiException/ExceptionProcessorTest.php:
  111:         $this->assertEquals($serializedContent, $actual);
  128:         $this->assertEquals($defaultContent, $actual);
  145:         $this->assertEquals($defaultContent, $actual);

DiscountOfficeItems • src/DealExpress/ApiBundle/Tests/Listener/ApiException/LoggerAdapterTest.php:
   63:         $this->assertExceptionCreatesLoggerContext($exception, $expected);
   74:         $this->assertExceptionCreatesLoggerContext($exception, $expected);
   85:         $this->assertExceptionCreatesLoggerContext($exception, $expected);
  119:         $this->assertCount(1, $invocationList, 'Logger only expected to be called once');
  120:         $this->assertArraySubset($expected, $invocationList[0]->getParameters()[2]);

DiscountOfficeItems • src/DealExpress/ApiBundle/Tests/Listener/Request/RelevancyDeterminerTest.php:
  31:         $this->assertTrue($actual);
  40:         $this->assertFalse($actual);
  50:         $this->assertFalse($actual);

DiscountOfficeItems • src/DealExpress/ApiBundle/Tests/PHPUnit/Constraint/AggregateExceptionConstraintTest.php:
  26:         $this->assertSame('', $actual);
  46:         $this->assertTrue($actual);
  56:         $this->assertTrue($actual);

DiscountOfficeItems • src/DealExpress/ApiBundle/Tests/PHPUnit/Constraint/ApiExceptionConstraintTest.php:
  25:         $this->assertSame('', $actual);
  43:         $this->assertTrue($actual);

DiscountOfficeItems • src/DealExpress/ApiBundle/Tests/Query/IncludedFactoryTest.php:
  28:         $this->assertInstanceOf(IncludedInterface::class, $actual);
  35:         $this->assertInstanceOf(EmptyIncluded::class, $actual);
  45:         $this->assertEquals($expected, $actual->getIncludedList());
  61:         $this->assertEquals([$included[0], $included[1]], $actual->getIncludedList());
  62:         $this->assertEquals($expected, $actual->getSubIncludedList($included[0])->getIncludedList());
  63:         $this->assertEquals($expected, $actual->getSubIncludedList($included[1])->getIncludedList());

DiscountOfficeItems • src/DealExpress/ApiBundle/Tests/Query/NormalizerTest.php:
   51:         $this->assertEquals([], $actual);
   76:         $this->assertEquals(['include' => $response], $actual);
  101:         $this->assertEquals(['filter' => $response], $actual);
  112:         $this->assertEquals(['include', 'filter'], array_keys($actual));

DiscountOfficeItems • src/DealExpress/ApiBundle/Tests/Query/QueryFactoryTest.php:
   49:         $this->assertInstanceOf(QueryInterface::class, $actual);
   89:         $this->assertEquals($filter, $actual->getFilter());
  101:         $this->assertEquals($included, $actual->getIncluded());

DiscountOfficeItems • src/DealExpress/ApiBundle/Tests/Query/QueryParamConverterTest.php:
  39:         $this->assertInstanceOf(ParamConverterInterface::class, $this->fixture);
  48:         $this->assertTrue($actual);
  57:         $this->assertFalse($actual);
  86:         $this->assertEquals($response, $request->attributes->get($name));
  96:         $this->assertTrue($request->attributes->get('_queryConverted'));

DiscountOfficeItems • src/DealExpress/ApiBundle/Tests/Query/Filter/FilterFactoryTest.php:
  35:         $this->assertInstanceOf(FilterInterface::class, $actual);
  44:         $this->assertEquals($id, $actual->getId());
  51:         $this->assertEquals($this->type, $actual->getType());
  60:         $this->assertEquals($valueList, $actual->getValueList());

DiscountOfficeItems • src/DealExpress/ApiBundle/Tests/Query/Filter/ParserTest.php:
  71:         $this->assertInstanceOf(LogicGroupInterface::class, $actual);
  72:         $this->assertInstanceOf(NullInterface::class, $actual);

DiscountOfficeItems • src/DealExpress/ApiBundle/Tests/Query/Filter/SerializerTest.php:
   30:         $this->assertEquals('', $actual);
   44:         $this->assertEquals($id.':"'.$value.'"', $actual);
   62:         $this->assertEquals($expected, $actual);
   81:         $this->assertEquals($expected, $actual);
  107:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/ApiBundle/Tests/Query/Filter/Parser/FilterFactoryTest.php:
  144:         $this->assertSame($filter, $actual);

DiscountOfficeItems • src/DealExpress/ApiBundle/Tests/Query/Filter/Parser/LexerContextTest.php:
  21:         $this->assertInstanceOf(BaseContext::class, $this->fixture);
  33:         $this->assertEquals($expected, $fixture->getRegex());
  44:         $this->assertEquals($expected, $fixture->getRegex());
  55:         $this->assertEquals($type, $actual);

DiscountOfficeItems • src/DealExpress/ApiBundle/Tests/Query/Filter/Parser/LogicGroupFactoryTest.php:
   47:         $this->assertInstanceOf(LogicGroupInterface::class, $actual);
   48:         $this->assertEquals($type, $actual->getType());
  101:         $this->assertEquals([$filter], $actual->getFilterList());
  120:         $this->assertCount(1, $logicGroupList);
  121:         $this->assertEquals($value, $logicGroupList[0]->getType());

DiscountOfficeItems • src/DealExpress/ApiBundle/Tests/Query/Filter/Parser/NodeTraverserTest.php:
  29:         $this->assertSame([$node, null], $actual);
  40:         $this->assertSame([$leafA, $leafB], $actual);
  53:         $this->assertSame([$leafA, $leafB], $actual);

DiscountOfficeItems • src/DealExpress/ApiBundle/Tests/Query/Included/SerializerTest.php:
   29:         $this->assertEquals('', $actual);
   39:         $this->assertEquals($name, $actual);
   50:         $this->assertEquals($nameA.','.$nameB, $actual);
   93:         $this->assertEquals($nameA.'.'.$nameB, $actual);
  112:         $this->assertEquals($nameA.'.'.$nameB.'.'.$nameC, $actual);
  131:         $this->assertEquals($nameA.'.'.$nameC.','.$nameB.'.'.$nameD, $actual);
  147:         $this->assertEquals($nameA.'.'.$nameB.','.$nameA.'.'.$nameC, $actual);

DiscountOfficeItems • src/DealExpress/ApiClientBundle/Tests/UtilityTest.php:
  17:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/ApiClientBundle/Tests/Client/ClientCacheTest.php:
   59:         $this->assertInstanceOf(Cache::class, $this->fixture);
   81:         $this->assertSame($response, $actual);
  103:         $this->assertSame($response, $actual);
  140:         $this->assertFalse($actual);
  207:         $this->assertEquals(['data' => $baseData], $actual);
  314:         $this->assertFalse($actual);
  333:         $this->assertEquals($expected, $actual);
  452:         $this->assertEquals($response, $actual);
  489:         $this->assertSame($response, $actual);
  548:         $this->assertSame($expected, $actual);

DiscountOfficeItems • src/DealExpress/ApiClientBundle/Tests/Client/ClientTest.php:
  126:         $this->assertEquals($data, $actual);
  169:         $this->assertSame([], $actual);
  319:         $this->assertEquals([], $actual);
  329:         $this->assertEquals([], $actual);
  363:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/ApiClientBundle/Tests/Client/Cache/IncludeParserTest.php:
  29:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/ApiClientBundle/Tests/Client/Cache/UrlLookupTest.php:
   34:         $this->assertEquals([], $actual);
   43:         $this->assertEquals([], $actual);
   58:         $this->assertEquals([], $actual);
   75:         $this->assertEquals([], $actual);
  234:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/ApiClientBundle/Tests/Factory/BlockFactoryTest.php:
   60:         $this->assertInstanceOf(BlockInterface::class, $actual);
   69:         $this->assertInstanceOf(NullInterface::class, $actual);
   82:         $this->assertSame($id, $actual->getId());
   95:         $this->assertSame($display, $actual->getDisplay());
  108:         $this->assertEquals($attributeIdList, $actual->getAttributeIdList());
  121:         $this->assertSame($status, $actual->isEnabled());
  135:         $this->assertEquals($productIdList, $actual->getProductIdList());

DiscountOfficeItems • src/DealExpress/ApiClientBundle/Tests/Factory/ProductFactoryTest.php:
   58:         $this->assertInstanceOf(ProductFactoryInterface::class, $this->fixture);
   83:         $this->assertEquals($id, $actual->getId());
  108:         $this->assertNull($actual);
  117:         $this->assertEquals([], $actual);
  126:         $this->assertEquals([], $actual);
  192:         $this->assertEquals($id, $actual->getId());
  211:         $this->assertEquals($idA, $actualA->getId());
  212:         $this->assertEquals($idB, $actualB->getId());
  234:         $this->assertEquals($idA, $actualAValue->getId());
  235:         $this->assertEquals($idA, $actualAKey);
  236:         $this->assertEquals($idB, $actualBValue->getId());
  237:         $this->assertEquals($idB, $actualBKey);
  259:         $this->assertEquals($idA, $actualAValue->getId());
  260:         $this->assertEquals($idA, $actualAKey);
  261:         $this->assertEquals($idB, $actualBValue->getId());
  262:         $this->assertEquals($idB, $actualBKey);

DiscountOfficeItems • src/DealExpress/ApiClientBundle/Tests/Listener/ProductBlockCacheClearListenerTest.php:
  46:         $this->assertInstanceOf(EventSubscriberInterface::class, $this->fixture);
  54:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/ApiClientBundle/Tests/Listener/ProductCacheClearListenerTest.php:
  34:         $this->assertInstanceOf(EventSubscriberInterface::class, $this->fixture);
  42:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/ApiClientBundle/Tests/Model/AlternateIdTest.php:
  17:         $this->assertContainsOnlyInstancesOf(
  34:         $this->assertEquals(

DiscountOfficeItems • src/DealExpress/ApiClientBundle/Tests/Model/AttributeTest.php:
  17:         $this->assertContainsOnlyInstancesOf(
  36:         $this->assertEquals(

DiscountOfficeItems • src/DealExpress/ApiClientBundle/Tests/Model/BrandTest.php:
  16:         $this->assertEquals(1234, $brand->getId());
  17:         $this->assertEquals('Test Name', $brand->getName());
  18:         $this->assertEquals('Test Url', $brand->getUrl());
  19:         $this->assertEquals('Test Logo', $brand->getLogo());
  20:         $this->assertEquals('Test Common Name', $brand->getCommonName());

DiscountOfficeItems • src/DealExpress/ApiClientBundle/Tests/Model/CategoryTest.php:
   19:         $this->assertEquals(1234, $category->getId());
   20:         $this->assertEquals('Test Name', $category->getName());
   21:         $this->assertEquals('Short Description', $category->getShortDescription());
   22:         $this->assertEquals('Long Description', $category->getDescription());
   23:         $this->assertEquals('Meta Description', $category->getPageMetaDescription());
   24:         $this->assertEquals('Link Fragment', $category->getLinkFragment());
   35:         $this->assertSame($image, $category->getImage(), 'Constructed a new instance of value');
   36:         $this->assertInstanceOf(ImageRefInterface::class, $image);
   37:         $this->assertEquals('Image Ref', $image->getRef());
   50:         $this->assertSame($ancestorList, $category->getAncestorList(), 'Constructed a new instance of value');
   51:         $this->assertInstanceOf(ArrayCollection::class, $ancestorList);
   52:         $this->assertCount(3, $ancestorList);
   54:         $this->assertEquals(
   66:         $this->assertCount(2, $parentCategory->getAncestorList());
   70:         $this->assertCount(1, $grandParentCategory->getAncestorList());
   84:         $this->assertEquals(3, count($ancestorList));
   86:         $this->assertEquals(
   98:         $this->assertCount(2, $parentCategory->getAncestorList());
  102:         $this->assertCount(1, $grandParentCategory->getAncestorList());

DiscountOfficeItems • src/DealExpress/ApiClientBundle/Tests/Model/ImageRefTest.php:
  16:         $this->assertEquals($ref, $image->getRef());

DiscountOfficeItems • src/DealExpress/ApiClientBundle/Tests/Model/ManufacturerTest.php:
  16:         $this->assertEquals(1234, $manufacturer->getId());
  17:         $this->assertEquals('Test Name', $manufacturer->getName());
  18:         $this->assertEquals('Test Url', $manufacturer->getUrl());
  19:         $this->assertEquals('Test Logo', $manufacturer->getLogo());
  20:         $this->assertEquals('Test Common Name', $manufacturer->getCommonName());

DiscountOfficeItems • src/DealExpress/ApiClientBundle/Tests/Model/MediaRefTest.php:
  17:         $this->assertContainsOnlyInstancesOf(MediaRefInterface::class, $mediaList);
  31:         $this->assertEquals(

DiscountOfficeItems • src/DealExpress/ApiClientBundle/Tests/Model/ProductTest.php:
   26:         $this->assertEquals(13931, $product->getId());
   27:         $this->assertEquals('TOM62202', $product->getSku());
   28:         $this->assertEquals('part number', $product->getMfgPartNo());
   29:         $this->assertEquals('Tombow Permanent Mono Adhesive Refill', $product->getName());
   30:         $this->assertEquals('Short Description', $product->getShortDescription());
   31:         $this->assertEquals('Long Description', $product->getLongDescription());
   32:         $this->assertEquals(
   39:         $this->assertEquals('keywords', $product->getKeywords());
   40:         $this->assertEquals(10, $product->getWeight());
   41:         $this->assertEquals('9.99', $product->getMsrp());
   42:         $this->assertEquals('1 EA', $product->getUnitOfMeasure());
   43:         $this->assertEquals('100', $product->getReviewCount());
   44:         $this->assertEquals('10.0', $product->getAverageRating());
   53:         $this->assertInstanceOf(\DateTime::class, $product->getDateAdded());
   54:         $this->assertEquals(
   58:         $this->assertSame(
   64:         $this->assertInstanceOf(\DateTime::class, $product->getLastModified());
   65:         $this->assertEquals(
   69:         $this->assertSame(
   84:         $this->assertSame($image, $product->getPrimaryImage(), 'Constructed a new instance of value');
   85:         $this->assertInstanceOf(ImageRefInterface::class, $image);
   86:         $this->assertEquals('blah/imageRef.jpg', $image->getRef());
   97:         $this->assertSame($imageList, $product->getImageList(), 'Constructed a new instance of value');
   98:         $this->assertContainsOnlyInstancesOf(ImageRefInterface::class, $imageList);
  110:         $this->assertEquals(
  128:         $this->assertSame($imageList, $product->getAlternateImageList(), 'Constructed a new instance of value');
  129:         $this->assertContainsOnlyInstancesOf(ImageRefInterface::class, $imageList);
  141:         $this->assertEquals(
  160:         $this->assertSame($brand, $product->getBrand(), 'Constructed a new instance of value');
  161:         $this->assertInstanceOf(BrandInterface::class, $brand);
  162:         $this->assertEquals(123, $brand->getId());
  163:         $this->assertEquals('brand name', $brand->getName());
  176:         $this->assertSame($manufacturer, $product->getManufacturer(), 'Constructed a new instance of value');
  177:         $this->assertInstanceOf(ManufacturerInterface::class, $manufacturer);
  178:         $this->assertEquals(234, $manufacturer->getId());
  179:         $this->assertEquals('manufacturer name', $manufacturer->getName());
  190:         $this->assertSame(
  195:         $this->assertContainsOnlyInstancesOf(
  214:         $this->assertEquals(
  265:         $this->assertSame($mediaList, $product->getMediaList(), 'Constructed a new instance of value');
  266:         $this->assertContainsOnlyInstancesOf(MediaRefInterface::class, $mediaList);
  280:         $this->assertEquals(
  322:         $this->assertSame($alternateIdList, $product->getAlternateIDList($type), 'Constructed a new instance of value');
  323:         $this->assertContainsOnlyInstancesOf(
  339:         $this->assertEquals($expected, $valueList);
  421:         $this->assertSame($categoryList, $product->getCategoryList(), 'Constructed a new instance of value');
  422:         $this->assertContainsOnlyInstancesOf(CategoryInterface::class, $categoryList);
  434:         $this->assertEquals([345, 456], $categoryIdList);
  445:         $this->assertTrue($product->isInCategory(345), 'leaf category ignored');
  446:         $this->assertTrue($product->isInCategory('345'), 'leaf category when string ignored');
  447:         $this->assertTrue($product->isInCategory(456), 'leaf category ignored');
  448:         $this->assertTrue($product->isInCategory(678), 'Parent category ignored');
  449:         $this->assertFalse($product->isInCategory(9544), 'Bogus category matched');
  462:         $this->assertInstanceOf(BlockInterface::class, $actual);
  476:         $this->assertInstanceOf(BlockInterface::class, $actual);
  477:         $this->assertInstanceOf(NullInterface::class, $actual);
  491:         $this->assertInstanceOf(BlockInterface::class, $actual);
  492:         $this->assertInstanceOf(NullInterface::class, $actual);

DiscountOfficeItems • src/DealExpress/ApiClientBundle/Tests/Routing/RouteCollectionFactoryTest.php:
  47:         $this->assertInstanceOf(RouteCollection::class, $actual);
  48:         $this->assertEquals(array_keys($routeList), array_keys($actual->all()));

DiscountOfficeItems • src/DealExpress/ApiClientBundle/Tests/Routing/RouteFactoryTest.php:
  42:         $this->assertInstanceOf(Route::class, $actual);
  43:         $this->assertSame('/'.$this->baseUri.'/'.$path, $actual->getPath());
  44:         $this->assertSame($this->host, $actual->getHost());
  45:         $this->assertSame(['https'], $actual->getSchemes());

DiscountOfficeItems • src/DealExpress/BloomReachBundle/Tests/Feed/Encoder/ProductFeedEncoderTest.php:
  137:         $this->assertXmlStringEqualsXmlString($expected, stream_get_contents($dataResponse), $message);

DiscountOfficeItems • src/DealExpress/BloomReachBundle/Tests/Feed/Normalizer/ProductNormalizerTest.php:
    85:         $this->assertFalse($actual);
    91:         $this->assertFalse($actual);
    97:         $this->assertTrue($actual);
   103:         $this->assertEquals([], $actual);
   111:         $this->assertEquals([], $actual);
   116:         $this->assertItemField('availability', 'in stock');
   133:         $this->assertItemField($key, $upc);
   144:         $this->assertItemField('competitor_sku', $expected);
   198:         $this->assertItemField($key, $value);
   227:         $this->assertItemField($key, $value);
   266:         $this->assertStringContainsString($valueA, $actual['item']['long_description']);
   267:         $this->assertStringNotContainsString($valueB, $actual['item']['long_description']);
   268:         $this->assertStringNotContainsString($valueC, $actual['item']['long_description']);
   288:         $this->assertItemField('manufacturer', $name);
   308:         $this->assertItemField('brand', $name);
   343:         $this->assertItemField('launch_date', $value);
   355:         $this->assertItemField('url', $value);
   376:         $this->assertItemField('category', $expected);
   480:         $this->assertItemField('category_ancestry_id', $expected);
   584:         $this->assertItemField('category_crumb', $expected);
   688:         $this->assertItemField('categoryid_crumb', $expected);
   797:         $this->assertArraySubset($expected, $actual['item']);
   819:         $this->assertArraySubset($expected, $actual['item']);
   850:         $this->assertItemField('keywords', $keyword);
   870:         $this->assertItemField('keywords', $expected);
   930:         $this->assertItemField('keywords', $expected);
  1014:         $this->assertItemField('image_ref', $value);
  1039:         $this->assertItemField($key, $value);
  1076:         $this->assertArraySubset($expected, $actual['item']);
  1123:         $this->assertArraySubset(
  1137:         $this->assertArrayNotHasKey('rank', $actual['item']);
  1163:         $this->assertItemField($key, $valueA);
  1178:         $this->assertArraySubset($expected, $actual['item']);
  1216:         $this->assertArrayNotHasKey($field, $actual['item']);
  1459:             $this->assertArrayNotHasKey($key, $actual['item']);
  1461:             $this->assertEquals($value, $actual['item'][$key]);

DiscountOfficeItems • src/DealExpress/BloomReachBundle/Tests/Feed/Normalizer/SanitizingNormalizerDecoratorTest.php:
   52:         $this->assertEquals($expected, $actual);
   63:         $this->assertSame($expected, $actual);
   80:         $this->assertSame($expected, $actual);
  106:         $this->assertSame($expected, $actual);
  136:         $this->assertSame($expected, $actual);

DiscountOfficeItems • src/DealExpress/BloomReachBundle/Tests/Feed/Normalizer/AttributeNormalizer/AttributeListNormalizerTest.php:
   35:         $this->assertInstanceOf(AttributeNormalizerInterface::class, $this->fixture);
   66:         $this->assertEquals([$keyA => $valueA, $keyB => $valueB], $actual);
   83:         $this->assertEquals([$keyA => $valueA, $keyB => $valueB], $actual);
  105:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/BloomReachBundle/Tests/Feed/Normalizer/AttributeNormalizer/ProductAttributeNormalizerTest.php:
   44:         $this->assertInstanceOf(AttributeNormalizerInterface::class, $this->fixture);
   58:         $this->assertEquals($expected, $actual);
   68:         $this->assertEquals([], $actual);
   80:         $this->assertEquals([], $actual);
   94:         $this->assertEquals([$renamed => $value], $actual);
  110:         $this->assertEquals($expected, $actual);
  127:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/BloomReachBundle/Tests/Feed/Normalizer/AttributeNormalizer/SpecialsAttributeNormalizerTest.php:
   64:         $this->assertInstanceOf(AttributeNormalizerInterface::class, $this->fixture);
  105:         $this->assertEquals([$this->attributeName], array_keys($actual));
  121:         $this->assertEquals($flagValue, $actual[$this->attributeName]);
  135:         $this->assertEquals('', $actual[$this->attributeName]);
  151:         $this->assertEquals($flagValue, $actual[$this->attributeName]);
  168:         $this->assertEquals($flagValue, $actual[$this->attributeName]);
  187:         $this->assertEquals($basicValue.'|'.$onSaleValue, $actual[$this->attributeName]);
  217:         $this->assertEquals($flagValue, $actual[$this->attributeName]);
  234:         $this->assertEquals($flagValue, $actual[$this->attributeName]);
  251:         $this->assertEquals('', $actual[$this->attributeName]);
  269:         $this->assertEquals($flagValue, $actual[$this->attributeName]);
  283:         $this->assertEquals('', $actual[$this->attributeName]);
  302:         $this->assertEquals($flagValue, $actual[$this->attributeName]);

DiscountOfficeItems • src/DealExpress/BloomReachBundle/Tests/Feed/Serializer/ProductSerializerTest.php:
  34:         $this->assertEquals('not a model product', $actual);
  48:         $this->assertEquals($xml, $actual);
  61:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/BloomReachBundle/Tests/SNAP/CategoryFacetParameterGeneratorTest.php:
  27:         $this->assertInstanceOf(ParameterGeneratorInterface::class, $this->fixture);
  41:         $this->assertEquals(['fq' => ['category:"'.$id.'"']], $actual);

DiscountOfficeItems • src/DealExpress/BloomReachBundle/Tests/SNAP/SnapParameterGeneratorTest.php:
   50:         $this->assertInstanceOf(
   62:         $this->assertArraySubset($expected, $actual);
   71:         $this->assertArraySubset($expected, $actual);
   80:         $this->assertArraySubset($expected, $actual);
   91:         $this->assertArraySubset($expected, $actual);
  102:         $this->assertArraySubset($expected, $actual);
  113:         $this->assertArraySubset($expected, $actual);
  122:         $this->assertArraySubset($expected, $actual);
  133:         $this->assertArraySubset($expected, $actual);

DiscountOfficeItems • src/DealExpress/BloomReachBundle/Tests/SNAP/Autosuggest/ParameterGeneratorTest.php:
  26:         $this->assertInstanceOf(ParameterGeneratorInterface::class, $this->fixture);
  35:         $this->assertSame([], $parameterList);
  46:         $this->assertSame(['q' => $keywords.' '], $parameterList);
  56:         $this->assertSame(['q' => $keywords], $parameterList);

DiscountOfficeItems • src/DealExpress/BloomReachBundle/Tests/SNAP/Autosuggest/ResultsFactoryTest.php:
   54:         $this->assertInstanceOf(ResultsFactoryInterface::class, $this->fixture);
   72:         $this->assertContains(['suggestedSpellings', [$suggestion]], $parametersList);
   91:         $this->assertContains(['suggestedSpellings', [$suggestionA, $suggestionB]], $parametersList);
  135:         $this->assertContains(['products', array_fill(0, $count, $product)], $parametersList);
  178:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/BloomReachBundle/Tests/SNAP/Autosuggest/Product/ProductFactoryTest.php:
   34:         $this->assertInstanceOf(ProductInterface::class, $actual);
   43:         $this->assertEquals($id, $actual->getId());
   52:         $this->assertEquals($name, $actual->getName());
   59:         $this->assertInstanceOf(ImageRefInterface::class, $actual->getPrimaryImage());
   60:         $this->assertCount(1, $actual->getImageList());
   61:         $this->assertInstanceOf(ImageRefInterface::class, $actual->getImageList()[0]);
   70:         $this->assertEquals($imageUrl, $actual->getPrimaryImage()->getRef());
   77:         $this->assertSame(0, $actual->getPrimaryImage()->getOrigSize());
   84:         $this->assertSame(0, $actual->getPrimaryImage()->getSourceId());
   91:         $this->assertEquals(LocalClock::getTime(), $actual->getDateAdded());
   92:         $this->assertEquals(LocalClock::getTime(), $actual->getPrimaryImage()->getTS());
   93:         $this->assertEquals(LocalClock::getTime(), $actual->getLastModified());
  100:         $this->assertInstanceOf(NullBrand::class, $actual->getBrand());
  101:         $this->assertSame('', $actual->getBrandId());
  108:         $this->assertSame([], $actual->getCategoryList());
  109:         $this->assertFalse($actual->isInCategory(uniqid()));
  116:         $this->assertInstanceOf(NullManufacturer::class, $actual->getManufacturer());
  117:         $this->assertSame('', $actual->getManufacturerId());
  124:         $this->assertSame([], $actual->getBulletPointList());
  131:         $this->assertSame([], $actual->getAlternateIdList());
  138:         $this->assertSame([], $actual->getAlternateImageList());
  145:         $this->assertSame([], $actual->getAttributeList());
  152:         $this->assertSame([], $actual->getMediaList());
  159:         $this->assertSame(0, $actual->getAverageRating());
  166:         $this->assertSame('', $actual->getKeywords());
  173:         $this->assertSame('', $actual->getMfgPartNo());
  180:         $this->assertSame(0, $actual->getMsrp());
  187:         $this->assertSame(0, $actual->getReviewCount());
  194:         $this->assertSame('', $actual->getShortDescription());
  201:         $this->assertSame(0, $actual->getWeight());
  208:         $this->assertSame('', $actual->getSku());
  215:         $this->assertSame('', $actual->getUnitOfMeasure());
  222:         $this->assertInstanceOf(BlockInterface::class, $actual->getBlock());

DiscountOfficeItems • src/DealExpress/BloomReachBundle/Tests/SNAP/Bestseller/BestsellerTest.php:
  67:         $this->assertSame($data, $actual);

DiscountOfficeItems • src/DealExpress/BloomReachBundle/Tests/SNAP/Client/CategoryCacheClientTest.php:
   68:         $this->assertInstanceOf(ClientInterface::class, $this->fixture);
  130:         $this->assertSame($expected, $actual);
  192:         $this->assertEquals($responseData, $actual);

DiscountOfficeItems • src/DealExpress/BloomReachBundle/Tests/SNAP/Client/ClientAdapterTest.php:
  48:         $this->assertSame([], $actual);
  65:         $this->assertSame([$firstPid, $secondPid], $actual);

DiscountOfficeItems • src/DealExpress/BloomReachBundle/Tests/SNAP/JustForYou/JustForYouClientTest.php:
  159:         $this->assertSame($justForYou, $actual);

DiscountOfficeItems • src/DealExpress/BloomReachBundle/Tests/SNAP/JustForYou/JustForYouFactoryTest.php:
   66:         $this->assertProductFactoryReceivedParameter($spy, $previouslyViewed);
   83:         $this->assertProductFactoryReceivedParameter($spy, $recommendations);
  100:         $this->assertProductFactoryReceivedParameter($spy, $category);
  111:         $this->assertInstanceOf(JustForYou::class, $actual);
  152:         $this->assertEquals($previouslyViewedListingList, $productListingList);
  193:         $this->assertEquals($recommendationsProductList, $productListingList);
  252:         $this->assertEquals($categoryA, $categoryList[0]->getTitle());
  253:         $this->assertSame($categoryListingListA, $categoryList[0]->getProductListingList()->getProductListingList());
  254:         $this->assertEquals($categoryB, $categoryList[1]->getTitle());
  255:         $this->assertSame($categoryListingListB, $categoryList[1]->getProductListingList()->getProductListingList());
  267:         $this->assertEquals($isPreviouslyViewedPersonalized, $actual->isPreviouslyViewedPersonalized());
  279:         $this->assertEquals($isRecommendationPersonalized, $actual->isRecommendationPersonalized());
  291:         $this->assertEquals($isCategoryPersonalized, $actual->isCategoryPersonalized());
  313:             $this->assertEquals($parameter, $idList);
  318:         $this->assertEquals($parameter, null, 'ProductFactory never called with expected value');

DiscountOfficeItems • src/DealExpress/BloomReachBundle/Tests/SNAP/JustForYou/ResponseParserTest.php:
   33:         $this->assertEquals($expected, $actual);
   47:         $this->assertArraySubset(['previouslyViewedList' => [$firstPid, $secondPid]], $actual);
   61:         $this->assertArraySubset(['recommendationList' => [$firstPid, $secondPid]], $actual);
   76:         $this->assertArraySubset(['categoryList' => [$titleA => [$pidA], $titleB => [$pidB]]], $actual);
   85:         $this->assertArraySubset(['isPreviouslyViewedPersonalized' => $expected], $actual);
   94:         $this->assertArraySubset(['isRecommendationPersonalized' => $expected], $actual);
  103:         $this->assertArraySubset(['isCategoryPersonalized' => $expected], $actual);

DiscountOfficeItems • src/DealExpress/BloomReachBundle/Tests/SNAP/MoreLikeThis/GuzzleApiTest.php:
   47:         $this->assertInstanceOf(ApiInterface::class, $this->fixture);
  103:         $this->assertFalse($actual);

DiscountOfficeItems • src/DealExpress/BloomReachBundle/Tests/SNAP/MoreLikeThis/ParameterGeneratorTest.php:
   45:         $this->assertInstanceOf(
   58:         $this->assertArraySubset(['start' => $pageNumber], $actual);
   68:         $this->assertArraySubset(['rows' => $resultsPerPage], $actual);
   98:         $this->assertArraySubset($expected, $actual);
  114:         $this->assertArraySubset($expected, $actual);
  142:         $this->assertArraySubset(['cat_id' => $categoryId], $actual);
  160:         $this->assertArraySubset($expected, $actual);
  169:         $this->assertEquals(['start', 'rows'], array_keys($actual));

DiscountOfficeItems • src/DealExpress/BloomReachBundle/Tests/SNAP/MoreLikeThis/ProductListFactoryTest.php:
   71:         $this->assertSame([], $actual);
  143:         $this->assertEquals([$product], $actual);

DiscountOfficeItems • src/DealExpress/BloomReachBundle/Tests/SNAP/MoreLikeThis/ProductListNormalizerTest.php:
   61:         $this->assertEquals([], $actual);
   85:         $this->assertEquals([], $actual);
   98:         $this->assertArraySubset([['productId' => $productId]], $actual);
  113:         $this->assertArraySubset([['sku' => $productSku]], $actual);
  127:         $this->assertArraySubset([['price' => $productPrice]], $actual);
  141:         $this->assertArraySubset([['wasPrice' => $productWasPrice]], $actual);
  162:         $this->assertArraySubset([['displayPrice' => $productDisplayPrice]], $actual);
  183:         $this->assertArraySubset([['loginRequired' => $productIsLoginRequired]], $actual);
  198:         $this->assertArraySubset([['name' => $productName]], $actual);
  231:         $this->assertArraySubset([['primaryImage' => $imageUrl]], $actual);
  245:         $this->assertArraySubset([['url' => $url]], $actual);
  266:         $this->assertArraySubset([['mapHidden' => $productIsMapHidden]], $actual);
  289:         $this->assertArraySubset([['price' => '']], $actual);

DiscountOfficeItems • src/DealExpress/BloomReachBundle/Tests/SNAP/Search/BoostParameterGeneratorTest.php:
   43:         $this->assertEquals([], $actual);
   62:         $this->assertEquals([], $actual);
   83:         $this->assertEquals(['boost' => 'brand:"HP"'], $actual);
  110:         $this->assertEquals($expected, $actual);
  138:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/BloomReachBundle/Tests/SNAP/Search/CategoryFactoryTest.php:
  88:         $this->assertEquals($categoryList, $actual);

DiscountOfficeItems • src/DealExpress/BloomReachBundle/Tests/SNAP/Search/FacetDataNormalizerTest.php:
   36:         $this->assertEquals([], $actual);
   47:         $this->assertEquals([], $actual);
   91:         $this->assertEquals($expected, $actual);
  115:         $this->assertEquals($expected, $actual);
  129:         $this->assertEquals($expected, $actual);
  138:         $this->assertEquals([], $actual);
  149:         $this->assertEquals([], $actual);
  195:         $this->assertEquals($expected, $actual);
  225:         $this->assertEquals($expected, $actual);
  239:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/BloomReachBundle/Tests/SNAP/Search/FacetSerializerTest.php:
   53:         $this->assertEquals('', $actual);
   65:         $this->assertEquals('', $actual);
   76:         $this->assertEquals('', $actual);
   91:         $this->assertEquals($expected, $actual);
  108:         $this->assertEquals($expected, $actual);
  125:         $this->assertEquals($expected, $actual);
  142:         $this->assertEquals($expected, $actual);
  158:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/BloomReachBundle/Tests/SNAP/Search/ParameterGeneratorTest.php:
   53:         $this->assertInstanceOf(ParameterGeneratorInterface::class, $this->fixture);
   63:         $this->assertArraySubset(['search_type' => 'keyword'], $queryArguments);
   64:         $this->assertArraySubset(['q' => $keywords], $queryArguments);
   76:         $this->assertArraySubset(['search_type' => 'category'], $queryArguments);
   77:         $this->assertArraySubset(['q' => $categoryId], $queryArguments);
   90:         $this->assertArraySubset(['search_type' => 'keyword'], $queryArguments);
   91:         $this->assertArraySubset(['q' => $keywords], $queryArguments);
   92:         $this->assertArraySubset(['fq' => ['category:"'.$categoryId.'"']], $queryArguments);
  104:         $this->assertArraySubset(['search_type' => 'keyword'], $queryArguments);
  105:         $this->assertArraySubset(['q' => ''], $queryArguments);
  106:         $this->assertArraySubset(['fq' => [$value]], $queryArguments);
  121:         $this->assertArraySubset(['search_type' => 'category'], $queryArguments);
  122:         $this->assertArraySubset(['q' => $categoryId], $queryArguments);
  123:         $this->assertArraySubset(['fq' => [$value]], $queryArguments);
  135:         $this->assertArraySubset(['rows' => 8], $queryArguments);
  136:         $this->assertArraySubset(['start' => 24], $queryArguments);
  165:         $this->assertSame('', $queryArguments['sort']);
  180:         $this->assertArraySubset(['sort' => $displayName], $queryArguments);
  216:         $this->assertArrayNotHasKey('fq', $actual);
  228:         $this->assertArraySubset(['fq' => [$facetString]], $actual);
  242:         $this->assertArraySubset(['fq' => [$facetStringA, $facetStringB]], $actual);
  261:         $this->assertArraySubset(['fq' => $expectedFacets], $queryArguments);
  269:         $this->assertArraySubset(['facet.field' => $this->additionalFacetList], $actual);
  280:         $this->assertArrayNotHasKey('facet.field', $actual);
  296:         $this->assertArraySubset($expected, $actual);
  306:         $this->assertArrayNotHasKey('facet.range', $actual);
  332:         $this->assertArraySubset($expected, $actual);
  351:         $this->assertArraySubset($expected, $actual);
  375:         $this->assertArraySubset($expected, $actual);

DiscountOfficeItems • src/DealExpress/BloomReachBundle/Tests/SNAP/Search/ResponseParserTest.php:
   73:         $this->assertSame($expected, $actual);
   86:         $this->assertArraySubset($expected, $actual);
  121:         $this->assertContains($productList, $actual);
  153:         $this->assertArraySubset($expected, $actual);
  166:         $this->assertArraySubset($expected, $actual);
  179:         $this->assertArraySubset($expected, $actual);
  192:         $this->assertArraySubset($expected, $actual);
  220:         $this->assertEquals($categoryList, $actual['categories']);
  234:         $this->assertNotContains(['id' => $this->categoryKey], $actual['facetDataList']);

DiscountOfficeItems • src/DealExpress/BloomReachBundle/Tests/SNAP/Search/ResultsFactoryTest.php:
   65:         $this->assertInstanceOf(ResultsFactoryInterface::class, $this->fixture);
  122:         $this->assertContains(['products', $productList], $parametersList);
  185:         $this->assertContains(['facets', $facetList], $parametersList);
  200:         $this->assertContains(['suggestedSpellings', $suggestedSpelling], $parametersList);
  216:         $this->assertContains(['categories', $categoryList], $parametersList);
  249:         $this->assertEquals($results, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/SuggestionSlowTest.php:
  208:         $this->assertSuggestionEquals($expected, $actual);
  223:         $this->assertInvoiceEquals(
  232:         $this->assertEquals(count($expectedSug), count($actualSug), $message);
  235:             $this->assertInvoiceEquals($expectedInvoice, $actualSug[$idx], $message);
  241:         $this->assertEquals(count($expectedCom), count($actualCom), $message);
  244:             $this->assertInvoiceEquals($expectedInvoice, $actualCom[$idx], $message);
  260:         $this->assertEquals(
  265:         $this->assertEquals(

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/SuggestionTest.php:
   43:         $this->assertTrue($invoice === $suggestion->getOriginalInvoice());
   44:         $this->assertEquals([], $suggestion->getSuggestedInvoices());
   45:         $this->assertEquals([], $suggestion->getCommittedInvoices());
   46:         $this->assertEquals([], $suggestion->getInvoices());
   62:         $this->assertTrue($missing->getOrder() === $order);
   64:         $this->assertInvoicesEquals($invoice, $missing, ['state']);
   97:         $this->assertTrue($missing->getOrder() === $order);
  103:         $this->assertInvoicesEquals($expected, $missing);
  114:         $this->assertEquals(1, count($suggested));
  118:         $this->assertInvoicesEquals($expected, $suggested);
  164:         $this->assertEquals($expected, $actual);
  580:         $this->assertEquals($values['expected'], $values['actual'], $message);
  583:             $this->assertEntityCollectionEquals(
  635:         $this->assertEquals($values['expected'], $values['actual'], $message);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Address/AddressFactoryTest.php:
   41:         $this->assertAddress([], $actual);
   55:         $this->assertAddress($overrideList, $actual);
   97:         $this->assertAddress($addressData, $address);
  114:             $this->assertEquals($validation, $exception->getValidation());
  162:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Address/AddressValidatorTest.php:
   34:         $this->assertInstanceOf(AddressValidationInterface::class, $fixture);
   64:         $this->assertInstanceOf(ValidationResponseInterface::class, $actual);
   65:         $this->assertEquals(ValidationResponseInterface::STATUS_INVALID, $actual->getStatus());
   66:         $this->assertNull($actual->getType());
   67:         $this->assertFalse($actual->isValid());
   68:         $this->assertFalse($actual->isAmbiguous());
   69:         $this->assertTrue($actual->hasErrors());
   70:         $this->assertEquals($expected, $actual->getErrorMessages());
   71:         $this->assertEmpty($actual->getSuggestedAddresses());
   99:         $this->assertInstanceOf(ValidationResponseInterface::class, $actual);
  100:         $this->assertEquals(ValidationResponseInterface::STATUS_VALID, $actual->getStatus());
  101:         $this->assertNull($actual->getType());
  102:         $this->assertTrue($actual->isValid());
  103:         $this->assertFalse($actual->isAmbiguous());
  104:         $this->assertFalse($actual->hasErrors());
  105:         $this->assertEmpty($actual->getErrorMessages());
  106:         $this->assertEmpty($actual->getSuggestedAddresses());
  124:         $this->assertInstanceOf(ValidationResponseInterface::class, $actual);
  125:         $this->assertEquals(ValidationResponseInterface::STATUS_INVALID, $actual->getStatus());
  126:         $this->assertNull($actual->getType());
  127:         $this->assertFalse($actual->isValid());
  128:         $this->assertFalse($actual->isAmbiguous());
  129:         $this->assertTrue($actual->hasErrors());
  130:         $this->assertEquals($expected, $actual->getErrorMessages());
  131:         $this->assertEmpty($actual->getSuggestedAddresses());
  285:         $this->assertInstanceOf(ValidationResponseInterface::class, $actual);
  286:         $this->assertEquals(ValidationResponseInterface::STATUS_VALID, $actual->getStatus());
  287:         $this->assertNull($actual->getType());
  288:         $this->assertTrue($actual->isValid());
  289:         $this->assertFalse($actual->isAmbiguous());
  290:         $this->assertFalse($actual->hasErrors());
  291:         $this->assertEmpty($actual->getErrorMessages());
  292:         $this->assertEmpty($actual->getSuggestedAddresses());

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Address/NormalizerTest.php:
   48:         $this->assertEquals($expected, $actual);
   77:         $this->assertEquals($expected, array_keys($actual));
   95:         $this->assertEquals($expected, $actual['name']);
  105:         $this->assertEquals($expected, $actual['company']);
  115:         $this->assertEquals($expected, $actual['streetAddress']);
  125:         $this->assertEquals($expected, $actual['suburb']);
  135:         $this->assertEquals($expected, $actual['city']);
  145:         $this->assertEquals($expected, $actual['state']);
  155:         $this->assertEquals($expected, $actual['zip']);
  165:         $this->assertEquals($expected, $actual['country']);
  175:         $this->assertEquals($expected, $actual['phone']);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Address/NullValidatorTest.php:
  27:         $this->assertInstanceOf(AddressValidationInterface::class, $this->fixture);
  36:         $this->assertInstanceOf(ValidationResponseInterface::class, $actual);
  37:         $this->assertEquals(ValidationResponseInterface::STATUS_VALID, $actual->getStatus());
  38:         $this->assertNull($actual->getType());
  39:         $this->assertTrue($actual->isValid());
  40:         $this->assertFalse($actual->isAmbiguous());
  41:         $this->assertFalse($actual->hasErrors());
  42:         $this->assertEmpty($actual->getErrorMessages());
  43:         $this->assertEmpty($actual->getSuggestedAddresses());

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/AttributeName/ImportDataRepositoryTest.php:
   66:         $this->assertEquals('AttributeName', $objectType);
   81:         $this->assertNull($object);
  100:         $this->assertEquals($name, $object->getName());
  110:         $this->assertNull($object);
  121:         $this->assertNull($object);
  142:         $this->assertEquals($name, $object->getName());
  164:         $this->assertEquals($id, $object->getId());
  204:         $this->assertEquals($name, $object->getName());
  208:         $this->assertEquals($name, $attribute->getName());

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Brand/ImportDataRepositoryTest.php:
   66:         $this->assertEquals('Brand', $objectType);
   81:         $this->assertNull($object);
  100:         $this->assertEquals($name, $object->getName());
  110:         $this->assertNull($object);
  121:         $this->assertNull($object);
  144:         $this->assertEquals($name, $object->getName());
  184:         $this->assertEquals($name, $object->getName());
  188:         $this->assertEquals($name, $brand->getName());

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Cart/CartCopierTest.php:
  118:         $this->assertEquals($cartId, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Cart/CartManagerTest.php:
    93:         $this->assertEquals($cart, $actual);
   110:         $this->assertEquals($cart, $actual);
   117:         $this->assertNull($this->fixture->getCustomerCart($user));
   144:         $this->assertSame($cart, $actual);
   159:         $this->assertSame($cart, $actual);
   173:         $this->assertSame($cart, $actual);
   214:         $this->assertCartQuantityChanges($expectedCartSetQty, $watch);
   216:         $this->assertFlashMessages($flashMessages, $spy);
   591:         $this->assertCartQuantityChanges($expectedCartSetQty, $spyLineQty);
   595:         $this->assertFlashMessages([$expectedFlashMessage], $spyFlashMessages);
   663:         $this->assertCartQuantityChanges($expectedCartSetQty, $spyLineQty);
   667:         $this->assertFlashMessages([$expectedFlashMessage], $spyFlashMessages);
   735:         $this->assertCartQuantityChanges($expectedCartSetQty, $spyLineQty);
   739:         $this->assertFlashMessages([$expectedFlashMessage], $spyFlashMessages);
   823:         $this->assertCartQuantityChanges($expectedCartSetQty, $spyLineQty);
   827:         $this->assertFlashMessages([$expectedFlashMessage], $spyFlashMessages);
   923:         $this->assertCartQuantityChanges($expectedCartSetQty, $spyLineQty);
   927:         $this->assertFlashMessages([$expectedFlashMessage], $spyFlashMessages);
  1019:         $this->assertCartQuantityChanges($expectedCartSetQty, $spyLineQty);
  1023:         $this->assertFlashMessages([$expectedFlashMessage], $spyFlashMessages);
  1154:         $this->assertEquals($expected, $actual, 'Cart changes not as expected.');
  1172:         $this->assertEquals($expected, $actual, 'Flash messages not as expected.');

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Cart/CartTest.php:
   17:         $this->assertInstanceOf(CartInterface::class, $fixture);
   26:         $this->assertEquals('', $actual);
   35:         $this->assertEquals(0, $actual);
   44:         $this->assertNull($actual);
   57:         $this->assertSame($lineC, $actual);
   66:         $this->assertNull($actual);
   80:         $this->assertSame($lineB, $actual);
   95:         $this->assertEquals($count, $actual);
  110:         $this->assertEquals(1, $actual);
  125:         $this->assertEquals(2, $actual);
  137:         $this->assertFalse($actual);
  150:         $this->assertSame($lines, $actual);
  168:         $this->assertEquals($qtyB + $qtyC, $actual);
  184:         $this->assertEquals($qty, $actual);
  197:         $this->assertEquals(0, $actual);
  213:         $this->assertEquals($qtyA + $qtyB + $qtyC, $actual);
  229:         $this->assertEquals($priceA + $priceB + $priceC, $actual);
  242:         $this->assertTrue($actual);
  255:         $this->assertFalse($actual);
  264:         $this->assertTrue($actual);
  276:         $this->assertFalse($actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Cart/ContinueShoppingUrlGeneratorTest.php:
   95:         $this->assertEquals($response, $actual);
  136:         $this->assertEquals($referrer, $actual);
  182:         $this->assertEquals($url, $actual);
  215:         $this->assertEquals($referrer, $actual);
  248:         $this->assertEquals($categoryUrl, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Cart/CookieManagerTest.php:
   50:         $this->assertCookie($cartId, $cookie);
  101:         $this->assertEquals('cart', $cookie->getName(), 'Cookie name did not match expected.');
  102:         $this->assertEquals($cartId, $cookie->getValue(), 'Cookie value did not match expected.');
  103:         $this->assertEquals($expiry, $cookie->getExpiresTime(), 'Cookie expiry did not match expected.');
  104:         $this->assertEquals('/', $cookie->getPath(), 'Cookie path did not match expected.');
  105:         $this->assertEquals($this->domain, $cookie->getDomain(), 'Cookie domain did not match expected.');
  106:         $this->assertTrue($cookie->isSecure(), 'Cookie is not secure.');
  107:         $this->assertTrue($cookie->isHttpOnly(), 'Cookie is not HTTP only.');

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Cart/FlashTrackerTest.php:
   55:         $this->assertEquals($response, $actual);
   72:         $this->assertArraySubset(['name' => $name], $data);
   89:         $this->assertArraySubset(['name' => $name], $data);
  106:         $this->assertArraySubset(['id' => $id], $data);
  123:         $this->assertArraySubset(['sku' => $sku], $data);
  140:         $this->assertArraySubset(['price' => $price], $data);
  157:         $this->assertArraySubset(['brand' => ''], $data);
  176:         $this->assertArraySubset(['brand' => $brandName], $data);
  190:         $this->assertArraySubset(['category' => ''], $data);
  208:         $this->assertArraySubset(['category' => $categoryName], $data);
  224:         $this->assertArraySubset(['quantity' => $quantity], $data);
  241:         $this->assertEquals($response, $actual);
  258:         $this->assertArraySubset(['name' => $name], $data);
  275:         $this->assertArraySubset(['name' => $name], $data);
  292:         $this->assertArraySubset(['id' => $id], $data);
  309:         $this->assertArraySubset(['sku' => $sku], $data);
  326:         $this->assertArraySubset(['price' => $price], $data);
  343:         $this->assertArraySubset(['brand' => ''], $data);
  362:         $this->assertArraySubset(['brand' => $brandName], $data);
  376:         $this->assertArraySubset(['category' => ''], $data);
  394:         $this->assertArraySubset(['category' => $categoryName], $data);
  410:         $this->assertArraySubset(['quantity' => $quantity], $data);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Cart/SymfonyRequestCartIdLookupTest.php:
  30:         $this->assertEquals('', $actual);
  41:         $this->assertEquals($cartId, $actual);
  52:         $this->assertEquals($cartId, $actual);
  63:         $this->assertEquals($cartId, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Cart/UpdateStrategy/AbstractCartContentTest.php:
   78:         $this->assertSame($product, $argument[0]['product']);
   79:         $this->assertEquals($qty, $argument[0]['quatity']);
   80:         $this->assertEquals($flags, $argument[0]['flags']);
   84:         $this->assertEquals($price->getChannel(), $actualPrice->getChannel());
   85:         $this->assertEquals($price->getMaxQty(), $actualPrice->getMaxQty());
   86:         $this->assertEquals($price->getMinQty(), $actualPrice->getMinQty());
  126:         $this->assertSame($product, $argument[0]['product']);
  127:         $this->assertEquals($qty, $argument[0]['quatity']);
  128:         $this->assertEquals($flags, $argument[0]['flags']);
  132:         $this->assertEquals($channel, $actualPrice->getChannel());
  133:         $this->assertEquals($qty, $actualPrice->getMaxQty());
  134:         $this->assertEquals($qty, $actualPrice->getMinQty());

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Cart/UpdateStrategy/AddContentTest.php:
  67:         $this->assertFalse($updateCart->isEmpty());

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Cart/UpdateStrategy/AddProductTest.php:
  22:         $this->assertSame($product, $fixture->getProduct());
  23:         $this->assertSame($price, $fixture->getPrice());
  24:         $this->assertEquals($qty, $fixture->getQty());
  25:         $this->assertEquals($flags, $fixture->getFlags());
  37:         $this->assertSame($product, $fixture->getProduct());
  38:         $this->assertSame($price, $fixture->getPrice());
  39:         $this->assertEquals($qty, $fixture->getQty());
  40:         $this->assertEquals($flags, $fixture->getFlags());

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Cart/UpdateStrategy/ChainTest.php:
  15:         $this->assertTrue($update->isEmpty());
  34:         $this->assertFalse($update->isEmpty());
  53:         $this->assertFalse($update->isEmpty());

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Cart/UpdateStrategy/FilterCollectionTest.php:
  41:         $this->assertEquals($result, $fixture->needsAdjustment($this->cart, $this->logger));
  55:         $this->assertEquals($result, $fixture->needsAdjustment($this->cart, $this->logger));
  66:         $this->assertTrue($fixture->needsAdjustment($this->cart, $this->logger));

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Cart/UpdateStrategy/SetAttributionTest.php:
  22:         $this->assertEquals($agent, $cart->getAgent());
  23:         $this->assertEquals($channel, $cart->getChannel());
  36:         $this->assertNull($cart->getAgent());
  37:         $this->assertNull($cart->getChannel());

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Cart/UpdateStrategy/SetCouponTest.php:
  20:         $this->assertEquals($couponCode, $cart->getCouponCode());
  32:         $this->assertNull($cart->getCouponCode());

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Cart/UpdateStrategy/SetCustomerIdTest.php:
  20:         $this->assertEquals($customerId, $cart->getCustomerId());
  32:         $this->assertEquals(0, $cart->getCustomerId());

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Cart/UpdateStrategy/SetPriceExpiresTest.php:
  23:         $this->assertEquals($date, PricePoint::fromLine($cart->getLineItems()[0])->getExpiresOn());

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Cart/UpdateStrategy/SetReferrerTest.php:
  20:         $this->assertEquals($referrer, $cart->getChannel());
  34:         $this->assertEquals($referrer, $cart->getChannel());

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Category/ImportDataRepositoryTest.php:
   47:                     $this->assertEquals('Category', $objectType);
   77:         $this->assertNull($object);
   96:         $this->assertEquals($name, $object->getName());
  106:         $this->assertInstanceOf(Categories::class, $object);
  119:         $this->assertNull($object);
  132:         $this->assertNull($object);
  145:         $this->assertNull($object);
  171:         $this->assertEquals($name, $object->getName());
  203:         $this->assertEquals($match, $object->getName());
  266:         $this->assertEquals($name, $object->getName());
  268:         $this->assertEquals($name, $category->getName());

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Command/BazaarVoiceProductRatingCommandTest.php:
  26:         $this->assertEquals('', $tester->getDisplay());
  40:         $this->assertEquals(

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Command/CreateProductImageSizeCommandTest.php:
  177:         $this->assertEquals($message.PHP_EOL, $actual);
  265:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Command/FeedManagerCommandTest.php:
  223:         $this->assertEquals(1, count($invocationList));
  228:         $this->assertEquals('www.officesupply.com', $context->getHost());

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Command/FeedStartCommandTest.php:
  81:         $this->assertEquals("No feeds scheduled to run.\n", $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Command/FindDeadwoodCommandTest.php:
  67:         $this->assertStringContainsString($expected['message'], $tester->getDisplay());
  80:         $this->assertCount(1, $invocationList, 'store() was not called as expected.');
  85:             $this->assertStringContainsString("\n\"{$product}\"", $contents);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Command/GOPDImportCommandTest.php:
  148:             $this->assertInstanceOf(vfsStreamFile::class, $file);
  149:             $this->assertEquals($content, $file->getContent());
  211:             $this->assertEquals($expected[$index], $parameter);
  430:             $this->assertEquals($expected[$index], $parameter);
  640:         $this->assertTrue(
  645:             $this->assertTheirPriceEquals($productId, $expected[$index], $chain, array_values($invocation));
  649:         $this->assertTrue(
  654:             $this->assertTheirAltIdEquals($productId, $expected[$index], $chain, $invocation->getParameters());
  658:         $this->assertTrue(
  664:         $this->assertTrue(
  750:         $this->assertEquals($productId, $actual[0], 'productId');
  751:         $this->assertEquals('GOPD', $actual[1]);
  752:         $this->assertEquals($chain, $actual[2], 'chain');
  753:         $this->assertEquals($expected['Factored Price'], $actual[3], 'Factored Price');
  754:         $this->assertEquals(substr($expected['URL'], 0, 255), $actual[5], 'URL');
  768:         $this->assertEquals($productId, $actual[0], 'productId');
  769:         $this->assertEquals($type, $actual[1], 'type');
  770:         $this->assertEquals(trim($expected['Chain SKU']), $actual[2], 'Number');

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Command/InventoryGetLevelsCommandTest.php:
  65:         $this->assertEquals($display, $tester->getDisplay());

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Command/InventoryMaintenanceCommandTest.php:
  42:                     $this->assertEquals($sampleLevels[$pid]['expected'], $amount);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Command/ListDCsCommandTest.php:
  56:         $this->assertEquals(implode(PHP_EOL, $output), $tester->getDisplay());

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Command/PollPaymentStatusCommandTest.php:
  192:         $this->log->assertLogsContains(

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Command/PruneDeadwoodCommandTest.php:
  157:             $this->assertStringContainsString($message, $tester->getDisplay());
  165:             $this->assertEquals($inventoryCountList[$product], $productCount);
  710:         $this->assertEmpty($db->fetchAll('SELECT * FROM productblock_product'));
  711:         $this->assertEmpty($db->fetchAll('SELECT * FROM productblock'));

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Command/SendFirstSubscriptionEmailCommandTest.php:
   84:         $this->assertEmailsSent($spy, $expected);
  276:         $this->assertCount(count($expectedEmailParams), $invocations);
  284:         $this->assertEquals($expectedTemplateParams, $actualTemplateParams);
  286:         $this->assertEqualsCanonicalizing($expectedEmailParams, $actualEmailParams);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Composite/ProductCompositeTest.php:
   86:         $this->assertSame($entity->getId(), $compositeProduct->getId());
   87:         $this->assertSame($entity->getSku(), $compositeProduct->getSku());
   88:         $this->assertSame($entity->getMfgpartno(), $compositeProduct->getMfgPartNo());
   89:         $this->assertSame($entity->getName(), $compositeProduct->getName());
   90:         $this->assertSame($entity->getShortDescription(), $compositeProduct->getShortDescription());
   91:         $this->assertSame($entity->getLongDescription(), $compositeProduct->getLongDescription());
   92:         $this->assertSame($entity->getKeywords(), $compositeProduct->getKeywords());
   93:         $this->assertSame($entity->getMsrp(), $compositeProduct->getMsrp());
   94:         $this->assertSame($entity->getWeight(), $compositeProduct->getWeight());
   95:         $this->assertSame($entity->getStatus(), !$compositeProduct->isDisabled());
   96:         $this->assertSame($entity->getUnit(), $compositeProduct->getUnitOfMeasure());
   97:         $this->assertSame($entity->getDateAdded(), $compositeProduct->getDateAdded());
   98:         $this->assertSame($entity->getLastModified(), $compositeProduct->getLastModified());
   99:         $this->assertSame($entity->getReviewCount(), $compositeProduct->getReviewCount());
  100:         $this->assertSame($entity->getAverageRating(), $compositeProduct->getAverageRating());
  102:         $this->assertSame($entity->getManufacturerId(), $compositeProduct->getManufacturerId());
  104:         $this->assertSame($entity->getManufacturer()->getName(), $entityManufacturer->getName());
  105:         $this->assertSame($entity->getManufacturer()->getUrl(), $entityManufacturer->getUrl());
  107:         $this->assertSame($entity->getBrandId(), $compositeProduct->getBrandId());
  108:         $this->assertSame($entity->getBrand()->getName(), $compositeProduct->getBrand()->getName());
  109:         $this->assertSame($entity->getBrand()->getUrl(), $compositeProduct->getBrand()->getUrl());
  113:             $this->assertTrue(strpos($entity->getBulletPoints(), $bulletPoint) !== false);
  144:         $this->assertSameSize($attributes, $attributeResults);
  147:             $this->assertSame($attributes[$index]->getClass(), $result->getClass());
  148:             $this->assertSame($attributes[$index]->getDisplayValue(), $result->getDisplayValue());
  187:         $this->assertSameSize($images, $imageResults);
  190:             $this->assertSame($images[$index]->getHash(), $result->getHash());
  196:             $this->assertEmpty($primaryImage);
  201:                         $this->assertSame($image->getHash(), $primaryImage->getHash());
  205:                 $this->assertSame($images[0]->getHash(), $primaryImage->getHash());
  212:             $this->assertCount(count($images) - 1, $alternateImageResults);
  215:             $this->assertFalse($image->isPrimary());
  246:         $this->assertSameSize($media, $mediaResults);
  249:             $this->assertSame($media[$index]->getSourceId(), $result->getSourceId());
  250:             $this->assertSame($media[$index]->getUrl(), $result->getUrl());
  281:         $this->assertSameSize($altIds, $altIdResults);
  284:             $this->assertSame($altIds[$index]->getType(), $result->getType());
  285:             $this->assertSame($altIds[$index]->getValue(), $result->getValue());
  290:         $this->assertCount(0, $invalidIdResult);
  298:                 $this->assertSame($result->getType(), $randomType);
  332:         $this->assertSameSize($categories, $categoryResults);
  335:             $this->assertSame($categories[$index]->getId(), $result->getId());
  343:         $this->assertFalse($composite->isInCategory($badCategory));
  348:             $this->assertTrue($composite->isInCategory($goodCategory));
  349:             $this->assertTrue($composite->isInCategory($goodCategory->getId()));
  456:         $this->assertInstanceOf(BlockInterface::class, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Controller/PaymentControllerTest.php:
  71:         $this->assertSame($response, $actual);
  87:         $this->logs->assertMessageLogged(
  95:         $this->assertEquals(500, $actual->getStatusCode());
  96:         $this->assertEquals('Error', $actual->getContent());

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Coupon/AuthorizationAwareCouponMediatorTest.php:
   64:         $this->assertSame($coupon, $this->fixture->getByCode($code));
   82:         $this->assertNull($this->fixture->getByCode($code));
  102:         $this->assertSame($coupon, $this->fixture->getByCode($code));
  118:         $this->assertNull($this->fixture->getByCode($code));

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Coupon/CouponCategoryMapperTest.php:
   62:         $this->assertCategoryMapping($coupon, $expected);
  184:         $this->assertCategoryMapping($coupon, $expected);
  210:         $this->assertCategoryMapping($coupon, $expected);
  248:         $this->assertCategoryMapping($coupon, $expected);
  288:         $this->assertCategoryMapping($coupon, $expected);
  335:         $this->assertCategoryMapping($coupon, $expected);
  382:         $this->assertCategoryMapping($coupon, $expected);
  436:         $this->assertCategoryMapping($coupon, $expected);
  451:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Coupon/CouponMediatorTest.php:
   89:         $this->assertEquals($couponList, $actual);
  104:         $this->assertEquals($couponList, $actual);
  120:         $this->assertEquals($expected, $actual);
  149:         $this->assertEquals($expected, $actual);
  184:         $this->assertEquals($expected, $actual);
  227:         $this->assertEquals($expected, $actual);
  242:         $this->assertEquals($coupon, $actual);
  257:         $this->assertEquals($coupon, $actual);
  272:         $this->assertEquals($couponList, $actual);
  314:         $this->assertSame($response, $actual);
  333:         $this->assertSame($expected, $actual);
  352:         $this->assertSame($expected, $actual);
  361:         $this->assertEquals('546b3951555445794d7a513d', substr($actual, 16, -8));
  385:         $this->assertSame($coupon, $actual);
  397:         $this->assertNull($actual);
  413:         $this->assertEquals([], $actual);
  433:         $this->assertEquals([], $actual);
  459:         $this->assertSame([$couponCode => false], $actual);
  491:         $this->assertSame($expected, $actual);
  517:         $this->assertSame([], $actual);
  545:         $this->assertSame([], $actual);
  588:         $this->assertSame($expected, $actual);
  611:         $this->assertEquals([$couponCode => ['url' => $customUrl]], $actual);
  634:         $this->assertEquals([$couponCode => ['img' => $customImage]], $actual);
  677:         $this->assertSame($expected, $actual);
  719:         $this->assertSame($expected, $actual);
  731:         $this->assertEquals($expected, $actual);
  776:         $this->assertFalse($actual);
  803:         $this->assertEquals($couponList, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Coupon/CouponSummaryTest.php:
   71:         $this->assertEquals($expected, $actual);
  141:         $this->assertEquals($expected, $actual);
  177:         $this->assertEquals($expected, $actual);
  233:         $this->assertEquals($expected, $actual);
  292:         $this->assertEquals($expected, $actual);
  351:         $this->assertEquals($expected, $actual);
  412:         $this->assertEquals($expected, $actual);
  459:         $this->assertEquals($expected, $actual);
  553:         $this->assertEquals($expected, $actual);
  640:         $this->assertEquals($expected, $actual);
  919:         $this->assertEquals((bool) $expected, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Coupon/DiscountCalculatorFactoryTest.php:
   61:         $this->assertInstanceOf(DiscountCalculator::class, $actual);
  113:         $this->assertEquals($expected, $actual);
  114:         $this->assertEquals(round($orderData['discount'], 2), array_sum($actual));
  135:         $this->assertEquals($expected, $actual);
  136:         $this->assertEquals(round($orderData['discount'], 2), array_sum($actual));
  157:         $this->assertEquals($expected, $actualA);
  158:         $this->assertEquals($expected, $actualB);
  159:         $this->assertEquals(round($orderData['discount'], 2), array_sum($actualA));
  160:         $this->assertEquals(round($orderData['discount'], 2), array_sum($actualB));
  183:         $this->assertEquals($expected, $actualA);
  184:         $this->assertEquals($expected, $actualB);
  185:         $this->assertEquals(round($orderData['discount'], 2), array_sum($actualA));
  186:         $this->assertEquals(round($orderData['discount'], 2), array_sum($actualB));
  374:         $this->assertEquals($discount, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Coupon/LineItemSpecifierTest.php:
   94:         $this->assertLineItemsEqual($expected, $actual);
  113:         $this->assertLineItemsEqual($expected, $actual);
  287:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Coupon/UrlGeneratorTest.php:
  269:         $this->assertEquals($url, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Customer/AddressNormalizerTest.php:
   37:         $this->assertEquals($expected, $actual);
   59:         $this->assertEquals($expected, $actual);
   72:         $this->assertArraySubset(['phone' => $phone], $actual);
   85:         $this->assertArraySubset(['phone' => $phone], $actual);
  103:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Customer/AddressSorterTest.php:
  34:         $this->assertEquals($addressBook, $actual);
  54:         $this->assertSameSize($expected, $actual);
  55:         $this->assertArraySubset($expected, $actual, true);
  81:         $this->assertSameSize($expected, $actual);
  82:         $this->assertArraySubset($expected, $actual, true);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Customer/CustomerPrinterFactoryTest.php:
   56:         $this->assertFalse($actual);
   65:         $this->assertInstanceOf(CustomerPrinter::class, $actual);
   71:         $this->assertFalse($actual);
   83:         $this->assertEquals($customerId, $actual->getCustomersId());
   84:         $this->assertEquals($printerData['mfg'], $actual->getMfg());
   85:         $this->assertEquals($printerData['model'], $actual->getModel());
   86:         $this->assertEquals($printerName, $actual->getName());
  111:         $this->assertEquals($machineType, $actual->getMachType());

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Customer/CustomerUpdaterTest.php:
  312:         $this->assertCount(1, $invocationList);
  316:         $this->assertEquals('onCustomerChanged', $eventName, 'Event name does not match.');
  317:         $this->assertInstanceOf(GenericEvent::class, $event);
  318:         $this->assertEquals('onCustomerChanged', $event->getSubject(), 'Event subject does not match.');
  319:         $this->assertEquals(['id' => $customerId], $event->getArguments(), 'Event argument do not match.');

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Customer/DefaultAddressTogglerTest.php:
  42:         $this->assertFalse($actual, 'toggle() should return false when no matching address found');
  58:         $this->assertTrue($actual, 'toggle() should return true when matching address found');
  71:         $this->assertFalse($actual, 'toggle() should return false when no matching address found');
  87:         $this->assertTrue($actual, 'toggle() should return true when matching address found');

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Customer/NameByEmailFilterTest.php:
  48:         $this->assertIsCallable($this->fixture);
  71:         $this->assertEquals([$email => $name], $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Customer/PasswordResetterTest.php:
   64:         $this->assertFalse($actual);
  140:         $this->assertTrue($actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/DateTime/BusinessDayCalculatorTest.php:
   43:         $this->assertEquals($expectedOutput, $nonCachedDate);
   48:         $this->assertEquals($expectedOutput, $cachedDate);
   56:         $this->assertEquals($expectedOutput, date('Y-m-d', $this->fixture->addBusinessDays($days, $date)));
   80:         $this->assertEquals($expectedDay->format('Y-m-d'), date('Y-m-d', $actualDay));
   90:         $this->assertEquals($expectedDay->format('Y-m-d'), date('Y-m-d', $actualDay));
  100:         $this->assertEquals($expectedDay->format('Y-m-d'), date('Y-m-d', $actualDay));
  111:         $this->assertEquals($expectedDay->format('Y-m-d'), date('Y-m-d', $actualDay));

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/DedupeImage/ProcessorTest.php:
  45:         $this->assertInstanceOf(TaskConsumerInterface::class, $this->fixture);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/DedupeImage/ProductImageDeduperTest.php:
  273:         $this->assertMethodOrdering($spy, ['remove', 'flush', 'clear']);
  313:         $this->assertEquals(

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/DependencyInjection/DealExpressCatalogExtensionTest.php:
   39:         $this->assertTrue($actual, 'loads the catalog.xml file if not already loaded');
   73:         $this->assertEquals(
  122:         $this->assertTrue($actual, 'Failed to create service for keyed entry');
  128:         $this->assertEquals(
  151:         $this->assertEquals(
  207:                 $this->assertInstanceOf(Definition::class, $methodCall[1][0]);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/DependencyInjection/Compiler/RegisterFeedTest.php:
  30:         $this->assertEquals(

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Entity/CartTest.php:
   22:         $this->assertInstanceOf(CartInterface::class, $cart);
   36:         $this->assertCartEquals($expected, $cart);
  204:         $this->assertEquals($expected, $actual, $message);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Entity/CouponTest.php:
   20:         $this->assertEquals($id, $actual);
   31:         $this->assertEquals($code, $actual);
   42:         $this->assertEquals($name, $actual);
   53:         $this->assertEquals($type, $actual);
   63:         $this->assertFalse($actual);
   72:         $this->assertFalse($actual);
   83:         $this->assertEquals($date, $actual);
   98:         $this->assertEquals($date, $actual);
  109:         $this->assertEquals($date, $actual);
  124:         $this->assertEquals($date, $actual);
  136:         $this->assertEquals($details, $actual);
  148:         $this->assertEquals($public, $actual);
  160:         $this->assertEquals($featured, $actual);
  172:         $this->assertEquals($image, $actual);
  184:         $this->assertEquals($url, $actual);
  214:         $this->assertEquals("{$finePrint} {$errorA} {$errorB} ", $actual);
  240:         $this->assertEquals(null, $actual);
  268:         $this->assertEquals($maxSavings, $actual);
  308:         $this->assertEquals($maxSavingsHigh, $actual);
  345:         $this->assertTrue($actual);
  371:         $this->assertFalse($actual);
  411:         $this->assertEquals($maxSavingsHigh, $actual);
  439:         $this->assertEquals($minSubTotal, $actual);
  465:         $this->assertEquals(null, $actual);
  493:         $this->assertEquals(['product', 'order', 'usage'], $actual);
  521:         $this->assertEquals($categoryId, $actual);
  547:         $this->assertFalse($actual);
  575:         $this->assertEquals($amount, $actual);
  601:         $this->assertEquals(0.0, $actual);
  627:         $this->assertEquals(0.0, $actual);
  659:         $this->assertEquals([$skuA, $skuB, $skuC], $actual);
  685:         $this->assertEquals([], $actual);
  715:         $this->assertEquals([$tag, 'freeItem'], $actual);
  743:         $this->assertEquals($sku, $actual);
  769:         $this->assertFalse($actual);
  797:         $this->assertEquals($sku, $actual);
  823:         $this->assertFalse($actual);
  837:         $this->assertEquals($headline, $actual);
  847:         $this->assertEquals('', $actual);
  861:         $this->assertEquals($qualifier, $actual);
  871:         $this->assertEquals('', $actual);
  881:         $this->assertEquals('', $actual);
  899:         $this->assertEquals(new ArrayCollection(), $actual);
  904:         $this->assertEquals(new ArrayCollection($categoryListA), $actualA);
  909:         $this->assertEquals(new ArrayCollection($categoryListB), $actualB);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Entity/CustomerTest.php:
   37:         $this->assertEquals($name, $actual);
   48:         $this->assertEquals($name, $actual);
   59:         $this->assertEquals($email, $actual);
   70:         $this->assertFalse($actual);
   81:         $this->assertFalse($actual);
   92:         $this->assertTrue($actual);
  103:         $this->assertEquals($id, $actual);
  114:         $this->assertEquals($address, $actual);
  121:         $this->assertNull($actual);
  134:         $this->assertNull($actual);
  150:         $this->assertAddressesEqual($firstAddress, $actual);
  162:         $this->assertAddressesEqual($firstAddress, $actual);
  173:         $this->assertEquals($address, $actual);
  180:         $this->assertNull($actual);
  193:         $this->assertNull($actual);
  209:         $this->assertAddressesEqual($firstAddress, $actual);
  221:         $this->assertAddressesEqual($firstAddress, $actual);
  232:         $this->assertEquals($password, $actual);
  241:         $this->assertNull($actual);
  252:         $this->assertEquals($value, $actual);
  261:         $this->assertEquals($exempt, $this->customer->getTaxExempt());
  262:         $this->assertEquals($exempt, $this->customer->isTaxExempt());
  272:         $this->assertEquals('wholesale', $actual);
  281:         $this->assertEquals('non_exempt', $actual);
  292:         $this->assertEquals($type, $actual);
  305:         $this->assertEquals($certA, $actual[0]);
  306:         $this->assertEquals($certB, $actual[1]);
  331:         $this->assertEquals($expeted, $actual);
  337:         $this->assertTrue($this->customer->getWhiteList());
  338:         $this->assertTrue($this->customer->isWhiteList());
  341:         $this->assertFalse($this->customer->getWhiteList());
  342:         $this->assertFalse($this->customer->isWhiteList());
  353:         $this->assertEquals($value, $actual);
  364:         $this->assertEquals($value, $actual);
  375:         $this->assertEquals($value, $actual);
  382:         $this->assertNull($actual);
  393:         $this->assertEquals($value, $actual);
  400:         $this->assertEquals(0, $actual);
  411:         $this->assertEquals($value, $actual);
  418:         $this->assertNull($actual);
  429:         $this->assertEquals($value, $actual);
  436:         $this->assertNull($actual);
  443:         $this->assertEquals(['ROLE_USER'], $actual);
  455:         $this->assertEquals($salt, $actual);
  462:         $this->assertNull($actual);
  473:         $this->assertEquals($email, $actual);
  480:         $this->assertNull($actual);
  493:         $this->assertCount(2, $actual);
  494:         $this->assertAddressesEqual($addressA, $actual[0]);
  495:         $this->assertAddressesEqual($addressB, $actual[1]);
  506:         $this->assertEquals(3, $actual);
  516:         $this->assertEquals($returned, $actual);
  517:         $this->assertAddressesEqual($address, $actual);
  528:         $this->assertTrue($actual);
  537:         $this->assertFalse($actual);
  548:         $this->assertEquals($notes, $actual);
  559:         $this->assertEquals($email, $actual->getEmailAddress());
  605:         $this->assertEquals(trim($interface->getName()), trim($entity->getName()));
  606:         $this->assertEquals($interface->getCompany(), $entity->getCompany());
  607:         $this->assertEquals($interface->getStreetAddress(), $entity->getStreetAddress());
  608:         $this->assertEquals($interface->getSuburb(), $entity->getSuburb());
  609:         $this->assertEquals($interface->getCity(), $entity->getCity());
  610:         $this->assertEquals($interface->getState(), $entity->getState());
  611:         $this->assertEquals($interface->getZip(), $entity->getZip());
  612:         $this->assertEquals($interface->getPhone(), preg_replace('/[^0-9]/', '', $entity->getPhone()));
  613:         $this->assertEquals($interface->getCountry(), $entity->getCountry());

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Entity/OrdersInvoicesTest.php:
   41:         $this->assertEquals($expected, $actual);
  184:         $this->assertEquals($expected, $invoice->allPickTicketsHaveTracking());
  246:         $this->assertEquals($expectedData, $actual);
  568:         $this->assertNotSame($line, $actual);
  569:         $this->assertEquals($line->getProductId(), $actual->getProductId());
  570:         $this->assertEquals($line->getProductName(), $actual->getProductName());
  571:         $this->assertEquals($line->getSku(), $actual->getSku());
  572:         $this->assertEquals($line->getCost(), $actual->getCost());
  573:         $this->assertEquals($line->getUnit(), $actual->getUnit());
  574:         $this->assertEquals($qty, $actual->getQuantity());

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Entity/OrderTest.php:
   44:         $this->assertEquals($expectedSubtotal, $order->getTotalValue(TotalInterface::TYPE_SUBTOTAL));
   45:         $this->assertEquals($expectedTotal, $order->getTotalValue(TotalInterface::TYPE_TOTAL));
   47:         $this->assertTotalsEqual($expected, $order->getTotals());
  233:         $this->assertEquals(count($order->getLineItems()), $quantity);
  236:         $this->assertEquals(count($order->getLineItems()), 0);
  272:         $this->assertEquals($domain, $order->getStoreFrontName());
  283:         $this->assertEquals($storeId, $order->getStoreId());
  296:         $this->assertEquals($stateCode, $order->getBillingState());
  309:         $this->assertEquals($stateCode, $order->getDeliveryState());
  333:         $this->assertEquals($expected, $actualData, $message);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/EventHandler/InventoryRepriceListenerTest.php:
  44:         $this->assertEquals(
  57:             $this->assertTrue(is_callable([$this->fixture, $method]));

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/EventHandler/NewOrderReserveQtyTest.php:
  123:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/EventHandler/NewOrderSaveAddressTest.php:
   45:         $this->assertInstanceOf(EventSubscriberInterface::class, $this->fixture);
   52:         $this->assertEquals(['onNewOrder' => 'onNewOrder'], $actual);
  208:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/EventHandler/OrderPaidAmountOnPaymentEventTest.php:
  60:                     $self->assertEquals($order, $param);
  71:                     $self->assertEquals($paid, $order->getPaidAmount());
  72:                     $self->assertEquals($result->getSystem(), $order->getPaymentMethod());

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/EventHandler/OrderPaymentUpdateProcessWorkflowTest.php:
  64:         $this->assertNotEquals(
  79:         $this->assertTrue(
  88:         $this->assertTrue(

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/EventHandler/Cost/CostUpdateEventTest.php:
  23:         $this->assertInstanceOf(EventArgs::class, $this->fixture);
  34:         $this->assertSame($cost, $actual);
  45:         $this->assertSame($cost, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/EventHandler/Cost/CostUpdateLogReportFileManagerTest.php:
  60:         $this->assertEquals('dev.s3.amazonaws.com/reports/'.$filename, $result);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/EventHandler/Cost/CostUpdateSubscriberTest.php:
  39:         $this->assertInstanceOf(EventSubscriberInterface::class, $this->fixture);
  49:         $this->assertEquals($expected, $actual);
  80:         $this->assertEquals($url, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Factory/CategoryFactoryTest.php:
   61:         $this->assertEquals($expected, $actual);
  190:         $this->assertEquals($expected, $actual);
  209:         $this->assertEquals($expected, $actual);
  231:         $this->assertEquals([$seek => $expected], $actual);
  328:         $this->assertCount(3, $output);
  330:         $this->assertInstanceOf(Collection::class, $output);
  332:             $this->assertInstanceOf(CategoryComposite::class, $item);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Factory/ProductFactoryModeTest.php:
   52:         $this->assertSame($product, $this->fixture->getProduct($id));
   69:         $this->assertSame([$product], $this->fixture->getProductList([$id]));
   86:         $this->assertSame([$product], $this->fixture->getProductListBySku([$sku]));
  104:         $this->assertSame([$product], $this->fixture->getProductListSlice($start, $count));

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Factory/UspsAddressVerifierFactoryTest.php:
  37:         $this->assertInstanceOf(UspsAddressVerifier::class, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Feed/ContainerAwareFeedRegistryTest.php:
  17:         $this->assertEquals([$name], $fixture->getRegisteredFeedNameList());
  34:         $this->assertIterablesEquals(

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Feed/FeedManagerTest.php:
   51:         $this->assertEquals([], $actual);
   97:         $this->assertEquals(['one', 'two'], $actual, 'Some feeds were removed from the list');
  106:         $this->assertEquals([], $actual, 'Not all feeds removed from list');
  115:         $this->assertEquals([], $actual, 'Not all feeds removed from list');

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Feed/FeedSchedulerTest.php:
   47:         $this->assertEquals($list, $this->fixture->getList());
   48:         $this->logger->assertEmptyLogs();
   60:         $this->logger->assertEmptyLogs();
   74:         $this->logger->assertMessageLogged('error', $reason, ['feedList' => $list]);
  117:         $this->assertEquals(
  127:         $this->logger->assertMessageLogged('info', 'Feeds completed successfully', ['feedList' => $list]);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Feed/Adapter/SitemapTest.php:
  155:         $this->assertEquals($data, $actual);
  189:         $this->assertEquals($data, $actual);
  205:         $this->assertXmlStringEqualsXmlString(trim($expectedIndex), $actualIndex);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Feed/Encoder/AbstractFeedEncoderTestCase.php:
  185:         $this->assertInstanceOf(
  201:         $this->assertEquals($expected, stream_get_contents($dataResponse), $message);
  211:         $this->assertInstanceOf(
  217:         $this->assertTrue(
  287:         $this->assertDataResourceContent($this->expectedEmptyFeed());
  305:         $this->assertFeedReturnValue($returnValue);
  309:         $this->assertDataResourceContent($expected);
  311:         $this->assertEquals(
  337:             $this->assertInstanceOf(
  346:         $this->assertDataResourceContent($expected);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Feed/Encoder/BazaarVoiceFeedEncoderTest.php:
  62:         $this->assertXmlStringEqualsXmlString($expected, $actual, $message);
  68:         $this->assertTrue($valid, 'BazaarVoice feed failed to validate against schema.');

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Feed/Encoder/CommissionJunctionEncoderTest.php:
  69:         $this->assertXmlStringEqualsXmlString($expected, stream_get_contents($dataResponse), $message);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Feed/Encoder/SidecarFeedEncoderTest.php:
  76:         $this->assertXmlStringEqualsXmlFile($expected, stream_get_contents($dataResponse), $message);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Feed/Encoder/SitemapFeedEncoderTest.php:
  47:         $this->assertEquals(0, $this->fixture->getSize());
  51:         $this->assertEquals(0, $this->fixture->getSize());
  55:         $this->assertEquals(1, $this->fixture->getSize());
  57:         $this->assertEquals(2, $this->fixture->getSize());
  61:         $this->assertEquals(2, $this->fixture->getSize());
  65:         $this->assertEquals(0, $this->fixture->getSize());
  74:         $this->assertXmlStringEqualsXmlString($expected, stream_get_contents($dataResponse), $message);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Feed/Encoder/WebCollageFeedEncoderTest.php:
  126:         $this->assertEquals(UrlGeneratorInterface::ABSOLUTE_URL, $absolute, 'Absolute url not generated');
  127:         $this->assertEquals(['ref' => 'unitTest'], $params, 'tracking url pieces not included');

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Feed/Encoder/PromoteIq/CategoryEncoderTest.php:
  54:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Feed/Encoder/PromoteIq/ProductEncoderTest.php:
  162:         $this->assertEquals(UrlGeneratorInterface::ABSOLUTE_URL, $absolute, 'Absolute url not generated');

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Feed/Partitioner/AbstractPartitionerTestCase.php:
  23:         $this->assertInstanceOf(PartitionerInterface::class, $this->fixture);
  40:         $this->assertPartitionEquals($expected, $actual);
  50:         $this->assertContainsOnly(Collection::class, $actual);
  83:         $this->assertEquals($expected, $actualIdList);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Feed/Partitioner/AddEntryListPartitionerDecoratorTest.php:
  27:         $this->assertEquals($expected, $leftOverList->toArray());
  43:         $this->assertEquals($expected, $leftOverList->toArray());

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Feed/Partitioner/BlacklistValuePartitionerTest.php:
   20:         $this->assertOutput($outputList, $fixture->partition($input));
  157:         $this->assertCount(2, $actual, 'Incorrect count of actual elements');
  158:         $this->assertInstanceOf(Collection::class, $actual[0], 'IN result incorrect type');
  159:         $this->assertInstanceOf(Collection::class, $actual[1], 'OUT result incorrect type');
  166:         $this->assertEquals($expected, $actualIdList);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Feed/Partitioner/BooleanAndCollectionTest.php:
   47:         $this->assertEquals(
  144:         $this->assertPartitionEquals([[], [1]], $actual);
  194:         $this->assertEquals($partitioner['in'], $idList);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Feed/Partitioner/BooleanOrCollectionTest.php:
  134:         $this->assertEquals($partitioner['input'], $idList);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Feed/Partitioner/RecentlySoldProductsPartitionerTest.php:
  41:         $this->assertInstanceOf(PartitionerInterface::class, $this->fixture);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Feed/Sender/CollectionSenderTest.php:
  14:         $this->assertInstanceOf(SenderInterface::class, $fixture);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Feed/Sender/CommissionJunctionSenderTest.php:
  47:         $this->assertInstanceOf(SenderInterface::class, $this->fixture);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Feed/Sender/FileStoreSenderTest.php:
  52:         $logs->assertLogsContains('Sent file');

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Feed/Sender/GzipSenderDecoratorTest.php:
  41:         $this->assertInstanceOf(SenderInterface::class, $this->fixture);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Feed/Sender/SerialFileStoreSenderTest.php:
   92:         $this->assertEquals($url, $fileStoreSender->getUrl($count));
  104:         $logs->assertLogsContains('Sent file');

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Feed/Sender/ZipSenderDecoratorTest.php:
  44:         $this->assertInstanceOf(SenderInterface::class, $this->fixture);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Feed/Strategy/AbstractFeedTestCase.php:
  40:         $this->assertInstanceOf(

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/FileParser/ImageTest.php:
  125:         $this->assertEquals($output['primary'], $this->primaryHashs, 'Primary images');
  126:         $this->assertEquals($output['alternates'], $this->alternateHashs, 'Alternate images');

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/FileParser/TrackingTest.php:
  119:         $this->logger->assertEmptyLogs();
  152:         $this->assertSame($trackingList, $calledWith);
  181:         $this->assertFalse($called);
  210:         $this->assertFalse($called);
  235:                     $this->assertTrue($lockStatus['lock']);
  265:             $this->assertTrue($lockStatus['lock']);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Flag/AbstractProxyFlagManagerTest.php:
   35:         $this->assertInstanceOf(FlagManagerInterface::class, $this->fixture);
   47:         $this->assertSame($flag, $this->fixture->getFlag($name));
  100:         $this->assertEquals($result, $this->fixture->hasFlagOnList($type, $flag, $list));
  115:         $this->assertEquals($result, $this->fixture->getFlagListOnList($type, $list));
  129:         $this->assertEquals($result, $this->fixture->getFlagged($type, $flag));

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Flag/ArrayFlagManagerTest.php:
   34:         $this->assertInstanceOf(FlagManagerInterface::class, $this->fixture);
   95:         $this->assertEquals($idList, $actual);
  105:         $this->assertEquals([], $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Flag/ChangeLoggingFlagManagerTest.php:
  59:         $this->assertInstanceOf(FlagManagerInterface::class, $this->fixture);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Flag/DbalFlagManagerTest.php:
   43:         $this->assertInstanceOf(FlagManagerInterface::class, $this->fixture);
   52:         $this->assertEquals($name, $flag->getName());
   74:         $this->assertEquals(
   95:         $this->assertEquals(
  117:         $this->assertEquals(
  140:         $this->assertEquals(
  163:         $this->assertEquals(
  185:         $this->assertEquals(
  206:         $this->assertEquals(
  230:         $this->assertEquals(
  265:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Form/DataTransformer/CsvDataTransformerTest.php:
  24:         $this->assertSame('', $this->fixture->transform(null));
  25:         $this->assertSame('', $this->fixture->transform(''));
  26:         $this->assertSame('', $this->fixture->transform(0));
  27:         $this->assertSame('', $this->fixture->transform([]));
  33:         $this->assertSame($value, $this->fixture->transform($value));
  39:         $this->assertSame(implode(',', $value), $this->fixture->transform($value));
  44:         $this->assertSame([], $this->fixture->reverseTransform(''));
  50:         $this->assertSame($value, $this->fixture->reverseTransform(implode(',', $value)));
  56:         $this->assertSame($value, $this->fixture->reverseTransform(implode(', ', $value)));
  61:         $this->assertSame($value, $this->fixture->reverseTransform(implode(', ,,', $value)));

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Form/DataTransformer/SkuDataTransformerTest.php:
  43:         $this->assertSame('', $this->fixture->transform(null));
  44:         $this->assertSame('', $this->fixture->transform(''));
  45:         $this->assertSame('', $this->fixture->transform(0));
  46:         $this->assertSame('', $this->fixture->transform([]));
  52:         $this->assertSame(
  60:         $this->assertSame([], $this->fixture->reverseTransform(''));
  84:         $this->assertEquals($value, $actualSkuList);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Geolocation/IpLocatorTest.php:
   36:         $this->assertInstanceOf(IpLocatorInterface::class, $this->fixture);
   61:         $this->assertEquals($countryName, $actual);
   74:         $this->assertEquals('', $actual);
   85:         $this->assertEquals('', $actual);
   92:         $this->assertEquals('', $actual);
  106:         $this->assertEquals('United States', $actual);
  141:         $this->assertEquals($isoCode, $actual);
  154:         $this->assertEquals('', $actual);
  165:         $this->assertEquals('', $actual);
  172:         $this->assertEquals('', $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Helper/ParameterInterpreterHelperTest.php:
  17:         $this->assertEquals($param, $actual);
  27:         $this->assertEquals($expected, $actual);
  51:         $this->assertEquals([$id], $actual);
  61:         $this->assertEquals($idList, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Helper/ProductCategoryHelperTest.php:
  210:         $this->assertEquals($expected, $ids);
  269:             $this->assertInstanceOf($entityNames['categories'], $category);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/IdMap/AbstractIdMapTypeDecoratorTest.php:
  42:         $this->assertSame($result, $this->fixture->getOurId($id));
  54:         $this->assertSame($result, $this->fixture->getOurIdList($idList));
  66:         $this->assertSame($result, $this->fixture->getMappedId($id));
  78:         $this->assertSame($result, $this->fixture->getMappedIdList($idList));

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/IdMap/CacheDecoratorTest.php:
   44:         $this->assertSame($result, $this->fixture->getOurId($type, $id));
   57:         $this->assertSame($result, $this->fixture->getOurId($type, $id));
   58:         $this->assertSame($result, $this->fixture->getOurId($type, $id));
   71:         $this->assertSame($result, $this->fixture->getOurIdList($type, $idList));
   84:         $this->assertSame($result, $this->fixture->getOurIdList($type, $idList));
   85:         $this->assertSame($result, $this->fixture->getOurIdList($type, $idList));
   98:         $this->assertSame($result, $this->fixture->getMappedId($type, $id));
  111:         $this->assertSame($result, $this->fixture->getMappedId($type, $id));
  112:         $this->assertSame($result, $this->fixture->getMappedId($type, $id));
  125:         $this->assertSame($result, $this->fixture->getMappedIdList($type, $idList));
  138:         $this->assertSame($result, $this->fixture->getMappedIdList($type, $idList));
  139:         $this->assertSame($result, $this->fixture->getMappedIdList($type, $idList));
  188:         $this->assertEquals([$assigned], $after);
  191:         $this->assertEquals([$assigned], $after);
  240:         $this->assertEquals([$assigned], $after);
  243:         $this->assertEquals([$assigned], $after);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/IdMap/CacheTypeDecoratorTest.php:
   43:         $this->assertSame($result, $this->fixture->getOurId($id));
   55:         $this->assertSame($result, $this->fixture->getOurId($id));
   56:         $this->assertSame($result, $this->fixture->getOurId($id));
   68:         $this->assertSame($result, $this->fixture->getOurIdList($idList));
   80:         $this->assertSame($result, $this->fixture->getOurIdList($idList));
   81:         $this->assertSame($result, $this->fixture->getOurIdList($idList));
   93:         $this->assertSame($result, $this->fixture->getMappedId($id));
  105:         $this->assertSame($result, $this->fixture->getMappedId($id));
  106:         $this->assertSame($result, $this->fixture->getMappedId($id));
  118:         $this->assertSame($result, $this->fixture->getMappedIdList($idList));
  130:         $this->assertSame($result, $this->fixture->getMappedIdList($idList));
  131:         $this->assertSame($result, $this->fixture->getMappedIdList($idList));

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/IdMap/DoctrineIdMapTest.php:
   52:         $this->assertSame($result, $this->fixture->getOurId($type, $id));
   63:         $this->assertSame([], $this->fixture->getOurId($type, $id));
   76:         $this->assertSame($result, $this->fixture->getOurIdList($type, $idList));
   89:         $this->assertSame($result, $this->fixture->getMappedId($type, $id));
  100:         $this->assertSame([], $this->fixture->getMappedId($type, $id));
  113:         $this->assertSame($result, $this->fixture->getMappedIdList($type, $idList));

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/IdMap/IdentityTypeFallbackTest.php:
  27:         $this->assertEquals([], $this->fixture->__invoke($id));
  47:         $this->assertEquals([$id], $this->fixture->__invoke($id));

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/IdMap/IdMapTypeFallbackDecoratorTest.php:
   45:         $this->assertInstanceOf(AbstractIdMapTypeDecorator::class, $this->fixture);
   67:         $this->assertSame($response, $actual);
   78:         $this->assertEquals([$id.'-fallback'], $actual);
   96:         $this->assertEquals([$expected], $actual);
  113:         $this->assertEquals([], $actual);
  137:         $this->assertSame($response, $actual);
  152:         $this->assertEquals($expected, $actual);
  174:         $this->assertEquals($response + [$idB => [$expected]], $actual);
  196:         $this->assertEquals($response + [$idB => []], $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/IdMap/IdMapTypeTest.php:
   39:         $this->assertInstanceOf(IdMapTypeInterface::class, $this->fixture);
   61:         $this->assertSame($response, $actual);
   83:         $this->assertSame($response, $actual);
  105:         $this->assertSame($response, $actual);
  127:         $this->assertSame($response, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/IdMap/IdRangeOffsetMappingFallbackTest.php:
   40:         $this->assertEquals([$this->offsetLow], $actual);
   52:         $this->assertEquals($expected, $actual);
   63:         $this->assertEquals([$id], $actual);
   72:         $this->assertEquals([$this->high], $actual);
   83:         $this->assertEquals([$this->high], $actual);
   94:         $this->assertEquals([$offset], $actual);
  106:         $this->assertEquals([$id], $actual);
  156:         $this->assertEquals([], $fixture->__invoke($id));
  190:         $this->assertEquals([], $fixture->__invoke($offsetHigh));
  200:         $this->assertEquals([], $fixture->__invoke($high));
  210:         $this->assertEquals([], $fixture->__invoke($offsetHigh));
  221:         $this->assertEquals([$offsetHigh - 1], $fixture->__invoke($offsetHigh - 1));

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/IdMap/NullIdMapTypeTest.php:
  25:         $this->assertInstanceOf(IdMapTypeInterface::class, $this->fixture);
  30:         $this->assertSame([], $this->fixture->getOurId($this->anything()));
  35:         $this->assertSame([], $this->fixture->getOurIdList($this->anything()));
  40:         $this->assertSame([], $this->fixture->getMappedId($this->anything()));
  45:         $this->assertSame([], $this->fixture->getMappedIdList($this->anything()));
  50:         $this->assertNull($this->fixture->assign($this->anything(), $this->anything()));
  55:         $this->assertNull($this->fixture->remove($this->anything(), $this->anything()));

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Import/AbstractImportDataRepositoryTest.php:
   41:         $this->assertSame($input, $actual);
   60:         $this->assertCount(
   76:         $this->assertEquals(
  152:         $this->assertEquals(
  160:         $this->assertEquals(

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Manufacturer/ImportDataRepositoryTest.php:
   66:         $this->assertEquals('Manufacturer', $objectType);
   81:         $this->assertNull($object);
  100:         $this->assertEquals($name, $object->getName());
  110:         $this->assertNull($object);
  121:         $this->assertNull($object);
  144:         $this->assertEquals($name, $object->getName());
  158:         $this->assertNull($object);
  182:         $this->assertEquals($name, $object->getName());
  222:         $this->assertEquals($name, $object->getName());
  226:         $this->assertEquals($name, $manufacturer->getName());

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/MinimumStock/MinimumStockProviderTest.php:
  109:         $this->assertEquals($response, $this->fixture->getAvailableCostList($original));
  144:         $this->assertEquals($expected, !empty($actual[$productId]));

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Model/AbstractCostTest.php:
  32:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Model/AddressInterfaceTest.php:
  19:         $this->assertEquals(1, $hit);
  31:         $this->assertEquals(0, $hit);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Model/SupplierDcQtyTest.php:
  30:         $this->assertSame($qty, $actual);
  41:         $this->assertSame($dcCode, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Model/ValidQtyTraitTest.php:
   43:         $this->assertEquals($expected, $actual);
  123:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Model/PaymentDetails/AbstractDecoratorTest.php:
   34:         $this->assertInstanceOf(PaymentDetailsInterface::class, $this->fixture);
   45:         $this->assertEquals($system, $actual);
   56:         $this->assertEquals($token, $actual);
   67:         $this->assertEquals($type, $actual);
   78:         $this->assertSame($address, $actual);
   89:         $this->assertEquals($isExpired, $actual);
  100:         $this->assertEquals($expiration, $actual);
  111:         $this->assertEquals($display, $actual);
  122:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Model/PaymentDetails/AddressDecoratorTest.php:
  40:         $this->assertInstanceOf(AbstractDecorator::class, $this->fixture);
  47:         $this->assertSame($this->address, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Model/PaymentResult/AbstractDecoratorTest.php:
   39:         $this->assertEquals($value, $actual);
   52:         $this->assertEquals($value, $actual);
   65:         $this->assertEquals($value, $actual);
   78:         $this->assertEquals($value, $actual);
   91:         $this->assertEquals($value, $actual);
  104:         $this->assertEquals($value, $actual);
  117:         $this->assertEquals($value, $actual);
  130:         $this->assertEquals($value, $actual);
  143:         $this->assertEquals($value, $actual);
  156:         $this->assertEquals($value, $actual);
  169:         $this->assertEquals($value, $actual);
  182:         $this->assertEquals($value, $actual);
  195:         $this->assertEquals($value, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Model/PaymentResult/AdditionalLogDetailDecoratorTest.php:
   46:         $this->assertEquals($value, $actual);
   59:         $this->assertEquals($value, $actual);
   72:         $this->assertEquals($value, $actual);
   85:         $this->assertEquals($value, $actual);
   98:         $this->assertEquals($value.PHP_EOL.$this->additionalLogDetail, $actual);
  111:         $this->assertEquals($value, $actual);
  124:         $this->assertEquals($value, $actual);
  137:         $this->assertEquals($value, $actual);
  150:         $this->assertEquals($value, $actual);
  163:         $this->assertEquals($value, $actual);
  176:         $this->assertEquals($value, $actual);
  189:         $this->assertEquals($value, $actual);
  202:         $this->assertEquals($value, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Model/PaymentResult/SystemNameDecoratorTest.php:
  37:         $this->assertInstanceOf(AbstractDecorator::class, $this->fixture);
  44:         $this->assertEquals($this->name, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Model/PaymentResult/TokenPaymentResultDecoratorTest.php:
  19:         $this->assertSame($token, $fixture->getToken());

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Order/AddressFormatterTest.php:
   66:         $this->assertEquals(['', '', ''], $actual);
   82:         $this->assertEquals([$streetAddress, $suburb, ''], $actual);
   99:         $this->assertEquals($expected, $actual);
  116:         $this->assertEquals($expected, $actual);
  211:         $this->assertEquals(['', '', ''], $actual);
  225:         $this->assertEquals(['PO '.$purchaseOrderNumber, '', ''], $actual);
  243:         $this->assertEquals([$company, $name, 'PO '.$purchaseOrderNumber], $actual);
  259:         $this->assertEquals(['', '', ''], $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Order/AddressingUtilityTest.php:
  40:         $this->assertEquals($expected, $this->fixture->getTransactionalEmail($order));

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Order/DuplicatorTest.php:
  153:         $this->assertSame($clone, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Order/FlagUtilityTest.php:
  41:         $this->assertEquals($expected, $actual);
  66:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Order/HelperTest.php:
   59:         $this->assertEquals($expected, $actual);
  221:         $this->assertFalse($actual);
  236:         $this->assertEquals($expected, $actual);
  268:         $this->assertEquals($expected, $actual);
  338:         $this->assertEquals($expected, $actual);
  366:         $this->assertEquals($expected, $this->fixture->hasAnyRefunds($order));

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Order/InTransitCheckTest.php:
  26:         $this->assertFalse(($this->fixture)($order));
  33:         $this->assertFalse(($this->fixture)($order));
  40:         $this->assertTrue(($this->fixture)($order));
  52:         $this->assertTrue(($this->fixture)($order));

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Order/InventoryReleaseConsumerTest.php:
   54:         $this->assertInstanceOf(TaskConsumerInterface::class, $this->fixture);
  195:         $this->assertEquals($expected, $actual);
  205:         $this->assertEquals(ConsumerResponseInterface::MSG_ACK, $actual);
  219:         $this->assertEquals(ConsumerResponseInterface::MSG_REJECT, $actual);
  238:         $this->assertEquals(ConsumerResponseInterface::MSG_REJECT, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Order/OrderServiceTest.php:
   88:         $this->assertEquals($expectedA, $actualA);
   91:         $this->assertEquals($expectedB, $actualB);
  116:         $this->assertEqualsKeysFromEvent($expectedKeyList, $spy);
  186:         $this->assertInstanceOf(Order::class, $actual);
  187:         $this->assertEquals($storeEntity, $actual->getStore());
  196:         $this->assertInstanceOf(Order::class, $actual);
  221:         $this->assertEquals(
  246:         $this->assertCount(count($cartLineList), $actualLineList);
  248:             $this->assertInstanceOf(OrderLineItem::class, $line);
  249:             $this->assertEquals($productIdList[$index], $actualLineList[$index]->getProductId());
  250:             $this->assertEquals($flagsList[$index], $actualLineList[$index]->getFlags());
  272:         $this->assertEquals($flags, $actualLineList[0]->getFlags());
  307:         $this->assertEquals(
  350:         $this->assertTrue($lineItem->hasFlags(CartInterface::MFGDIR));
  351:         $this->assertEquals($productId, $lineItem->getProductId());
  399:         $this->assertEquals($order, $parameters->order);
  400:         $this->assertEquals($expected['forceReview'], $parameters->forceReview);
  401:         $this->assertEquals($expected['manualEntry'], $parameters->manualEntry);
  402:         $this->assertEquals($expected['skipEmail'], $parameters->skipEmail);
  403:         $this->assertEquals($expected['taxExempt'], $parameters->taxExempt);
  404:         $this->assertEquals($expected['saveBilling'], $parameters->saveBilling);
  405:         $this->assertEquals($expected['saveShipping'], $parameters->saveShipping);
  406:         $this->assertEquals($expected['saveChannels'], $parameters->saveChannels);
  407:         $this->assertEquals($expected['hasLoadingDock'], $parameters->hasLoadingDock);
  588:         $this->assertSame($order, $actual->order);
  589:         $this->assertEquals($id, $actual->orderId);
  590:         $this->assertNull($actual->success);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Order/ProductSupplierTest.php:
   59:         $this->assertEquals([], $actual);
   81:         $this->assertEquals([], $actual);
  129:         $this->assertContainsOnlyInstancesOf(SupplierAccountInterface::class, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Order/RemainingBalanceInvoicerTest.php:
    63:         $this->assertInstanceOf(OrdersInvoices::class, $actual);
    91:         $this->assertInvoiceLineProductIdAndQuantity($expected, $actual);
   121:         $this->assertInvoiceLineProductIdAndQuantity($expected, $actual);
   147:         $this->assertInvoiceLineProductIdAndQuantity($expected, $actual);
   189:         $this->assertInvoiceLineProductIdAndQuantity($expected, $actual);
   220:         $this->assertEmpty($actual->getInvoiceLines());
   246:         $this->assertEmpty($actual->getInvoiceLines());
   777:         $this->assertInvoiceLineProductIdAndQuantity($expected, $actual);
   805:         $this->assertInvoiceLineProductIdAndQuantity($expected, $actual);
  1341:         $this->assertEmpty($actual->getInvoiceLines());
  1427:         $this->assertInvoiceLineProductIdAndQuantity($expected, $actual);
  1466:         $this->assertInvoiceLineProductIdAndQuantity($expected, $actual);
  1479:         $this->assertInvoiceLineProductIdAndQuantity($expected, $actual);
  1536:         $this->assertInvoiceLineProductIdAndQuantity($expected, $actual);
  1593:         $this->assertInvoiceLineProductIdAndQuantity($expected, $actual);
  1651:         $this->assertInvoiceLineProductIdAndQuantity($expected, $actual);
  1708:         $this->assertInvoiceLineProductIdAndQuantity($expected, $actual);
  1756:         $this->assertInvoiceLineProductIdAndQuantity($expected, $actual);
  1805:         $this->assertInvoiceLineProductIdAndQuantity($expected, $actual);
  1888:         $this->assertEquals($expectedStructure, $actualInvoiceDataList);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Order/RestrictedSalesTest.php:
  71:         $this->assertEquals($expected, $actual);
  83:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Order/SelectorTest.php:
    64:         $this->assertInstanceOf(QueryBuilder::class, $this->fixture);
    76:         $this->assertSimpleFiltering(
    96:         $this->assertResult($expected, $selector);
   235:         $this->assertResult($expected, $selector);
   335:         $this->assertSimpleFiltering(
   353:         $this->assertSimpleFiltering(
   371:         $this->assertSimpleFiltering(
   392:         $this->assertResult($expected, $selector);
   470:         $this->assertResult($expected, $selector);
   549:         $this->assertResult($expected, $selector);
   636:         $this->assertResult($expected, $selector);
   714:         $this->assertResult($expected, $selector);
   795:         $this->assertResult($expected, $selector);
   964:         $this->assertResult($expected, $selector);
  1127:         $this->assertResult($expected, $selector);
  1287:         $this->assertResult($expected, $selector);
  1615:         $this->assertSimpleFiltering(
  1811:         $this->assertSimpleFiltering(
  1833:         $this->assertResult($expected, $selector);
  2041:         $this->assertResult($expected, $selector);
  2193:         $this->assertResult($expected, $selector);
  2317:         $this->assertResult($expected, $selector);
  2373:         $this->assertFalse($this->fixture->isOrderIdSearch());
  2377:         $this->assertTrue($this->fixture->isOrderIdSearch());
  2393:         $this->assertResult($expected, $actual);
  2438:         $this->assertFalse($this->fixture->isOrderIdSearch());
  2442:         $this->assertTrue($this->fixture->isOrderIdSearch());
  2458:         $this->assertResult($expected, $actual);
  2551:         $this->assertSimpleFiltering(
  2580:         $this->assertEquals($orderIdList, $actualOrderIdList);
  2581:         $this->assertSame($this->fixture, $actual);
  2678:         $this->assertEquals($expected, $actualOrderIdList);
  2679:         $this->assertSame($this->fixture, $actual);
  2744:         $this->assertEquals($expected, $actualOrderIdList);
  2745:         $this->assertSame($this->fixture, $actual);
  2769:         $this->assertResult($expected, $selector);
  2793:         $this->assertResult($expected, $selector);
  2809:         $this->assertEquals($expected, $actualOrderIdList);
  2810:         $this->assertSame($this->fixture, $selector);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Order/SummaryFactoryTest.php:
   37:         $this->assertTotals($expected, $actual);
  301:         $this->assertEquals($expected, $actual);
  368:         $this->assertEquals($expected, $actual);
  606:         $this->assertEquals($expected, $trimmedActual, $message);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Order/Duplicator/CartGeneratorTest.php:
   85:         $this->assertEquals([$idA, $idB], $actual->getArrayCopy());
  271:         $this->assertInstanceOf(CartInterface::class, $actual);
  285:         $this->assertInstanceOf(CartInterface::class, $actual);
  286:         $this->assertEquals($order->getLineItems(), $actual->getLineItems());

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Order/Tracking/UrlGeneratorTest.php:
  76:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/PHPUnit/CartStorageTest.php:
   34:         $this->assertInstanceOf(Cart::class, $cartA);
   35:         $this->assertNotEmpty($cartA->getCartId());
   38:         $this->assertInstanceOf(Cart::class, $cartB);
   39:         $this->assertNotEmpty($cartB->getCartId());
   41:         $this->assertFalse($cartA === $cartB, 'New cart returned a duplicate instance');
   42:         $this->assertNotEquals($cartA->getCartId(), $cartB->getCartId(), 'Both carts');
   53:         $this->assertNotEmpty($cartId);
   54:         $this->assertEquals($cartId, $newCartId);
   61:         $this->assertEquals($cartId, $cart->getCartId());
   62:         $this->assertEquals($tag, $cart->getAgent());
   71:         $this->assertNull($cart);
   88:         $this->assertEquals($cartId, $cart->getCartId());
   89:         $this->assertEquals($cid, $cart->getCustomerId());
   97:         $this->assertNull($cart);
  100:         $this->assertNull($cart);
  131:         $this->assertEquals($cartId, $newCartId);
  138:         $this->assertEquals($cartId, $cart->getCartId());
  139:         $this->assertEquals($cid, $cart->getCustomerId());
  140:         $this->assertEquals($prodId, $cart->getLineItems()[0]->getProductId());
  141:         $this->assertEquals($qty, $cart->getLineItems()[0]->getQuantity());

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/PricePoint/AbstractProxyPricePointProviderTest.php:
  46:         $this->assertSame($expected, $this->fixture->getAvailablePrices($product, $bulk));
  61:         $this->assertSame($expected, $this->fixture->getPrice($product, $qty, $bulk));
  75:         $this->assertSame($expected, $this->fixture->getPriceList([$product], $bulk));
  89:         $this->assertSame($nextPrice, $this->fixture->getNextPrice($product, $priorPrice));

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/PricePoint/CompoundPricePointProviderTest.php:
   45:         $this->assertInstanceOf(PricePointProviderInterface::class, $this->fixture);
   63:         $this->assertSame($expected, $actual);
   83:         $this->assertSame($expected, $actual);
   93:         $this->assertSame([], $actual);
  112:         $this->assertSame($expected, $actual);
  133:         $this->assertSame($expected, $actual);
  144:         $this->assertNull($actual);
  168:         $this->assertSame($expected, $actual);
  209:         $this->assertSame($expected, $actual);
  235:         $this->assertSame($expected, $actual);
  251:         $this->assertSame([], $actual);
  269:         $this->assertSame($expected, $actual);
  289:         $this->assertSame($expected, $actual);
  299:         $this->assertNull($actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/PricePoint/LimitedOverPricePricePointProviderTest.php:
  60:         $this->assertSame($nextPrice, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/PricePoint/LossLeaderPricePointProviderTest.php:
   53:         $this->assertInstanceOf(PricePointProviderInterface::class, $this->fixture);
   63:         $this->assertEquals([], $actual);
  113:         $this->assertEquals([], $actual);
  123:         $this->assertEquals(['price point'], $actual);
  142:         $this->assertGenericPricePoint($actual[0], 1, 10, 50, 5, $endDate);
  168:         $this->assertEquals($expected, $actual[0]->getFlags());
  218:         $this->assertGenericPricePoint($actual[0], 0, INF, 0, 0, $expectedDate);
  239:         $this->assertCount(2, $actual);
  240:         $this->assertContainsOnlyInstancesOf(GenericPricePoint::class, $actual);
  282:         $this->assertInstanceOf(PricePointInterface::class, $actual);
  283:         $this->assertEquals($quotePriceAmount, $actual->getPrice());
  313:         $this->assertEquals($expected, $actual->getPrice());
  359:         $this->assertEquals($expected, $actual->getMaxQty());
  413:         $this->assertInstanceOf(GenericPricePoint::class, $actual);
  414:         $this->assertEquals($price, $actual->getPrice());
  436:         $this->assertEquals($priceA, $actual->getPrice());
  447:         $this->assertSame($price, $actual);
  457:         $this->assertNull($actual);
  574:         $this->assertContainsOnlyInstancesOf(PricePointInterface::class, $responseList);
  575:         $this->assertEquals($expected, $actual);
  675:         $this->assertEquals($price, $actual);
  704:         $this->assertInstanceOf(GenericPricePoint::class, $actual);
  705:         $this->assertEquals($minQty, $actual->getMinQty());
  706:         $this->assertEquals($maxQty, $actual->getMaxQty());
  707:         $this->assertEquals($price, $actual->getPrice());
  708:         $this->assertEquals($blockSize, $actual->getBlockSize());
  709:         $this->assertEquals(CartFlagsInterface::LOSSLEADER | CartFlagsInterface::COUPON_IGNORE, $actual->getFlags());
  710:         $this->assertEquals('loss leader', $actual->getChannel());
  711:         $this->assertEquals($expiresOn, $actual->getExpiresOn());

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/PricePoint/MapPricePointProviderTest.php:
   46:         $this->assertInstanceOf(PricePointProviderInterface::class, $this->fixture);
   74:         $this->assertSame($actual, $pricePointList);
   89:         $this->assertSame($actual, $pricePointList);
  108:         $this->assertSame($actual, $pricePointList);
  128:         $this->assertSame($actual, $pricePointList);
  174:         $this->assertCount(count($pricePointList) + 1, $actual);
  175:         $this->assertArraySubset($pricePointList, $actual);
  178:         $this->assertInstanceOf(PricePointInterface::class, $mapPricePoint);
  179:         $this->assertEquals($map, $mapPricePoint->getPrice());
  227:         $this->assertSame($pricePoint, $actual);
  237:         $this->assertNull($actual);
  256:         $this->assertSame($actual, $pricePoint);
  275:         $this->assertSame($actual, $pricePoint);
  294:         $this->assertPricePointExtendsBase($map, $actual, $pricePoint);
  322:         $this->assertSame($pricePointList, $actual);
  335:         $this->assertEquals([], $actual);
  360:         $this->assertSame($actual, $pricePointList);
  393:         $this->assertCount(count($pricePointList), $actual);
  394:         $this->assertArraySubset([$productIdA => $pricePointList[$productIdA]], $actual);
  395:         $this->assertArraySubset([$productIdC => $pricePointList[$productIdC]], $actual);
  399:         $this->assertPricePointExtendsBase($mapB, $mapPricePoint, $basePricePoint);
  415:         $this->assertSame($nextPricePoint, $actual);
  431:         $this->assertEquals($price, $actual->getPrice(), 'invalid price');
  432:         $this->assertEquals($basePricePoint->getMinQty(), $actual->getMinQty(), 'invalid min qty');
  433:         $this->assertEquals($basePricePoint->getMaxQty(), $actual->getMaxQty(), 'invalid max qty');
  434:         $this->assertEquals($basePricePoint->getBlockSize(), $actual->getBlockSize(), 'invalid block size');
  435:         $this->assertEquals($basePricePoint->getChannel(), $actual->getChannel(), 'invalid channel');
  436:         $this->assertEquals($basePricePoint->getExpiresOn(), $actual->getExpiresOn(), 'invalid expires on');
  437:         $this->assertEquals($basePricePoint->getFlags(), $actual->getFlags(), 'invalid flags');

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/PricePoint/NullPricePointProviderTest.php:
  31:         $this->assertEquals($productInitial, $product);
  32:         $this->assertEquals($bulkInitial, $bulk);
  35:         $this->assertEquals([], $actual);
  47:         $this->assertEquals($productInitial, $product);
  48:         $this->assertEquals($qtyInitial, $qty);
  49:         $this->assertEquals($bulkInitial, $bulk);
  52:         $this->assertNull($actual);
  63:         $this->assertEquals($productListInitial, $productList);
  64:         $this->assertEquals($bulkInitial, $bulk);
  67:         $this->assertEquals([], $actual);
  78:         $this->assertEquals($productInitial, $product);
  79:         $this->assertEquals($priceInitial, $price);
  82:         $this->assertEquals(null, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/PricePoint/OverCostPricePointProviderTest.php:
   44:         $this->assertEquals([], $this->fixture->getAvailablePrices(rand(), true));
   54:         $this->assertEquals([], $this->fixture->getAvailablePrices($productId));
  102:         $this->assertPricePointList($expected, $this->fixture->getAvailablePrices($productId));
  150:         $this->assertNull($this->fixture->getPrice(rand(), 1, true));
  162:         $this->assertNull($actual);
  201:         $this->assertEquals($expected, $actual->getPrice());
  328:         $this->assertEquals([], $this->fixture->getPriceList([rand()], true));
  352:         $this->assertPricePointList($expected, $actual);
  489:         $this->assertNull($this->fixture->getNextPrice(rand(), $pricePoint));
  603:         $this->assertEquals($expectedPriceDataList, $actualPriceDataList);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/PricePoint/OverPricePricePointProviderTest.php:
   69:         $this->assertEqualsWithDelta($price->getPrice() * $this->multiplier, $actualPrice, 0.01);
  101:         $this->assertEqualsWithDelta($price->getPrice() * $this->multiplier, $actualPrice, 0.01);
  132:         $this->assertEqualsWithDelta($price->getPrice() * $this->multiplier, $actualPrice, 0.01);
  150:         $this->assertEqualsWithDelta($priorPrice->getPrice() / $this->multiplier, $actualPrice, 0.01);
  167:         $this->assertEqualsWithDelta($nextPrice->getPrice() * $this->multiplier, $actualPrice, 0.01);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/PricePoint/RepriceConsumerTest.php:
   58:         $this->assertInstanceOf(TaskConsumerInterface::class, $actual);
   71:         $this->assertEquals(ConsumerResponseInterface::MSG_REJECT, $actual);
   84:         $this->assertEquals(ConsumerResponseInterface::MSG_REJECT, $actual);
   98:         $this->assertEquals(ConsumerResponseInterface::MSG_REJECT, $actual);
  120:         $this->assertEquals(ConsumerResponseInterface::MSG_REJECT, $actual);
  156:         $this->assertEquals(ConsumerResponseInterface::MSG_ACK, $actual);
  194:         $this->assertEquals(ConsumerResponseInterface::MSG_REJECT, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Product/CostManagementTest.php:
   80:         $this->assertEmpty($actual);
  123:         $this->assertEquals([$productId], $actual);
  131:         $this->assertEmpty($actual);
  172:         $this->assertEquals([$productId], $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Product/EmbeddableMediaFactoryTest.php:
   45:         $this->assertInstanceOf(EmbeddableMedia::class, $actual);
   62:         $this->assertEquals($expected, $actual->getEmbedUrl());
   80:         $this->assertEquals($expected, $actual->getEmbedUrl());
   97:         $this->assertEquals($expected, $actual->getEmbedUrl());
  111:         $this->assertEquals($expected, $actual->getMediaType());
  125:         $this->assertEquals($expected[0], $actual->getMediaService());
  126:         $this->assertEquals($expected[1], $actual->getEmbedUrl());
  161:         $this->assertEquals($expected[0], $actual->getMediaService());
  162:         $this->assertEquals($expected[1], $actual->getEmbedUrl());

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Product/ImportDataRepositoryTest.php:
   106:         $this->assertEquals('Product', $objectType);
   121:         $this->assertNull($object);
   140:         $this->assertEquals($name, $object->getName());
   151:         $this->assertNull($object);
   176:         $this->assertEquals($name, $object->getName());
   201:         $this->assertEquals($name, $object->getName());
   249:         $this->assertEquals($name, $object->getName());
   293:         $this->assertEquals($name, $object->getName());
   338:         $this->assertEquals($name, $object->getName());
   442:         $this->assertNull($object);
   481:         $this->assertEquals($name, $object->getName());
   564:         $this->assertEquals($name, $object->getName());
   602:         $this->assertEquals($name, $object->getName());
   927:         $this->assertEquals($name, $object->getName());
   931:         $this->assertEquals($name, $product->getName());
   981:         $this->assertNotEmpty($costList[0]->getProductId());
   982:         $this->assertEquals($object->getId(), $costList[0]->getProductId());
  1071:         $this->assertEquals($upsOk, $costList[0]->getUpsOk());
  1121:         $this->assertEquals('-', $costList[0]->getUpsOk());
  1167:         $this->assertCount(1, $costList);
  1168:         $this->assertEquals($productId, $costList[0]->getProductId());
  1169:         $this->assertEquals($accountId, $costList[0]->getSupplierAccountsId());
  1170:         $this->assertEquals(
  1225:         $this->assertCount(1, $costList);
  1226:         $this->assertEquals($upsOk, $costList[0]->getUpsOk());
  1279:         $this->assertCount(1, $costList);
  1280:         $this->assertEquals($productId, $costList[0]->getProductId());
  1328:                 $this->assertEquals($productId, $parameterList[0]);
  1334:         $this->assertTrue($flushed, 'Did not flush queued request');
  1336:         $this->assertEquals(
  1443:         $this->assertEquals(
  1499:         $this->assertEquals(

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Product/Availability/DetailSpecifierTest.php:
  142:         $this->assertArraySubset($expected, $actual);
  184:         $this->assertArraySubset($expected, $actual);
  239:         $this->assertArraySubset($expected, $actual);
  280:         $this->assertArraySubset($expected, $actual);
  364:         $this->assertArraySubset($expected, $actual);
  413:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Product/Availability/NullifyFlaggedDecoratorTest.php:
   82:         $this->assertEquals($expected, $actual);
   92:         $this->assertFalse($actual);
  131:         $this->assertEquals($expected, $actual);
  143:         $this->assertEquals([true, false], $actual);
  160:         $this->assertEquals([$idA => false, $idB => true], $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Product/Availability/RegionalAvailabilityDeterminerTest.php:
   92:         $this->assertFalse($actual);
  118:         $this->assertFalse($actual);
  147:         $this->assertTrue($actual);
  176:         $this->assertFalse($actual);
  197:         $this->assertFalse($actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Product/Flag/Provider/CacheDecoratorTest.php:
  200:         $this->assertSame($flagList, $actual);
  399:         $this->assertEquals($response, $actual);
  453:         $this->assertEquals([$idA, $idB], $actual);
  512:         $this->assertEquals($data, $actual);
  586:         $this->assertEquals([$idA, $idB], $actual);
  675:         $this->assertEquals([$idA => true, $idB => false], $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Product/Media/TvPageFetcherTest.php:
   98:         $this->assertSame($video, $actual);
  109:         $this->assertNull($actual);
  126:         $this->assertInstanceOf(EmbeddableMedia::class, $actual);
  127:         $this->assertEquals($url, $actual->getEmbedUrl(), 'wrong url');
  128:         $this->assertEquals($type, $actual->getMediaType(), 'wrong type');
  129:         $this->assertNull($actual->getMediaService(), 'wrong service');
  154:         $this->assertSame($expected, $actual);
  211:         $this->assertNull($actual);
  281:         $this->assertNull($actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Product/Media/Import/MediaConsumerTest.php:
   60:         $this->assertInstanceOf(SqsConsumerInterface::class, $this->fixture);
   96:         $this->assertEquals(SqsConsumerInterface::MSG_REJECT, $actual);
  141:         $this->assertEquals(SqsConsumerInterface::MSG_REQUEUE_SHUTDOWN, $actual);
  154:         $this->assertEquals(SqsConsumerInterface::MSG_ACK, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Product/Media/Import/MediaDownloaderTest.php:
   54:         $this->assertEquals($url, $actual);
  107:         $this->assertEquals($cached, $actual);
  190:         $this->assertEquals($cached, $actual);
  223:         $this->assertEquals($cached, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Product/Media/Import/MediaProducerTest.php:
  37:         $this->assertSame($source, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Product/Review/BazaarVoiceConsumerTest.php:
   53:         $this->assertInstanceOf(S3ConsumerInterface::class, $this->fixture);
   70:         $this->assertEquals($expected, $actual);
   71:         $this->logs->assertLogsContains('Clearing unseen product review counts');
   89:         $this->assertEquals($expected, $actual);
   90:         $this->logs->assertLogsContains('Clearing unseen product review counts');
  108:         $this->assertEquals($expected, $actual);
  109:         $this->logs->assertEmptyLogs();
  127:                             $test->assertStringStartsWith('file:///tmp/BazaarVoiceProductRating', $arg, 'Bad filename');
  138:         $this->assertEquals($expected, $actual);
  157:                             $test->assertStringStartsWith('compress.zlib:///tmp/BazaarVoiceProductRating', $arg, 'Bad filename');
  168:         $this->assertEquals($expected, $actual);
  186:         $this->assertEquals($expected, $actual);
  223:                         $test->assertInstanceOf(XmlReader::class, $arg);
  225:                             $test->assertArraySubset(
  241:         $this->assertEquals($expected, $actual);
  256:         $this->assertEquals($expected, $actual);
  257:         $this->logs->assertEmptyLogs();
  293:         $this->logs->assertLogsContains('Clearing unseen product review counts');
  294:         $this->logs->assertLogsContains('Cleared '.$clearCount.' unseen product review counts');

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Provider/CategoryPagingIteratorTest.php:
  101:         $this->assertEquals(50, $cartegoriesDefault->count());
  114:         $this->assertEquals(0, $cartegoriesDefault->count());
  137:         $this->assertCount(10, $categoriesSizeTen);
  143:         $this->assertCount(50, $categoriesSizeFalse);
  149:         $this->assertCount(50, $categoriesSizeCat);
  171:         $this->assertCount(10, $iteratorSizeTen);
  179:         $this->assertCount(13, $actual);
  218:         $this->assertEquals(4, $spy->getInvocationCount());
  220:         $this->assertEquals([$startingPoint - 1, 51], $invocationList[0]->getParameters());
  221:         $this->assertEquals([$endPoint, 51], $invocationList[1]->getParameters());
  223:         $this->assertEquals([null, 51], $invocationList[2]->getParameters());
  224:         $this->assertEquals([$endPoint, 51], $invocationList[3]->getParameters());
  245:         $this->assertEquals(0, $iterator->key());
  248:         $this->assertEquals(0, $iterator->key());
  251:         $this->assertEquals(0, $iterator->key());
  254:         $this->assertEquals(0, $iterator->key());
  257:         $this->assertEquals(1, $iterator->key());
  261:         $this->assertEquals(2, $iterator->key());
  264:         $this->assertEquals(0, $iterator->key());
  266:         $this->assertNotEquals(
  298:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Provider/DeltaInventoryPagingIteratorTest.php:
  113:         $this->assertCount(50, $actual);
  125:         $this->assertCount($pageSize, $actual);
  135:         $this->assertCount($maxPages, $this->fixture);
  144:         $this->assertEquals(0, $iterator->key());
  146:         $this->assertEquals(0, $iterator->key());
  148:         $this->assertEquals(0, $iterator->key());
  150:         $this->assertEquals(0, $iterator->key());
  152:         $this->assertEquals(1, $iterator->key());
  155:         $this->assertEquals(2, $iterator->key());
  157:         $this->assertEquals(0, $iterator->key());
  158:         $this->assertNotEquals(
  195:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Provider/EntityListPagingIteratorTest.php:
   35:         $this->assertEquals(count($expectedCalls), $spy->getInvocationCount());
   40:         $this->assertEquals($expectedCalls, $actualCalls);
  101:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Provider/ProductPagingIteratorTest.php:
   84:         $this->assertCount(50, $actual);
  106:         $this->assertCount($expected, $actual);
  142:         $this->assertCount($maxPages, $this->fixture);
  174:         $this->assertEquals(4, $spy->getInvocationCount());
  176:         $this->assertEquals([$startingPoint - 1, 51], $invocationList[0]->getParameters());
  177:         $this->assertEquals([$endPoint, 51], $invocationList[1]->getParameters());
  179:         $this->assertEquals([null, 51], $invocationList[2]->getParameters());
  180:         $this->assertEquals([$endPoint, 51], $invocationList[3]->getParameters());
  199:         $this->assertEquals(2, $this->fixture->key());
  204:         $this->assertEquals(0, $this->fixture->key());
  205:         $this->assertNotEquals(
  237:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Provider/RelatedProductProviderTest.php:
   89:         $this->assertEquals($productList, $actual->toArray());
  109:         $this->assertEquals($productList, $actual->toArray());
  129:         $this->assertEquals([$productList[0]], $actual->toArray());

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Report/CostInventoryLimitFreightReporterTest.php:
   91:         $this->assertInstanceOf(CostInventoryReporter::class, $this->fixture);
  111:         $this->assertCostList($expected, $this->fixture->getAvailableCostList([$search]));
  377:         $this->assertCostList($expected, $this->fixture->getAvailableCostList([$search], $qty));
  529:                 $this->assertEquals($productId, $row->getProductId(), 'Cost not grouped correctly');
  540:         $this->assertEquals($expected, $actualSummary);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Report/CostInventoryReporterTest.php:
  110:         $this->assertCostList($expected, $this->fixture->getAvailableCostList([$search]));
  395:         $this->assertCostList($expected, $this->fixture->getAvailableCostList([$search], $qty));
  575:                 $this->assertEquals($productId, $row->getProductId(), 'Cost not grouped correctly');
  586:         $this->assertEquals($expected, $actualSummary);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Report/NewOrderReporterTest.php:
   96:         $this->assertEquals([1, 2, 3], $result);
  136:         $this->assertEqualOrderArrays(
  171:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Report/OrderReporterTest.php:
   63:         $this->assertInstanceOf(OrderReporterInterface::class, $this->fixture);
   91:         $this->assertEquals([1, 2, 3], $result);
  112:         $this->assertEquals([1, 2, 3, 4, 5, 7], $result);
  145:         $this->assertEqualCustomerArrays($expected, $result->toArray());
  163:         $this->assertEquals([1, 2, 3, 4], $result);
  187:         $this->assertEqualOrderArrays($expected, $result->toArray());
  206:         $this->assertEquals($expected, $actual);
  240:             $this->assertEquals($expected[$index]['StoreId'], $result->getstoreId());
  241:             $this->assertEquals($expected[$index]['Newsletter'], $result->getNewsletter()[0]);
  242:             $this->assertEquals($expected[$index]['CompetitorSavings'], $result->getCompetitorSavings());
  243:             $this->assertEquals($expected[$index]['ExpressProcessing'], $result->getExpressProcessing());
  244:             $this->assertEquals($expected[$index]['ExemptionType'], $result->getExemptionType());
  245:             $this->assertEquals($expected[$index]['Firstname'], $result->getFirstname());
  246:             $this->assertEquals($expected[$index]['Lastname'], $result->getLastname());
  247:             $this->assertEquals($expected[$index]['EmailAddress'], $result->getEmailAddress());

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Report/Type/MapViolationReportTest.php:
   94:         $this->assertEquals($expected, $this->fixture->validate($task));
  189:         $this->assertStringContainsString('violation', $result);
  190:         $this->assertStringNotContainsString('good', $result);
  191:         $this->assertStringNotContainsString('no-map', $result);
  192:         $this->assertStringNotContainsString('unpriced', $result);
  193:         $this->assertStringNotContainsString('map-hidden', $result);
  194:         $this->assertStringNotContainsString('user-login', $result);
  213:         $this->assertEquals($this->notify, $event['data']['to']);
  214:         $this->assertEquals($count, $event['data']['resultCount']);
  215:         $this->assertEquals($this->filestore->getUrl($task->getStoreAt()), $event['data']['fileUrl']);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Repository/AccountRepositoryTest.php:
   80:         $this->assertInstanceOf(RWEntityRepository::class, $this->fixture);
   89:         $this->assertInstanceOf(SupplierAccount::class, $actual);
   99:         $this->assertCount($count, $actual);
  100:         $this->assertContainsOnlyInstancesOf(SupplierAccount::class, $actual);
  118:         $this->assertCount($supplierCountB, $actual);
  119:         $this->assertContainsOnlyInstancesOf(SupplierAccount::class, $actual);
  149:         $this->assertSame($expected, $actual);
  186:         $this->assertInstanceOf(SupplierAccount::class, $actual);
  187:         $this->assertSame($supplierId, $actual->getSupplierId());
  188:         $this->assertSame($accountNumber, $actual->getAccountNumber());
  202:         $this->assertInstanceOf(SupplierAccount::class, $actual);
  203:         $this->assertSame($supplierId, $actual->getSupplierId());
  204:         $this->assertSame($accountNumber, $actual->getAccountNumber());
  230:         $this->assertEquals($expected, $actual);
  255:         $this->assertEquals($expected, array_keys($actual));
  256:         $this->assertContainsOnlyInstancesOf(SupplierAccount::class, $actual);
  287:         $this->assertEquals([2, 3], $actual);
  311:         $this->assertEquals([1, 3], $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Repository/AddressBookRepositoryTest.php:
  36:         $this->assertInstanceOf(RWEntityRepository::class, $this->fixture);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Repository/AttributeRepositoryTest.php:
   44:         $this->assertInstanceOf(RWEntityRepository::class, $this->fixture);
   74:         $this->assertEquals($expected, $actual);
  124:         $this->assertContainsOnlyInstancesOf(Attributenames::class, $actual);
  125:         $this->assertEquals($expected, array_keys($actual));
  187:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Repository/BannerRepositoryTest.php:
   42:         $this->assertInstanceOf(EntityRepository::class, $this->fixture);
   62:         $this->assertBannerListFound($expectedIdList, [$region => [$result]]);
   77:             $this->assertContainsOnlyInstancesOf(Banner::class, $result[Banner::REGION_COUPON_GLOBAL]);
   80:         $this->assertBannerListFound($expectedIdList, $result);
  100:             $this->assertContainsOnlyInstancesOf(Banner::class, $result[Banner::REGION_DESKTOP_HERO]);
  103:         $this->assertBannerListFound($expectedIdList, $result);
  123:             $this->assertContainsOnlyInstancesOf(Banner::class, $result[Banner::REGION_MOBILE_HERO]);
  126:         $this->assertBannerListFound($expectedIdList, $result);
  146:             $this->assertContainsOnlyInstancesOf(Banner::class, $result[Banner::REGION_HOME_A]);
  149:         $this->assertBannerListFound($expectedIdList, $result);
  169:             $this->assertContainsOnlyInstancesOf(Banner::class, $result[Banner::REGION_HOME_B]);
  172:         $this->assertBannerListFound($expectedIdList, $result);
  192:             $this->assertContainsOnlyInstancesOf(Banner::class, $result[Banner::REGION_HOME_C]);
  195:         $this->assertBannerListFound($expectedIdList, $result);
  235:                 $this->assertInstanceOf(
  248:         $this->assertEquals(
  330:                 $this->assertInstanceOf(
  343:         $this->assertEquals(
  464:         $this->assertEquals(array_keys($expected), array_keys($bannersByRegionList));
  469:                 $this->assertInstanceOf(Banner::class, $banner);
  473:             $this->assertEquals($expected[$region], $actualIdListForRegion);
  621:         $this->assertEquals($expectedIdList, $actualIdList, $message);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Repository/BrandRepositoryTest.php:
   36:         $this->assertInstanceOf(RWEntityRepository::class, $this->fixture);
   43:         $this->assertEquals([], $result);
   55:         $this->assertStringContainsString($partialName, $resultList[0]['name']);
   75:             $this->assertNotEquals($mismatchName, $result['name']);
   76:             $this->assertStringNotContainsString($mismatchName, $result['name']);
   88:         $this->assertEquals(['name' => $name, 'id' => $id], $result[0]);
  104:         $this->assertCount(10, $result);
  124:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Repository/CartRepositoryTest.php:
   53:         $this->assertInstanceOf(Cart::class, $cartA);
   54:         $this->assertNotEmpty($cartA->getCartId());
   57:         $this->assertInstanceOf(Cart::class, $cartB);
   58:         $this->assertNotEmpty($cartB->getCartId());
   60:         $this->assertFalse($cartA === $cartB, 'New cart returned a duplicate instance');
   61:         $this->assertNotEquals($cartA->getCartId(), $cartB->getCartId(), 'Both carts');
   72:         $this->assertNotEmpty($cartId);
   73:         $this->assertEquals($cartId, $newCartId);
   80:         $this->assertEquals($cartId, $cart->getCartId());
   81:         $this->assertEquals($tag, $cart->getAgent());
   90:         $this->assertNull($cart);
  107:         $this->assertEquals($cartId, $cart->getCartId());
  108:         $this->assertEquals($cid, $cart->getCustomerId());
  116:         $this->assertNull($cart);
  119:         $this->assertNull($cart);
  150:         $this->assertEquals($cartId, $newCartId);
  157:         $this->assertEquals($cartId, $cart->getCartId());
  158:         $this->assertEquals($cid, $cart->getCustomerId());
  159:         $this->assertEquals($prodId, $cart->getLineItems()[0]->getProductId());
  160:         $this->assertEquals($qty, $cart->getLineItems()[0]->getQuantity());
  190:         $this->assertNotEmpty($newCartId);
  197:         $this->assertEquals($cid, $cart->getCustomerId());
  198:         $this->assertEquals($prodId, $cart->getLineItems()[0]->getProductId());
  199:         $this->assertEquals($qty, $cart->getLineItems()[0]->getQuantity());

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Repository/CategoriesRepositoryTest.php:
    51:         $this->assertEquals($expected, $ids);
    70:         $this->assertEquals($expected, $ids);
    91:         $this->assertEquals($expected, $ids);
   121:         $this->assertEquals($expected, $ids);
   161:         $this->assertEquals($expected, $ids);
   209:         $this->assertEquals($expected, $actual);
   244:         $this->assertEquals([2, 1], $actual);
   257:         $this->assertEquals($expected, $actual);
   333:         $this->assertEquals($expected, $actual);
   350:         $this->assertEquals($expected, $actual);
   401:         $this->assertEquals($expected, $actual);
   454:         $this->assertCount(4, $actual);
   457:         $this->assertEquals([2, 5, 6, 3], $actualIdList);
   516:         $this->assertCount(3, $actual);
   519:         $this->assertEquals([2, 4, 7], $actualIdList);
   569:         $this->assertEquals(5, $actual->getId());
   590:         $this->assertEquals($expected, $actual);
   656:         $this->assertEquals($categoryCount + 1, count($categoryList));
   668:         $this->assertInstanceOf(Categories::class, $actual);
   669:         $this->assertEquals($id, $actual->getId());
   670:         $this->assertEquals($name, $actual->getName());
   671:         $this->assertEquals($parentId, $actual->getParentId());
   672:         $this->assertEquals(0, $actual->getStatus());
   673:         $this->assertEquals(0, $actual->getSortOrder());
   674:         $this->assertEquals(0, $actual->getFeaturedProduct());
   675:         $this->assertEquals('', $actual->getLinkFragment());
   682:         $this->assertEquals(0, $actual->getParentId());
   694:         $this->assertEquals($db->lastInsertId(), $actual->getId());
   753:         $this->assertCount(5, $actual);
   756:         $this->assertEquals([1, 5, 2, 4, 7], $actualIdList);
   773:         $this->assertEquals($expected, $actual);
   815:         $this->assertEquals($expected, $actual);
   861:         $this->assertEquals($expected, $actualList);
   892:         $this->assertEquals($expected, $actualList);
   940:         $this->assertEquals($expected, $actual);
  1127:             $this->assertInstanceOf(Categories::class, $category);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Repository/ChangeEventRepositoryTest.php:
   70:         $this->assertEquals($ts, $actual[0]['timestamp']->format('Y-m-d H:i:s'), 'timestamp does not match');
   71:         $this->assertEquals($agent, $actual[0]['agent'], 'agent does not match');
   72:         $this->assertEquals($comment, $actual[0]['comment'], 'comment does not match');
   73:         $this->assertEquals($subfield, $actual[0]['subfield'], 'subfield does not match');
   74:         $this->assertEquals($changeType, $actual[0]['changeType'], 'change type does not match');
   75:         $this->assertEquals($old, $actual[0]['oldValue'], 'old value does not match');
   76:         $this->assertEquals($new, $actual[0]['newValue'], 'new value does not match');
   90:         $this->assertCount($expected, $actual);
  185:         $this->assertCount($expected, $actual);
  293:         $this->assertEquals(

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Repository/CmsPageRepositoryTest.php:
   44:         $this->assertEquals($resultWithNoCategories, []);
   48:         $this->assertEquals($resultWithValuesNotInDatabase, []);
   68:         $this->assertEqualsCanonicalizing($expectedCategoryId, $result);
   80:         $this->assertEquals(count($expected), count($result));
   84:                 $this->assertEquals($value, $page->$param());
  183:         $this->assertCount(count($expected), $actual);
  187:                 $this->assertEquals($value, $cmsPage->$method());

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Repository/ConflictEventRepositoryTest.php:
   74:         $this->assertEquals($ts, $actualNote->getTimestamp()->format('Y-m-d H:i:s'), 'timestamp does not match');
   75:         $this->assertEquals($agent, $actualNote->getAgent(), 'agent does not match');
   76:         $this->assertEquals($comment, $actualNote->getComment(), 'comment does not match');
   77:         $this->assertEquals($subfield, $actual[0]->getSubField(), 'subfield does not match');
   78:         $this->assertEquals($current, $actual[0]->getCurrentValue(), 'current value does not match');
   79:         $this->assertEquals($old, $actual[0]->getOldValue(), 'old value does not match');
   80:         $this->assertEquals($new, $actual[0]->getNewValue(), 'new value does not match');
   94:         $this->assertCount($expected, $actual);
  201:         $this->assertCount($expected, $actual);
  342:         $this->assertEquals(1, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Repository/ContractRepositoryTest.php:
  28:         $this->assertInstanceOf(EntityRepository::class, $this->fixture);
  36:         $this->assertEquals($contractMap, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Repository/CostRepositoryTest.php:
   92:         $this->assertEquals($sku, $cost[0]->getSku());
  102:         $this->assertEmpty($cost);
  106:         $this->assertEquals($sku, $cost[0]->getSku());
  132:         $this->assertCount(2, $actual);
  133:         $this->assertEqualsCanonicalizing([$skuA, $skuC], [$actual[0]->getSku(), $actual[1]->getSku()]);
  145:         $this->assertEquals([], $result);
  149:         $this->assertEquals([], $result);
  157:         $this->assertEquals(1, count($result));
  161:         $this->assertEquals(1, count($result));
  179:         $this->assertEquals(1, count($result));
  180:         $this->assertEquals($cost, $result[0]->getCost(), 'Cost not updated');
  183:         $this->assertEquals([], $result);
  207:         $this->assertCount(2, $mappedCostList);
  210:         $this->assertEquals(
  244:         $this->assertEquals(
  249:         $this->assertEquals(
  276:         $this->assertEquals(
  309:         $this->assertEquals(
  335:         $this->assertEquals(1, count($result));
  336:         $this->assertEquals($cost, $result[0]->getCost(), 'Cost not updated');
  339:         $this->assertEquals(1, count($result));
  340:         $this->assertEquals(2.00, $result[0]->getCost(), 'Too many cost entries updated');
  358:         $this->assertCount(1, $mappedCostList);
  359:         $this->assertEquals(
  386:         $this->assertCount(1, $mappedCostList);
  387:         $this->assertEquals(
  413:         $this->assertEquals(1, count($result));
  414:         $this->assertEquals($productId, $result[0]->getProductId(), 'Product ID not updated');
  417:         $this->assertEquals(1, count($result));
  418:         $this->assertEquals(0, $result[0]->getProductId(), 'Too many cost entries updated');
  439:         $this->assertEquals(1, count($result));
  440:         $this->assertEquals($accountB->getId(), $result[0]->getAccount()->getId(), 'Unexpected account ID');
  443:         $this->assertEquals(1, count($result));
  444:         $this->assertEquals($accountA->getId(), $result[0]->getAccount()->getId(), 'Unexpected account ID');
  456:         $this->assertEquals([], $result);
  460:         $this->assertEquals([], $result);
  473:         $this->assertEquals([$productIdA], $result);
  477:         $this->assertEquals([$productIdA], $result);
  489:         $this->assertEquals([], $result);
  493:         $this->assertEquals([], $result);
  503:         $this->assertEquals(1, count($result));
  507:         $this->assertEquals(1, count($result));
  520:         $this->assertEquals([], $result);
  528:         $this->assertEquals([$prodId], $result);
  534:         $this->assertEquals([$prodId], $result);
  547:         $this->assertEquals([], $result);
  556:         $this->assertEquals([$productIdA], $result);
  562:         $this->assertEquals([$productIdA], $result);
  567:         $this->assertEquals([$productIdA, $productIdB], $result);
  582:         $this->assertEquals(1, count($this->fixture->getUnmappedCosts($accountB)));
  586:         $this->assertEquals(0, count($this->fixture->getUnmappedCosts($accountB)));
  590:         $this->assertEquals($prodId, $cost[0]->getProductId());
  608:         $this->assertEquals(3, $entityList[0]->getProductId());
  628:         $this->assertCount(2, $actual);
  629:         $this->assertEquals($accountA->getId(), $actual[0]->getSupplierAccountsId());
  630:         $this->assertEquals($accountA->getId(), $actual[1]->getSupplierAccountsId());
  648:         $this->assertCount(1, $actual);
  649:         $this->assertEquals($productId, $actual[0]->getProductId());
  666:         $this->assertEquals([$productId], $actual);
  672:         $this->assertEmpty($cost);
  676:         $this->assertEquals($sku, $cost[0]->getSku());
  679:         $this->assertEquals([$productId], $actual);
  684:         $this->assertEquals($sku, $cost[0]->getSku());
  701:         $this->assertEquals([$productId], $actual);
  707:         $this->assertEmpty($cost);
  711:         $this->assertEquals($sku, $cost[0]->getSku());
  714:         $this->assertEquals([$productId], $actual);
  719:         $this->assertEquals($sku, $cost[0]->getSku());
  773:         $this->assertCount(2, $actual);
  774:         $this->assertEqualsCanonicalizing([$skuA, $skuC], [$actual[0]->getSku(), $actual[1]->getSku()]);
  791:         $this->assertCostMap($expected);
  807:         $this->assertCostMap($expected);
  826:         $this->assertCostMap($expected);
  840:         $this->assertCostMap($expected);
  853:         $this->assertCostMap($expected);
  871:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Repository/CouponRepositoryTest.php:
    69:         $this->assertEquals($expected, $actual);
   224:         $this->assertEquals($expected, $actual);
   225:         $this->assertEquals($expectedSort, $actualSort);
   273:         $this->assertEquals($expected, $actual);
   274:         $this->assertEquals($expectedSort, $actualSort);
   322:         $this->assertEquals($expected, $actual);
   323:         $this->assertEquals($expectedSort, $actualSort);
   646:         $this->assertEquals($expected, $result);
   751:         $this->assertEquals($expected, $result);
   870:         $this->assertEquals($expected, $result);
   913:         $this->assertEquals($expected, $result);
  1208:         $this->assertEquals([$couponIdA], $couponIdList);
  1226:         $this->assertEquals($expected, $couponIdList);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Repository/CustomerPrinterRepositoryTest.php:
  54:         $this->assertEquals($expected, $actual);
  87:         $this->assertEquals([], $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Repository/CustomerProductQtyPriceRepositoryTest.php:
   48:         $this->assertInstanceOf(RWEntityRepository::class, $this->fixture);
   71:         $this->assertEquals($expected, $actual);
  256:         $this->assertInstanceOf(CustomerProductQtyPrice::class, $actual);
  257:         $this->assertSame($customerId, $actual->getCustomerId());
  258:         $this->assertSame($productId, $actual->getProductId());
  259:         $this->assertSame($price, $actual->getPrice());
  260:         $this->assertSame($minQty, $actual->getMinQty());
  261:         $this->assertSame($blockSize, $actual->getBlockSize());
  283:         $this->assertCount(1, $actual);
  284:         $this->assertInstanceOf(CustomerProductQtyPrice::class, $actual[0]);
  285:         $this->assertSame($customerId, $actual[0]->getCustomerId());
  286:         $this->assertSame($productId, $actual[0]->getProductId());
  287:         $this->assertSame($price, $actual[0]->getPrice());
  288:         $this->assertSame($minQty, $actual[0]->getMinQty());
  289:         $this->assertSame($blockSize, $actual[0]->getBlockSize());

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Repository/CustomerRepositoryTest.php:
  50:         $this->assertInstanceOf(RWEntityRepository::class, $this->fixture);
  63:         $this->assertInstanceOf(Customer::class, $actual);
  64:         $this->assertSame($firstName, $actual->getFirstname());
  65:         $this->assertSame($lastName, $actual->getLastname());
  66:         $this->assertSame($email, $actual->getEmailAddress());

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Repository/CustomerToContractRepositoryTest.php:
   50:         $this->assertInstanceOf(RWEntityRepository::class, $this->fixture);
   84:         $this->assertEquals($expected, $actual);
  284:         $this->assertContractData(
  324:         $this->assertContractData(
  360:         $this->assertContractData(
  508:         $this->assertEquals(
  527:             $this->assertContractDataEmpty();
  532:         $this->assertEquals(

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Repository/DbFileRepositoryTest.php:
  37:         $this->assertEquals('', $actual);
  49:         $this->assertEquals($content, $actual);
  61:         $this->assertEquals($content, $actual);
  75:         $this->assertEquals($content, $actual);
  88:         $this->assertEquals($content, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Repository/EmailLogRepositoryTest.php:
   40:         $this->assertInstanceOf(RWEntityRepository::class, $this->fixture);
   54:         $this->assertInstanceOf(EmailLog::class, $actual);
   55:         $this->assertEquals($email, $actual->getEmail());
   56:         $this->assertEquals($template, $actual->getTemplate());
   57:         $this->assertEquals($when, $actual->getDateSent());
   69:         $this->assertEquals($expected, $actual);
  152:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Repository/EntityAttributeValueRepositoryTest.php:
   39:         $this->assertEquals([], $actual);
   54:         $this->assertEquals($expected->getValueList(), $actual);
   73:         $this->assertEquals($expected, $actual);
   83:         $this->assertEquals($expected, $actual);
   99:         $this->assertEquals([$idA => $expected->getValueList(), $idB => []], $actual);
  119:         $this->assertEquals($expected, $actual);
  137:         $this->assertEquals([], $actual);
  199:         $this->assertEquals($expected, $actual);
  218:         $this->assertEquals($name, $actual->getAttribute()->getName());
  219:         $this->assertEquals($value, $actual->getValue());
  229:         $this->assertEquals(null, $actual);
  250:         $this->assertEquals($valueA, $actual);
  271:         $this->assertEquals($attributeId, $actual->getAttribute()->getId());
  272:         $this->assertEquals($value, $actual->getValue());
  293:         $this->assertEquals($value, $actual->getValue());

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Repository/ExceptionDayRepositoryTest.php:
  41:         $this->assertSameSize($expected, $actual);
  43:             $this->assertContains($exceptionDay->getEvent(), $expected);
  94:         $this->assertEquals($expected, $actualList);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Repository/FavoritesListRepositoryTest.php:
   46:         $this->assertEquals(456, $entityList[0]->getProductsId());
   58:         $this->assertEquals(123, $entityList[0]->getProductsId());
   59:         $this->assertEquals(456, $entityList[1]->getProductsId());
   92:         $this->assertEquals($expectedList[$customerIdA], $actualA);
   93:         $this->assertEquals($expectedList[$customerIdB], $actualB);
  111:         $this->assertEquals([], $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Repository/FeedAmendmentRepositoryTest.php:
  59:         $this->assertEquals($expected, $results);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Repository/FeedDetailRepositoryTest.php:
   43:         $this->assertEquals($expected, $results);
  118:         $this->assertEquals($expected, $results);
  168:         $this->assertEquals($expected, $results);
  241:         $this->assertEquals($expected, $actualList, 'status list did not match expected');
  253:         $this->assertStatusList(FeedDetail::STATUS_RUNNING, $expected);
  309:         $this->assertStatusList(FeedDetail::STATUS_DONE, $expected);
  365:         $this->assertStatusList(FeedDetail::STATUS_DONE, $expected);
  421:         $this->assertStatusList(FeedDetail::STATUS_DISABLED, $expected);
  477:         $this->assertStatusList(FeedDetail::STATUS_FAILED, $expected);
  555:         $this->assertEquals($expected, $actualList);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Repository/FlagRepositoryTest.php:
   41:         $this->assertInstanceOf(FlagManagerInterface::class, $this->fixture);
   52:         $this->assertInstanceOf(FlagInterface::class, $actual);
   53:         $this->assertEquals($name, $actual->getName());
   60:         $this->assertNull($actual);
   75:         $this->assertEquals(array_fill_keys($idList, false), $actual);
   94:         $this->assertEquals(array_fill_keys($idList, true), $actual);
  124:         $this->assertEquals($expected, $actual);
  165:         $this->assertEquals(count($idList), count($actual));
  166:         $this->assertEquals($flagA->getName(), $actual[$flaggedA][$flagA->getName()]->getName());
  167:         $this->assertEquals($flagB->getName(), $actual[$flaggedB][$flagB->getName()]->getName());
  168:         $this->assertEquals($flagA->getName(), $actual[$flaggedAB][$flagA->getName()]->getName());
  169:         $this->assertEquals($flagB->getName(), $actual[$flaggedAB][$flagB->getName()]->getName());
  170:         $this->assertEquals([], $actual[$missedId]);
  182:         $this->assertEquals($expected, $actual);
  247:         $this->assertEquals($expected, $actual);
  322:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Repository/IdMappingRepositoryTest.php:
   70:         $this->assertEquals($expected, $actual);
  171:         $this->assertEquals($expected, $actual);
  270:         $this->assertEmpty($this->fixture->getOurIdList($set, $type, [$our, $their]));
  271:         $this->assertEmpty($this->fixture->getMappedIdList($set, $type, [$our, $their]));
  275:         $this->assertEquals([$our => [$their]], $this->fixture->getMappedIdList($set, $type, [$our]));
  276:         $this->assertEquals([$their => [$our]], $this->fixture->getOurIdList($set, $type, [$their]));
  280:         $this->assertEmpty($this->fixture->getOurIdList($set, $type, [$our, $their]));
  281:         $this->assertEmpty($this->fixture->getMappedIdList($set, $type, [$our, $their]));
  304:         $this->assertCount(2, $actual);
  305:         $this->assertEquals($setA, $actual[0]->getSet());
  306:         $this->assertEquals($typeA, $actual[0]->getType());
  307:         $this->assertEquals($theirA, $actual[0]->getFrom());
  308:         $this->assertEquals($ourA, $actual[0]->getTo());
  309:         $this->assertEquals($setB, $actual[1]->getSet());
  310:         $this->assertEquals($typeB, $actual[1]->getType());
  311:         $this->assertEquals($theirB, $actual[1]->getFrom());
  312:         $this->assertEquals($newProductId, $actual[1]->getTo());

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Repository/ImportDataRecordRepositoryTest.php:
  39:         $this->assertEquals([], $this->fixture->getValue($system, $object, $id));
  51:         $this->assertEquals($value, $this->fixture->getValue($system, $object, $id));
  64:         $this->assertEquals($value, $this->fixture->getValue($system, $object, $id));
  76:         $this->assertEquals([], $this->fixture->getValue($system, $object, $id));
  88:         $this->assertEquals([], $this->fixture->getValue($system, $object, $id));

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Repository/InventoryAuditRepositoryTest.php:
   56:         $this->assertEquals($expected, $actual);
  224:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Repository/LocationDispositionRepositoryTest.php:
   40:         $this->assertEquals($disposition, $this->fixture->getSkuDisposition($sku, $dc));
   59:         $this->assertEquals($disposition, $this->fixture->getSkuDisposition($sku, $dc));
   88:         $this->assertEquals($disposition, $this->fixture->getSkuDisposition($sku, $dc[0]));
   89:         $this->assertNull($this->fixture->getSkuDisposition($sku, $dc[1]));
   90:         $this->assertNull($this->fixture->getSkuDisposition($sku, $dc[2]));
  111:         $this->assertCount(3, $actual);
  112:         $this->assertArrayHasKey($dc[0], $actual);
  113:         $this->assertArrayHasKey($dc[1], $actual);
  114:         $this->assertArrayHasKey($dc[2], $actual);
  119:         $this->assertEquals($dc, $actualDcList);
  122:         $this->assertCount(4, $actual);
  123:         $this->assertArrayHasKey($dc[0], $actual);
  124:         $this->assertArrayHasKey($dc[1], $actual);
  125:         $this->assertArrayHasKey($dc[2], $actual);
  126:         $this->assertArrayHasKey(LocationDispositionRepository::VW_DC, $actual);
  129:         $this->assertCount(5, $actual);
  130:         $this->assertArrayHasKey($dc[0], $actual);
  131:         $this->assertArrayHasKey($dc[1], $actual);
  132:         $this->assertArrayHasKey($dc[2], $actual);
  133:         $this->assertArrayHasKey(LocationDispositionRepository::VW_DC, $actual);
  134:         $this->assertArrayHasKey(LocationDispositionRepository::VID_DC, $actual);
  137:         $this->assertCount(4, $actual);
  138:         $this->assertArrayHasKey($dc[0], $actual);
  139:         $this->assertArrayHasKey($dc[1], $actual);
  140:         $this->assertArrayHasKey($dc[2], $actual);
  141:         $this->assertArrayHasKey(LocationDispositionRepository::VID_DC, $actual);
  154:         $this->assertEquals($disposition, $this->fixture->getSkuDisposition($sku, $dc));
  196:         $this->assertEquals($expected, $actual);
  262:         $this->assertEquals([], $this->fixture->getVirtualSuppliers($invoice));
  274:         $this->assertEquals($disposition, $this->fixture->getSkuVirtualSupplier($sku));
  313:         $this->assertCount(1, $actual);
  314:         $this->assertEquals($sku, $actual[0]->getSku());
  315:         $this->assertEquals($dc, $actual[0]->getDc());
  316:         $this->assertEquals($disposition, $actual[0]->getDisposition());

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Repository/LossLeaderPriceRepositoryTest.php:
   70:         $this->assertEquals($productId, $actual[0]->getProductId());
   95:         $this->assertEquals($productId, $actual[0]->getProductId());
  117:         $this->assertSameSize($expected, $actual);
  123:             $this->assertLineData($key, $lossLeader, array_shift($actual));
  142:         $this->assertSameSize($expected, $actual);
  148:             $this->assertLineData($key, $lossLeader, array_shift($actual));
  167:         $this->assertSameSize($expected, $actual);
  173:             $this->assertLineData($key, $lossLeader, array_shift($actual));
  192:         $this->assertSameSize($expected, $actual);
  198:             $this->assertLineData($key, $lossLeader, array_shift($actual));
  220:         $this->assertSameSize($expected, $actual);
  226:             $this->assertLineData($key, $lossLeader, array_shift($actual));
  245:         $this->assertSameSize($expectedLossLeaderIdList, $actual);
  252:         $this->assertSame($expectedLossLeaderIdList, $lossLeaderIdList);
  482:         $this->assertEquals($expected, $actual);
  581:         $this->assertEquals($expected, $actual);
  759:         $this->assertEquals($expected, $formattedActual, 'Line '.$key.' did not match as expected');

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Repository/MessageBufferRepositoryTest.php:
  46:         $this->assertEquals($expected, $actual);
  66:         $this->assertEmpty($actual);
  85:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Repository/MinimumAdvertisedPriceRepositoryTest.php:
   40:         $this->assertInstanceOf(RWEntityRepository::class, $this->fixture);
   82:         $this->assertEquals($expected, $actual);
  129:         $this->assertMapListEquals($expected, $actual);
  224:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Repository/NationallyStockedRepositoryTest.php:
   37:         $this->assertEquals($nationallyStocked, $actual->isNationallyStocked());
   45:         $this->assertEquals(!$nationallyStocked, $actual->isNationallyStocked());
   65:         $this->assertCount(2, $actual);
   66:         $this->assertEquals($nationallyStockedA, $actual[0]->isNationallyStocked());
   67:         $this->assertEquals($nationallyStockedB, $actual[1]->isNationallyStocked());
   79:         $this->assertCount(2, $actual);
   80:         $this->assertEquals(!$nationallyStockedA, $actual[0]->isNationallyStocked());
   81:         $this->assertEquals($nationallyStockedB, $actual[1]->isNationallyStocked());
  119:         $this->assertCount(1, $actual);
  120:         $this->assertEquals($sku, $actual[0]->getSku());
  121:         $this->assertEquals($nationallyStocked, $actual[0]->isNationallyStocked());

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Repository/OrderFollowUpRepositoryTest.php:
   41:         $this->assertInstanceOf(RWEntityRepository::class, $this->fixture);
   66:         $this->assertInstanceOf(FollowUp::class, $followUpList[0]);
   77:         $this->assertEquals($orderId, $followUpList[0]->getOrderId());
   87:         $this->assertEquals($userName, $followUpList[0]->getAgent());
   97:         $this->assertEquals($followUpDate, $followUpList[0]->getFollowUpDate());
  105:         $this->assertCount(1, $postInsertEntityList);
  111:         $this->assertCount(0, $postDeleteEntityList);
  131:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Repository/OrderLineItemRepositoryTest.php:
   70:         $this->assertEquals($expectedProductIdList, $actualProductIdList);
   84:         $this->assertEquals($expected, $actual);
   97:         $this->assertEquals($expected, $actual);
  116:         $this->assertEquals($expected, $actual);
  206:         $this->assertEquals($expected, $actual);
  320:         $this->assertEquals($expected, $actual);
  476:         $this->assertEquals(3, $entityList[0]->getProductId());
  491:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Repository/OrderRepositoryTest.php:
    58:         $this->assertInstanceOf(RWEntityRepository::class, $this->fixture);
    79:         $this->assertEquals($expected, $reportList);
   401:         $this->assertEquals($expected, $reportList);
   545:         $this->assertEquals($expected, $reportList);
   650:         $this->assertEquals($expected, $reportList);
  1064:         $this->assertEquals($expected, $actual);
  1175:             $this->assertEquals($expected, $actual);
  1177:             $this->assertEquals($expected, $actual->getId());
  1236:         $this->assertEquals($expected, $actualIdList);
  1294:         $this->assertSame(array_reverse($expected, true), $actual);
  1386:         $this->assertEquals(sort($expectedOrderIdList), sort($actualOrderIdList));
  1599:         $this->assertEquals($expectedOrderLineskuList, $actualOrderLineskuList);
  1692:         $this->assertInstanceOf(Selector::class, $selector);
  1726:         $this->assertEquals($orderIdList, $orderIdListDesc);
  1738:         $this->assertEquals($datePurchasedList, $actualDateListAsc);
  1766:         $this->assertEquals($expected, $actual);
  1933:         $this->assertEquals($expected, $actual);
  1954:         $this->assertEquals($expected, $actual);
  2062:         $this->assertEquals($orderIdList, $orderIdListDesc);
  2091:         $this->assertEquals($expected, $actual);
  2282:         $this->assertEquals($expected, $actual);
  2463:         $this->assertEquals($expected, $actual);
  2695:         $this->assertEquals($expected, $actual);
  2700:         $this->assertEquals($expected, $actual);
  2714:         $this->assertEquals([], $actual);
  2763:         $this->assertEquals($expected, $actual);
  2768:         $this->assertEquals($expected, $actual);
  2782:         $this->assertEquals([], $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Repository/OrderReturnRepositoryTest.php:
   54:         $this->assertOrderReturnList(
   79:         $this->assertEquals(
   91:         $this->assertEquals(
  114:         $this->assertEquals($expected, $actual);
  417:         $this->assertEquals([], $this->fixture->getOpenReturnList());
  440:         $this->assertEquals([], $this->fixture->getOpenReturnList());
  463:         $this->assertEquals($raNumber, $actual->getRaNumber());
  539:         $this->assertEquals($expected, $actualList, $message);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Repository/OrdersInvoicesRepositoryTest.php:
   43:         $this->assertInstanceOf(RWEntityRepository::class, $this->fixture);
   60:         $this->assertSameSize($expected, $actual);
   71:             $this->assertContains($expectedDataPoint, $actual);
  360:         $this->assertEquals($expected, $actual);
  590:         $this->assertEquals($expected, $actualIdList);
  662:         $this->assertEquals($expected, $actual);
  854:         $this->assertEquals($expected, $actual);
  881:         $this->assertEquals($expected, $actual);
  976:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Repository/OrdersViewedRepositoryTest.php:
   42:         $this->assertInstanceOf(EntityRepository::class, $this->fixture);
   57:         $this->assertEmpty($actual);
   71:         $this->assertEmpty($actual);
   96:         $this->assertEquals($expectedViewList, array_column($actual, 'viewed'));
  115:         $this->assertEquals($expected, array_column($actual, 'viewed'));
  197:         $this->assertEquals($expectedAgentViewList, array_column($actual, 'viewed'));
  199:         $this->assertEquals([$expectedAgent], array_unique(array_column($actual, 'agent')));
  234:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Repository/PaymentDetailsRepositoryTest.php:
   48:         $this->assertInstanceOf(RWEntityRepository::class, $this->fixture);
   58:         $this->assertInstanceOf(PaymentDetails::class, $actual);
   68:         $this->assertSame($customer, $actual->getCustomer());
   79:         $this->assertEquals($system, $actual->getSystem());
   90:         $this->assertEquals($token, $actual->getToken());
  124:         $this->assertEquals($name, trim($actual->getName()));
  125:         $this->assertEquals($company, $actual->getCompany());
  126:         $this->assertEquals($line1, $actual->getStreetAddress());
  127:         $this->assertEquals($line2, $actual->getSuburb());
  128:         $this->assertEquals($city, $actual->getCity());
  129:         $this->assertEquals($state, $actual->getState());
  130:         $this->assertEquals($zip, $actual->getZip());
  131:         $this->assertEquals($country, $actual->getCountry());
  132:         $this->assertEquals($phone, $actual->getPhone());
  143:         $this->assertEquals($tokenType, $actual->getTokenType());
  154:         $this->assertEquals($displayData, $actual->getDisplayData());
  165:         $this->assertEquals($expiration, $actual->getExpiration());
  175:         $this->assertSame($details, $actual);
  186:         $this->assertEquals($system, $actual->getSystem());
  197:         $this->assertEquals($token, $actual->getToken());
  231:         $this->assertEquals($name, trim($actual->getName()));
  232:         $this->assertEquals($company, $actual->getCompany());
  233:         $this->assertEquals($line1, $actual->getStreetAddress());
  234:         $this->assertEquals($line2, $actual->getSuburb());
  235:         $this->assertEquals($city, $actual->getCity());
  236:         $this->assertEquals($state, $actual->getState());
  237:         $this->assertEquals($zip, $actual->getZip());
  238:         $this->assertEquals($country, $actual->getCountry());
  239:         $this->assertEquals($phone, $actual->getPhone());
  250:         $this->assertEquals($tokenType, $actual->getTokenType());
  261:         $this->assertEquals($displayData, $actual->getDisplayData());
  272:         $this->assertEquals($expiration, $actual->getExpiration());
  284:         $this->assertEquals($expected, $actual->isDefault());
  296:         $this->assertEquals($expected, $actual->isDefault());
  336:         $this->assertEquals([$tokenB, $tokenA], $sorted);
  369:         $this->assertEquals($customerId, $actual->getCustomerId());
  370:         $this->assertEquals($system, $actual->getSystem());
  371:         $this->assertEquals($token, $actual->getToken());
  416:         $this->assertCount(1, $actual);
  417:         $this->assertEquals($token, $actual[0]->getToken());
  418:         $this->assertEquals($system, $actual[0]->getSystem());
  457:         $this->assertNull($actual, 'Target was not deleted');
  460:         $this->assertCount(3, $remaining, 'Too much was deleted');

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Repository/PaymentRepositoryTest.php:
  163:         $this->assertTrue(false !== array_search($partialRefunded['id'], $actual));
  164:         $this->assertTrue(false !== array_search($overpaidPlusTwo['id'], $actual));

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Repository/PriceSnapshotRepositoryTest.php:
  45:         $this->assertInstanceOf(EntityRepository::class, $this->fixture);
  61:         $this->assertEquals($expected, $actual);
  80:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Repository/ProductBlockRepositoryTest.php:
   63:         $this->assertEquals(
  175:         $this->assertBlockList($expected, $actual);
  368:         $this->assertCount(3, $actual);
  369:         $this->assertEquals($newProductId, $actual[0]['product_id'], 'product not updated');
  370:         $this->assertEquals($productIdB, $actual[1]['product_id'], 'wrong product updated');
  371:         $this->assertEquals($newProductId, $actual[2]['product_id']);
  395:         $this->assertCount(1, $actual);
  396:         $this->assertEquals($newProductId, $actual[0]['product_id']);
  408:         $this->assertEquals($expected, $sorted);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Repository/ProductImageRepositoryTest.php:
   39:         $this->assertInstanceOf(RWEntityRepository::class, $this->fixture);
   63:         $this->assertEquals($expected, $actual);
  156:         $this->assertEquals($expected, $actual);
  224:         $this->assertEquals($hash, $actual->getHash());
  236:         $this->assertInstanceOf(ProductImage::class, $actual);
  267:         $this->assertEquals($expected, $actual);
  288:         $this->assertEquals([$hashA, $hashB, $hashC], $actual);
  302:         $this->assertSame($expected, $actual);
  318:         $this->assertEquals([$hashB], $actual);
  345:         $this->assertEquals($expected, $actual);
  372:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Repository/ProductMediaRepositoryTest.php:
  40:         $this->assertInstanceOf(RWEntityRepository::class, $this->fixture);
  59:         $this->assertEquals($product->getId(), $actual->getProductId());
  60:         $this->assertEquals($mediaType, $actual->getType());
  61:         $this->assertEquals($mediaUrl, $actual->getUrl());
  62:         $this->assertEquals($sourceId, $actual->getSourceId());
  82:         $this->assertEquals($mediaUrl, $actual->getUrl());
  83:         $this->assertEquals($sourceId, $actual->getSourceId());

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Repository/ProductPriceLogRepositoryTest.php:
   30:         $this->assertInstanceOf(EntityRepository::class, $this->fixture);
   40:         $this->assertEquals($productId, $actual[0]->getProductId());
   53:         $this->assertEquals($productId, $actual[0]->getProductId());
   73:         $this->assertEquals($productId, $actual->getProductId());
   74:         $this->assertEquals($point, $actual->getPoint()->format('Y-m-d H:i:s'));
   95:         $this->assertEquals($productId, $actual->getProductId());
   96:         $this->assertEquals($point->format('Y-m-d H:i:s'), $actual->getPoint()->format('Y-m-d H:i:s'));
  109:         $this->assertEquals($log, gzuncompress(base64_decode($actual[0]->getLog())));
  123:         $this->assertEquals($log."\n".$log, gzuncompress(base64_decode($actual[0]->getLog())));

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Repository/ProductQtyPriceRepositoryTest.php:
   35:         $this->assertInstanceOf(RWEntityRepository::class, $this->fixture);
   45:         $this->assertEquals($productId, $actual[0]->getProductId());
   58:         $this->assertEquals($productId, $actual[0]->getProductId());
   91:         $this->assertEquals($expectedList, $actualList);
  110:         $this->assertEquals($productId, $actual[0]->getProductId());
  130:         $this->assertEquals($productId, $actual[0]->getProductId());
  149:         $this->assertCount(1, $actual, 'invalid count');
  150:         $this->assertValidPrice($data, $actual[0]);
  170:         $this->assertCount(1, $actual, 'invalid count');
  171:         $this->assertValidPrice($data, $actual[0]);
  188:         $this->assertCount(1, $actual, 'invalid count');
  189:         $this->assertValidPrice($data, $actual[0]);
  209:         $this->assertCount(1, $actual, 'invalid count');
  210:         $this->assertValidPrice($data, $actual[0]);
  263:         $this->assertCount(0, $actual);
  286:         $this->assertCount(1, $priceList);
  290:         $this->assertEquals(
  338:         $this->assertCount(1, $priceList);
  342:         $this->assertEquals(
  383:         $this->assertCount(1, $priceList);
  387:         $this->assertEquals(
  434:         $this->assertCount(0, $priceList);
  446:         $this->assertEquals($actual, $expected);
  591:         $this->assertEquals($expected, $actual);
  612:         $this->assertEquals($expected['contractId'], $actual->getContractId(), 'invalid contract ID');
  613:         $this->assertEquals($expected['productId'], $actual->getProductId(), 'invalid product ID');
  614:         $this->assertEquals($expected['minQty'], $actual->getMinQty(), 'invalid min qty');
  615:         $this->assertEquals($expected['price'], $actual->getPrice(), 'invalid price');
  616:         $this->assertEquals($expected['blockSize'], $actual->getBlockSize(), 'invalid block size');
  617:         $this->assertEquals($expected['source'], $actual->getSource(), 'invalid source');
  618:         $this->assertEquals(LocalClock::getTime(), $actual->getLastUpdated(), 'invalid last updated');

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Repository/ProductRegulationRepositoryTest.php:
   39:         $this->assertCount(1, $actual);
   40:         $this->assertEquals(
   61:         $this->assertCount(1, $actual);
   62:         $this->assertEquals(
   83:         $this->assertCount(2, $actual);
   84:         $this->assertEquals(
  102:         $this->assertEquals($productId, $actualProductIdList);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Repository/ProductsAltIdsRepositoryTest.php:
   45:         $this->assertEquals([123], $idListA);
   48:         $this->assertEquals([123, 321], $idListB);
   51:         $this->assertEquals([123, 321], $idListC);
   73:         $this->assertEquals([$productId], $actualA);
   82:         $this->assertEquals([$productId], $actualB, $message);
  145:         $this->assertEquals($expectedA, $resultA);
  150:         $this->assertEquals($expectedB, $resultB);
  154:         $this->assertNull($resultC);
  165:         $this->assertEquals(456, $entityList[0]->getProductId());
  178:         $this->assertEquals(123, $entityList[0]->getProductId());
  179:         $this->assertEquals(456, $entityList[1]->getProductId());
  180:         $this->assertEquals(456, $entityList[2]->getProductId());
  195:         $this->assertEquals(1, count($entityList));
  196:         $this->assertEquals($productId, $entityList[0]->getProductId());
  197:         $this->assertEquals($supplier, $entityList[0]->getType());
  198:         $this->assertEquals($value, $entityList[0]->getValue());
  217:         $this->assertEquals(2, count($entityList));
  218:         $this->assertEquals($productIdA, $entityList[0]->getProductId());
  219:         $this->assertEquals($supplier, $entityList[0]->getType());
  220:         $this->assertEquals($valueA, $entityList[0]->getValue());
  221:         $this->assertEquals($productIdB, $entityList[1]->getProductId());
  222:         $this->assertEquals($supplier, $entityList[1]->getType());
  223:         $this->assertEquals($valueB, $entityList[1]->getValue());
  240:         $this->assertEquals(2, count($entityList));
  241:         $this->assertEquals($productIdA, $entityList[0]->getProductId());
  242:         $this->assertEquals($supplier, $entityList[0]->getType());
  243:         $this->assertEquals($productIdB, $entityList[1]->getProductId());
  244:         $this->assertEquals($supplier, $entityList[1]->getType());
  245:         $this->assertEquals($valueB, $entityList[1]->getValue());
  271:         $this->assertEquals($expected, $actualIdList);
  333:         $this->assertEquals([$typeA, $typeB, $typeC], $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Repository/ProductsAttributeRepositoryTest.php:
   41:         $this->assertInstanceOf(RWEntityRepository::class, $this->fixture);
   64:         $this->assertEquals($expected, $results);
   76:         $this->assertEquals([], $ids);
  108:         $this->assertEquals($expected, $actual);
  218:         $this->assertEquals($expected, $actual);
  359:         $this->assertEquals([], $actual);
  407:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Repository/ProductsRepositoryTest.php:
   60:         $this->assertEquals($idList, $actual);
   80:         $this->assertEquals($expected, $actual);
  119:         $this->assertEquals($expected[$mfgPartNoT], $actual[$mfgPartNoT]);
  120:         $this->assertCount(count($expected[$mfgPartNoAB]), $actual[$mfgPartNoAB]);
  122:             $this->assertTrue(
  146:         $this->assertEquals($expected, $actual);
  152:         $this->assertEquals([], $actual);
  172:         $this->assertEquals($expected, $actual);
  191:         $this->assertEquals($expected, $actual);
  259:         $this->assertEquals($expected, $actual);
  332:         $this->assertEquals(1, count($actual));
  335:         $this->assertEquals($idC, $actualProductId);
  344:         $this->assertEquals(
  379:         $this->assertCount(3, $actual);
  380:         $this->assertContainsOnlyInstancesOf(Products::class, $actual);
  401:         $this->assertEquals([$productIdD], $actual);
  437:         $this->assertEquals(array_column($call, 'products_id'), $actual);
  441:             $this->assertEquals(
  459:         $this->assertEquals(3, $actual);
  466:             $this->assertEquals(

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Repository/PromotionRepositoryTest.php:
   50:         $this->assertPromoId($expected, $response);
   87:         $this->assertEquals($expected, $actual);
  125:         $this->assertEquals($expected, $actual);
  134:         $this->assertCount(1, $actual);
  135:         $this->assertEquals(2, $actual[0]->getId());
  151:         $this->assertEquals($expected, $actual);
  160:         $this->assertCount(1, $actual);
  161:         $this->assertEquals(2, $actual[0]->getId());
  185:         $this->assertEquals($expected, $actual);
  194:         $this->assertEquals([], $actual);
  217:         $this->assertCount(2, $response);
  218:         $this->assertEquals([2, 3], $actual);
  242:         $this->assertCount(3, $response);
  243:         $this->assertEquals([1, 2, 4], $actual);
  252:         $this->assertEquals([], $actual);
  276:         $this->assertEquals($expected, $actual);
  285:         $this->assertEquals([], $actual);
  294:         $this->assertEquals([], $actual);
  310:         $this->assertCount(1, $actual);
  311:         $this->assertEquals(2, $actual[0]->getId());
  335:         $this->assertEquals($expected, $actual);
  344:         $this->assertEquals([], $actual);
  353:         $this->assertEquals([], $actual);
  369:         $this->assertCount(1, $actual);
  370:         $this->assertEquals(2, $actual[0]->getId());
  394:         $this->assertEquals($expected, $actual);
  418:         $this->assertEquals([1, 2, 4], $actual);
  427:         $this->assertEquals([], $actual);
  436:         $this->assertEquals([], $actual);
  446:         $this->assertEquals([], $actual);
  461:         $this->assertCount(1, $actual);
  462:         $this->assertEquals(2, $actual[0]->getId());
  485:         $this->assertCount(1, $response);
  486:         $this->assertEquals([2], $actual);
  510:         $this->assertEquals($expected, $actual);
  534:         $this->assertEquals([1, 2, 4], $actual);
  543:         $this->assertEquals([], $actual);
  552:         $this->assertEquals([], $actual);
  562:         $this->assertEquals([], $actual);
  577:         $this->assertCount(1, $actual);
  578:         $this->assertEquals(2, $actual[0]->getId());
  601:         $this->assertCount(1, $response);
  602:         $this->assertEquals([2], $actual);
  626:         $this->assertEquals($expected, $actual);
  635:         $this->assertEquals([], $actual);
  644:         $this->assertEquals([], $actual);
  660:         $this->assertCount(1, $actual);
  661:         $this->assertEquals(2, $actual[0]->getId());
  683:         $this->assertCount(2, $response);
  684:         $this->assertEquals([1, 3], $actual);
  708:         $this->assertEquals($expected, $actual);
  717:         $this->assertEquals([], $actual);
  726:         $this->assertEquals([], $actual);
  742:         $this->assertCount(1, $actual);
  743:         $this->assertEquals(2, $actual[0]->getId());
  765:         $this->assertCount(2, $response);
  766:         $this->assertEquals([1, 3], $actual);
  829:         $this->assertEquals($expected, $processedActual, $message);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Repository/QuoteApprovalEmailRepositoryTest.php:
  43:         $this->assertInstanceOf(RWEntityRepository::class, $this->fixture);
  57:         $this->assertInstanceOf(QuoteApprovalEmail::class, $actual);
  58:         $this->assertSame($quoteId, $actual->getQuoteId());
  59:         $this->assertSame($template, $actual->getTemplate());
  60:         $this->assertSame($emailAddress, $actual->getEmailAddress());
  61:         $this->assertSame($parameters, $actual->getParameters());

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Repository/QuoteRepositoryTest.php:
   56:         $this->assertInstanceOf(EntityRepository::class, $this->fixture);
   77:         $this->assertEquals($expected, $actual);
  173:         $this->assertEquals($expected, $actual);
  274:         $this->assertEquals($expected, $actual);
  467:         $this->assertEquals($expected, $actual);
  572:         $this->assertEquals($expected, $actual);
  744:         $this->assertSame($pendingCount, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Repository/RebateRepositoryTest.php:
   63:         $this->assertFalse($results);
   68:         $this->assertFalse($resultsModel);
   86:         $this->assertOneTaggedRebateFound(['active 1'], $results);
   91:         $this->assertOneTaggedRebateFound(['active 1'], $resultsModel);
  109:         $this->assertOneTaggedRebateFound(['active 1'], $results);
  114:         $this->assertOneTaggedRebateFound(['active 1'], $resultsModel);
  132:         $this->assertOneTaggedRebateFound(['active 1'], $results);
  137:         $this->assertOneTaggedRebateFound(['active 1'], $resultsModel);
  156:         $this->assertFalse($results);
  161:         $this->assertFalse($resultsModel);
  187:         $this->assertEquals(['active 1'], $actual);
  207:         $this->assertEquals($expectedRebateList, $results);
  284:         $this->assertEquals($expectedRebateList, $results);
  326:         $this->assertEquals($expectedRebateList, $results);
  392:         $this->assertEquals($expectedRebateList, $results);
  458:         $this->assertEquals($expectedRebateList, $results);
  557:         $this->assertEquals($expected, $actual);
  716:         $this->assertContains($name, $possible, $message);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Repository/RebatesProductsRepositoryTest.php:
  47:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Repository/SalesRegulationRepositoryTest.php:
  51:         $this->assertEquals($expected, $actual);
  63:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Repository/ScheduledPriceRepositoryTest.php:
  31:         $this->assertInstanceOf(EntityRepository::class, $this->fixture);
  63:         $this->assertEquals(2, count($actual));
  64:         $this->assertEquals($productIdA, $actual[0]->getProductId(), 'First product');
  65:         $this->assertEquals($productIdB, $actual[1]->getProductId(), 'Second product');
  93:         $this->assertEquals(2, count($actual), 'Count is off');
  94:         $this->assertEquals($productId, $actual[0]->getProductId(), 'Original');
  95:         $this->assertEquals($productId, $actual[1]->getProductId(), 'Reverted');

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Repository/SubscriptionRepositoryTest.php:
    72:         $this->assertNotEmpty($subscription);
    87:         $this->assertEquals($days, $subscription->getFrequency()->d);
   115:         $this->assertLineListEquals(
   151:         $this->assertLineListEquals($expected, $subscription);
   285:         $this->assertTrue($subscription->removeLine($subscription->getLineItemList()[0]));
   286:         $this->assertCount(0, $subscription->getLineItemList());
   292:         $this->assertCount(0, $subscription->getLineItemList());
   316:         $this->assertSame($line, $subscription->removeLineIndex(0));
   317:         $this->assertCount(0, $subscription->getLineItemList());
   323:         $this->assertCount(0, $subscription->getLineItemList());
   346:         $this->assertCount($expected, $this->fixture->findByCustomer($target));
   348:         $this->assertCount($expected, $this->fixture->findByCustomer([$target]));
   350:         $this->assertCount($expected, $this->fixture->findByCustomer($target->getId()));
   352:         $this->assertCount($expected, $this->fixture->findByCustomer([$target->getId()]));
   370:         $this->assertEquals(
   399:         $this->assertNotEmpty($subscription);
   430:         $this->assertEquals($productId, $subscription->getLineItemList()[0]->getProductId());
   455:         $this->assertEquals(
   477:         $this->assertEquals(
   481:         $this->assertEquals(
   501:         $this->assertEquals(
   506:         $this->assertEquals(
   520:         $this->assertEquals(
   524:         $this->assertEquals(
   555:         $this->assertCount(1, $entity->getEventLog());
   557:         $this->assertEquals(
   581:         $this->assertEquals(0, $this->fixture->count([]));
   597:         $this->assertEquals(2, $this->fixture->count([]));
   628:         $this->assertEquals(2, $this->fixture->count([]));
   645:         $this->assertEquals(2, $this->fixture->count([]));
   677:         $this->assertEquals(1, $this->fixture->count([]));
   709:         $this->assertEquals(2, $this->fixture->count([]));
   741:         $this->assertCount($expected, $this->fixture->getSubscriptionByPaymentDetails($target, $payment));
   744:         $this->assertCount(
   781:         $this->assertContainsOnlyInstancesOf(Subscription::class, $list);
   782:         $this->assertEquals($expected, $actual);
   877:         $this->assertEquals($expected, $actual);
   952:         $this->assertCount(2, $entityList);
   953:         $this->assertEquals($newProductId, $entityList[0]->getLineItemList()[0]->getProductId());
   954:         $this->assertEquals($productIdB, $entityList[1]->getLineItemList()[0]->getProductId());
  1014:         $this->assertArraySubset($expected, $actualData);
  1015:         $this->assertCount(

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Repository/SupplierEdiCapabilityRepositoryTest.php:
   40:         $this->assertInstanceOf(RWEntityRepository::class, $this->fixture);
   61:         $this->assertEquals(array_keys($unassociatedSupplierAccountList), array_keys($actual));
   68:         $this->assertNull($this->fixture->getEdiMemberForAccount($supplierAccount));
   89:         $this->assertInstanceOf(SupplierEdiCapability::class, $actual);
   90:         $this->assertEquals($receiverId, $actual->getReceiverId());
  109:         $this->assertNull($actual);
  119:         $this->assertNull($this->fixture->getEdiPoMemberForAccount($supplierAccount));
  137:         $this->assertNull($this->fixture->getEdiPoMemberForAccount($supplierAccount));
  159:         $this->assertInstanceOf(SupplierEdiCapability::class, $actual);
  160:         $this->assertEquals($receiverId, $actual->getReceiverId());
  180:         $this->assertNull($actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Repository/TaxRateRepositoryTest.php:
   45:         $this->assertEquals($expected, $actual);
  117:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Repository/TheirPriceRepositoryTest.php:
   41:         $this->assertInstanceOf(EntityRepository::class, $this->fixture);
   59:         $this->assertCompetitorsEquals($expectedOutput, $results->toArray());
  116:             $this->assertCompetitorsEquals($expected, $actual, $message);
  173:             $this->assertCompetitorsEquals($expected, $actual, $message);
  195:             $this->assertCompetitorsEquals($expected, $actual, $message);
  356:                 $this->assertEquals($expected[$id][$actual->getSource()][$actual->getName()], $actual->getUrl());
  421:                 $this->assertEquals(
  485:             $this->assertCompetitorsEquals($expectedList[$id], [$actual]);
  572:         $this->assertEquals($expected, $this->priceToArray($actual));
  601:         $this->assertEquals($expected, $this->priceToArray($actual));
  793:         $this->assertEquals($trimmedExpected, $trimmedActual, $message);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Repository/TrackingNumbersRepositoryTest.php:
   59:         $this->assertTrackingListResults($resultList, $trackingNumberList, $expectedKeyList);
  116:         $this->assertEquals($actual, $expected, 'Tracking numbers expected did not match');

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Request/ParamConverter/SubscriptionParamConverterTest.php:
  50:         $this->assertInstanceOf(ParamConverterInterface::class, $this->fixture);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Search/Guzzle/ClientAdapterTest.php:
   41:         $this->assertInstanceOf(ClientInterface::class, $this->fixture);
   52:         $this->assertNull($actual);
   85:         $this->assertInstanceOf(ResponseAdapter::class, $actual);
   86:         $this->assertEquals($response, $actual->getResponse());
  104:         $this->assertEquals($keywords, $actual->getKeywords());
  121:         $this->assertEquals($facetList, $actual->getSelectedFacetList());

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Search/Guzzle/RequestAdapterTest.php:
  22:         $this->assertInstanceOf(ClientRequestInterface::class, $this->fixture);
  32:         $this->assertSame($guzzleRequest, $actual);
  43:         $this->assertEquals($keywords, $actual);
  54:         $this->assertEquals($facetList, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Search/Guzzle/ResponseAdapterTest.php:
  22:         $this->assertInstanceOf(ClientResponseInterface::class, $this->fixture);
  32:         $this->assertSame($guzzleResponse, $actual);
  43:         $this->assertSame($keywords, $actual);
  54:         $this->assertEquals($facetList, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Search/PartialSku/ClientAdapterTest.php:
   43:         $this->assertInstanceOf(ClientInterface::class, $this->fixture);
   54:         $this->assertNull($actual);
   79:         $this->assertInstanceOf(ResponseAdapter::class, $actual);
   80:         $this->assertEquals([], $actual->getResponse());
  132:         $this->assertInstanceOf(ResponseAdapter::class, $actual);
  133:         $this->assertEquals($productList, $actual->getResponse());
  145:         $this->assertEquals($keywords, $actual->getKeywords());
  157:         $this->assertEquals($facetList, $actual->getSelectedFacetList());

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Search/PartialSku/RequestAdapterTest.php:
  20:         $this->assertInstanceOf(ClientRequestInterface::class, $this->fixture);
  33:         $this->assertEquals($skuPiece, $actual['skuPiece']);
  34:         $this->assertEquals($page, $actual['page']);
  35:         $this->assertEquals($limit, $actual['limit']);
  46:         $this->assertEquals($skuPiece, $actual);
  57:         $this->assertEquals($facetList, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Search/PartialSku/RequestFactoryTest.php:
  27:         $this->assertInstanceOf(RequestFactoryInterface::class, $this->fixture);
  41:         $this->assertEquals($expected, $request);
  51:         $this->assertArraySubset(['skuPiece' => ''], $request, true);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Search/PartialSku/ResponseAdapterTest.php:
  26:         $this->assertInstanceOf(ClientResponseInterface::class, $this->fixture);
  36:         $this->assertEquals($productList, $actual);
  46:         $this->assertEquals($keywords, $actual);
  57:         $this->assertEquals($facetList, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Search/PartialSku/ResultsFactoryTest.php:
   47:         $this->assertInstanceOf(ResultsFactoryInterface::class, $this->fixture);
   76:         $this->assertContains(['products', $productList], $parametersList);
  127:         $this->assertEquals($results, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Search/Redirect/ClientAdapterTest.php:
  41:         $this->assertNull($actual);
  51:         $this->assertNull($actual);
  63:         $this->assertNull($actual);
  74:         $this->assertInstanceOf(ClientResponseInterface::class, $actual);
  75:         $this->assertEquals($url, $actual->getResponse(), 'Invalid response');
  76:         $this->assertEquals('', $actual->getKeywords(), 'Invalid keywords');
  77:         $this->assertEquals([], $actual->getSelectedFacetList(), 'Invalid facets');

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Search/Redirect/FilteredRequestFactoryTest.php:
  25:         $this->assertInstanceOf(RequestFactoryInterface::class, $this->fixture);
  39:         $this->assertInstanceOf(RequestAdapter::class, $request);
  40:         $this->assertEquals($expects, $request->getKeywords());

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Search/Redirect/RequestAdapterTest.php:
  29:         $this->assertInstanceOf(ClientRequestInterface::class, $this->fixture);
  35:         $this->assertEquals(['keywords' => $this->keywords], $actual);
  41:         $this->assertEquals($this->keywords, $actual);
  47:         $this->assertEquals([], $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Search/Redirect/RequestFactoryTest.php:
  25:         $this->assertInstanceOf(RequestFactoryInterface::class, $this->fixture);
  37:         $this->assertInstanceOf(RequestAdapter::class, $request);
  38:         $this->assertEquals($keywords, $request->getKeywords());

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Search/Redirect/ResponseAdapterTest.php:
  29:         $this->assertEquals($this->url, $actual);
  35:         $this->assertEquals('', $actual);
  41:         $this->assertEquals([], $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Search/Redirect/ResultsFactoryTest.php:
   43:         $this->assertInstanceOf(ResultsFactoryInterface::class, $this->fixture);
  100:         $this->assertEquals($results, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Search/Redirect/Redirector/ExactSkuRedirectorTest.php:
   52:         $this->assertInstanceOf(RedirectorInterface::class, $this->fixture);
   63:         $this->assertEquals('', $actual);
   76:         $this->assertEquals('', $actual);
   90:         $this->assertEquals('', $actual);
  122:         $this->assertEquals('', $actual);
  150:         $this->assertEquals('', $actual);
  185:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Search/Redirect/Redirector/KeywordRedirectorTest.php:
  32:         $this->assertInstanceOf(RedirectorInterface::class, $this->fixture);
  56:         $this->assertEquals('', $actual);
  71:         $this->assertEquals('', $actual);
  95:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Search/Redirect/Redirector/RedirectRepositoryTest.php:
  39:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Seo/AbstractUrlGeneratorTest.php:
   87:         $this->assertEquals($url, $actual);
  154:         $this->assertEquals([1 => $urlA, 2 => $urlB, 3 => $urlC], $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Service/CarrierRegistryTest.php:
  38:         $this->assertSame($this->defaultAdapter, $actual);
  47:         $this->assertSame($this->defaultAdapter, $actual);
  58:         $this->assertInstanceOf(ApiInterface::class, $responseTracker);
  69:         $this->assertEquals($trackingService, $responseTracker);
  83:         $this->assertEquals($trackingService, $responseTracker);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Service/ChannelPricePointProviderTest.php:
   64:         $this->assertIsArray($actualList);
   65:         $this->assertEquals($price, $actualList[0]->getPrice());
   92:         $this->assertInstanceOf(PricePointInterface::class, $actual);
   93:         $this->assertEquals($price, $actual->getPrice());
  117:         $this->assertIsArray($actualList);
  118:         $this->assertEquals($price, $actualList[$productId]->getPrice());
  119:         $this->assertEquals($price+1, $actualList[$productId+1]->getPrice());
  147:         $this->assertInstanceOf(PricePointInterface::class, $actual);
  148:         $this->assertEquals($price, $actual->getPrice());

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Service/ContextAwarePaymentTest.php:
   54:         $this->assertInstanceOf(Payment::class, $this->fixture);
   85:         $this->assertEquals($response, $actual);
   98:         $this->assertTrue($actual);
  116:         $this->assertEquals($response, $actual);
  127:         $this->assertTrue($actual);
  179:         $this->assertEquals($expected, $actual);
  290:         $this->assertFalse($actual);
  334:         $this->assertEquals($expected, $actual);
  444:         $this->assertEquals($expected, $actual);
  630:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Service/CouponEngineTest.php:
   193:         $this->assertEquals($expected, $results);
   460:         $this->assertEquals($expected, $results);
   646:         $this->assertEquals($expected, $results);
   747:         $this->assertEquals($expected, $actual);
   989:                     $self->assertLineItemsEqual($expected, $lines);
  1000:                     $self->assertLineItemsEqual($expected, $lines);
  1085:                     $self->assertLineItemsEqual($expected, $filteredOrderLines);
  1096:                     $self->assertLineItemsEqual($expected, $filteredOrderLines);
  1264:         $this->assertOrderTotalsEqual($expected, $order->getTotals());
  1393:         $this->assertEquals($expected, $results);
  1507:         $this->assertEquals($expected, $actual);
  1721:         $this->assertCollectionOfEntitiesEqual($expected, $actual, $map, $message);
  1741:         $this->assertCollectionOfEntitiesEqual($expected, $actual, $map, $message);
  1771:         $this->assertEquals($expected, $trimmedActual, $message);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Service/CouponEngineWholeTest.php:
  142:         $this->assertLineItemsEqual($expected, $order->getLineItems(), $comment);
  429:         $this->assertEquals($expected, $trimmedActual, $message);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Service/InvoiceTest.php:
    97:         $this->assertInstanceOf(OrdersInvoices::class, $actual);
   100:             $this->assertEquals($value, $actual->$call());
   138:         $this->assertNull($actual);
   168:         $this->assertInstanceOf(OrdersInvoices::class, $actual);
   170:         $this->assertEquals($invoiceId, $actual->getId(), 'returned a different object then expected');
   208:         $this->assertEquals($expected, $actual);
   470:         $this->assertEquals(OrdersInvoices::STATUS_SHIPPED, $invoice->getState());
   478:             $this->assertSame($invoice, $event->invoice);
   479:             $this->assertTrue($event->isFirstTracking);
   480:             $this->assertNull($event->pickTicket);
   481:             $this->assertNull($event->shippingMethod);
   482:             $this->assertEmpty($event->trackingNumbers);
   485:         $this->assertEqualsCanonicalizing(
   503:         $this->assertEquals(OrdersInvoices::STATUS_DELIVERED, $invoice->getState());
   511:             $this->assertSame($invoice, $event->invoice);
   512:             $this->assertTrue($event->isFirstTracking);
   513:             $this->assertNull($event->pickTicket);
   514:             $this->assertNull($event->shippingMethod);
   515:             $this->assertEmpty($event->trackingNumbers);
   518:         $this->assertEqualsCanonicalizing(
   537:         $this->assertEquals(OrdersInvoices::STATUS_DELIVERED, $invoice->getState());
   545:             $this->assertSame($invoice, $event->invoice);
   546:             $this->assertFalse($event->isFirstTracking);
   547:             $this->assertNull($event->pickTicket);
   548:             $this->assertNull($event->shippingMethod);
   549:             $this->assertEmpty($event->trackingNumbers);
   552:         $this->assertEqualsCanonicalizing(
   571:         $this->assertEquals('Delivered', $invoice->getState());
   576:         $this->assertEquals(['Delivered'], $trackingState);
   584:             $this->assertFalse($event->isFirstTracking);
   587:         $this->assertEqualsCanonicalizing(
   608:         $this->assertEquals('Delivered', $invoice->getState());
   613:         $this->assertEquals([$oddTrackingState], $trackingState);
   621:             $this->assertFalse($event->isFirstTracking);
   624:         $this->assertEqualsCanonicalizing(
   663:         $this->assertEquals($expected, $actual);
   884:         $this->assertSame($expected, $actual->isFirstTracking);
   912:         $this->assertEquals($trackingList, $actual);
   932:         $this->assertEquals($trackingList, $actual);
   949:         $this->assertEquals([], $actual);
   979:         $this->assertEquals($expected, $actual);
   981:         $this->assertEventsCalled($events, $spy);
  1212:         $this->assertInstanceOf(Search::class, $actual);
  1231:         $this->assertEquals($expected, $actualIdList);
  1288:         $this->assertEquals($expected, $actual);
  1308:         $this->assertEquals($expected, $eventsSent, $message);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Service/ObservablePaymentRecordsTest.php:
   74:         $this->assertSame($payment, $actual, 'Did not return the same results as the base');
   92:         $this->assertSame($expected, $actual, 'Did not return the same results as the base');
  109:         $this->assertEquals($expected, $actual, 'Did not return the same results as the base');
  126:         $this->assertEquals($expected, $actual, 'Did not return the same results as the base');
  143:         $this->assertEquals($expected, $actual, 'Did not return the same results as the base');
  160:         $this->assertEquals($expected, $actual, 'Did not return the same results as the base');
  178:         $this->assertSame($order, $actual, 'Did not return the same results as the base');
  198:         $this->assertSame($expected, $actual, 'Did not return the same results as the base');
  215:         $this->assertSame($rand, $actual, 'Did not return the same results as the base');
  233:         $this->assertSame($rand, $actual, 'Did not return the same results as the base');
  246:         $this->assertEquals($expected, $actual);
  271:         $this->assertSame($details, $actual);
  295:         $this->assertSame($details, $actual);
  312:         $this->assertEquals($amount, $actual);
  329:         $this->assertEquals($amount, $actual);
  346:         $this->assertEquals($amount, $actual);
  366:         $this->assertEquals($expected, $actual);
  383:         $this->assertEquals($expected, $actual);
  402:         $this->assertEquals($details, $actual);
  413:         $this->assertNull($actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Service/PaymentRecordsTest.php:
    81:         $this->assertPaymentIsForOrderResults($order, $paymentResult, $payment);
    96:         $this->assertPaymentIsForOrderResults(
   102:         $this->assertPaymentListForOrder($order, [$paymentResult, $childPaymentResult]);
   128:         $this->assertPaymentIsForOrderResults($order, $paymentResult, $payment);
   134:         $this->assertPaymentIsForOrderResults($order, $paymentResult, $payment);
   149:         $this->assertPaymentListForOrder($order, [$paymentResult, $childPaymentResult]);
   169:         $this->assertPaymentListForOrder($order, [$paymentResult, $childPaymentResult]);
   193:         $this->assertPaymentListForOrder($order, [$additionalPayment, $paymentResult, $childPaymentResult]);
   207:         $this->assertPaymentIsForOrderResults($order, $paymentResult, $payment);
   215:         $this->assertPaymentIsForOrderResults($order, $paymentResult, $payment);
   228:         $this->assertPaymentIsForOrderResults($order, $paymentResult, $payment);
   245:         $this->assertPaymentIsForOrderResults($order, $paymentResult, $payment);
   277:         $this->assertEquals($isEditable, $this->fixture->orderIsPubliclyEditable($order), 'Order is editable');
   278:         $this->assertEquals($isPaid, $this->fixture->orderIsPaid($order), 'Order is paid');
   279:         $this->assertEquals($isShippable, $this->fixture->orderIsShippable($order), 'Order is shippable');
   280:         $this->assertEquals($isRefunded, $this->fixture->orderIsRefunded($order), 'Order is refunded');
   544:         $this->assertPaymentIsForOrderResults($order, $paymentResult, $payment);
   550:         $this->assertEquals($order->getId(), $found->getId());
   559:         $this->assertNull($actual);
   568:         $this->assertNull($actual);
   577:         $this->assertNull($actual);
   597:         $this->assertNull($actual);
   605:         $this->assertEmpty($payments);
   615:         $this->assertPaymentIsForOrderResults($order, $paymentResult, $payment);
   619:         $this->assertPaymentIsForOrderResults($order, $paymentResult, $payment);
   658:         $this->assertEquals($expected, $actualTransactionList);
   751:         $this->assertSame($expectedOrderIds, $actualOrderIds);
  1113:         $this->assertSame([], $actualOrderIds);
  1294:         $this->assertSame($paymentDetails, $actual);
  1326:         $this->assertSame($details, $actual);
  1355:         $this->assertEquals($expected, $actual);
  1531:         $this->assertEquals($expected, $actual);
  1654:         $this->assertEquals($expected, $actual, $message);
  1730:         $this->assertCount(count($paymentResultList), $list, 'Did not find all payments for the order');
  1741:         $this->assertEquals(array_keys($expectedList), array_keys($actualList), 'Mismatched transaction IDs');
  1744:             $this->assertPaymentIsForOrderResults($order, $expectedList[$index], $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Service/PaymentTest.php:
    63:         $this->assertNull($this->fixture->getLabel('missing'));
    73:         $this->assertEquals($label, $this->fixture->getLabel($system));
    83:         $this->assertEquals($label, $this->fixture->getLabel($system));
   119:         $this->assertEquals($expected, $actual);
   161:         $this->assertEquals([], $this->fixture->availablePaymentSystems($feature));
   162:         $this->assertEquals([], $this->fixture->availablePaymentSystems($otherF));
   166:         $this->assertEquals([$system], $this->fixture->availablePaymentSystems($feature));
   167:         $this->assertEquals([], $this->fixture->availablePaymentSystems($otherF));
   174:         $this->assertEquals([], $this->fixture->getForms($order));
   194:         $this->assertEquals($expected, $actual);
   224:         $this->assertEquals($expected, $actual);
   245:         $this->assertEquals($expected, $this->fixture->getForms($order));
   322:         $this->assertSame($resultB, $actual);
   363:         $this->assertSame($response, $actual);
   449:         $this->assertSame($resultB, $actual);
   509:         $this->assertSame($resultB, $actual);
   560:         $this->assertSame($resultB, $actual);
   628:         $this->assertSame($resultB, $actual);
   769:         $this->assertSame($resultB, $actual);
   837:         $this->assertSame($resultB, $actual);
   874:         $this->assertEquals($response, $actual);
   921:         $this->assertSame($response, $actual);
  1031:         $this->assertSame($resultB, $actual);
  1050:         $this->assertSame(

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Service/ProductImageTest.php:
  110:         $this->assertSame($image, $actual);
  155:         $this->assertInstanceOf(ProductImageEntity::class, $actual);
  170:         $this->assertInstanceOf(ProductImageEntity::class, $actual);
  180:         $this->assertInstanceOf(ProductImageEntity::class, $actual);
  193:         $this->assertInstanceOf(ProductImageEntity::class, $actual);
  194:         $this->assertSame($productId, $actual->getProductId(), 'Product ID does not match');
  195:         $this->assertSame($hash, $actual->getHash(), 'Hash does not match');
  196:         $this->assertSame($sourceId, $actual->getSourceId(), 'Source does not match');
  269:         $this->assertSame($image, $actual);
  322:         $this->assertInstanceOf(ProductImageEntity::class, $actual);
  339:         $this->assertInstanceOf(ProductImageEntity::class, $actual);
  351:         $this->assertInstanceOf(ProductImageEntity::class, $actual);
  367:         $this->assertInstanceOf(ProductImageEntity::class, $actual);
  368:         $this->assertSame($productId, $actual->getProductId(), 'Product ID does not match');
  369:         $this->assertSame($hash, $actual->getHash(), 'Hash does not match');
  370:         $this->assertSame($sourceId, $actual->getSourceId(), 'Source does not match');
  391:         $this->assertNull($actual);
  408:         $this->assertInstanceOf(ProductImageEntity::class, $actual);
  425:         $this->assertInstanceOf(ProductImageEntity::class, $actual);
  441:         $this->assertInstanceOf(ProductImageEntity::class, $actual);
  442:         $this->assertSame($productId, $actual->getProductId(), 'Product ID does not match');
  443:         $this->assertSame($hash, $actual->getHash(), 'Hash does not match');
  444:         $this->assertSame($sourceId, $actual->getSourceId(), 'Source does not match');
  445:         $this->assertSame($size, $actual->getOrigSize(), 'Size does not match');
  467:         $this->assertCount($count, $invocationList);
  468:         $this->assertContainsOnlyInstancesOf(ProductImageEntity::class, $actual);
  529:         $this->assertNull($actual);
  629:         $this->assertSame([$imageA, $imageC], $actual);
  655:         $this->assertSame([$imageB, $imageC], $actual);
  689:         $this->assertNull($actual);
  701:         $this->assertInstanceOf(Image::class, $actual);
  724:         $this->assertNull($actual);
  736:         $this->assertSame($image, $actual);
  783:         $this->assertSame($url, $actual);
  840:         $this->assertSame($url, $actual);
  851:         $this->assertSame('', $actual);
  877:         $this->assertCount($count, $actual);
  878:         $this->assertContainsOnlyInstancesOf(Image::class, $actual);
  905:         $this->assertCount($count, $actual);
  906:         $this->assertContainsOnlyInstancesOf(Image::class, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Service/ProductMediaTest.php:
   80:         $this->assertSame($mediaEntity, $actual);
  107:         $this->assertEquals($mediaEntity, $actual);
  123:         $this->assertSameSize($typeList, $invocationList);
  125:             $this->assertSame($product, $invocation->getParameters()[0]);
  126:             $this->assertEquals($typeList[$index], $invocation->getParameters()[1]);
  334:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Service/QuoteTest.php:
   62:         $this->assertInstanceOf(Quotes::class, $actual);
   85:         $this->assertEquals($sku, $actual->getModel());
   98:         $this->assertSame(0, $actual->getQuantity());
  112:         $this->assertSame($qty, $actual->getQuantity());
  126:         $this->assertEquals($comments, $actual->getComments());
  139:         $this->assertSame(0, $actual->getCustomersId());
  157:         $this->assertSame($customerId, $actual->getCustomersId());
  172:         $this->assertEquals(LocalClock::getTime(), $actual->getRequestDate());
  186:         $this->assertEquals($expected, $actual->getRequiredDate());
  200:         $this->assertEquals($expected, $actual->getExpire());
  213:         $this->assertEquals('pending', $actual->getStatus());
  226:         $this->assertSame(0, $actual->getStatusColor());
  239:         $this->assertEquals('', $actual->getStatusComments());
  255:         $this->assertEquals($postData, unserialize($actual->getPostdata()));
  270:         $this->assertEquals($postData, unserialize($actual->getPostdata()));
  285:         $this->assertEquals($postData, unserialize($actual->getPostdata()));

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Service/RebateTest.php:
  120:         $this->assertEquals([], $results);
  141:         $this->assertEquals([], $results);
  159:         $this->assertEquals([], $results);
  177:         $this->assertEquals([], $results);
  201:         $this->assertRebateCollection([$rebate->getId()], $results);
  225:         $this->assertRebateCollection([$rebate->getId()], $results);
  251:         $this->assertEquals([], $results);
  277:         $this->assertRebateCollection([], $results);
  303:         $this->assertEquals([], $results);
  329:         $this->assertRebateCollection([], $results);
  353:         $this->assertEquals([], $results);
  377:         $this->assertRebateCollection([$rebate->getId()], $results);
  407:         $this->assertEquals([1 => $rebate], $results);
  438:         $this->assertEquals([1 => $rebate], $results);
  469:         $this->assertEquals([1 => $rebate], $results);
  500:         $this->assertEquals([1 => $rebate], $results);
  654:         $this->assertEquals($expectedIdList, $actualIdList, $message);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Service/UspsAddressValidationTest.php:
   46:         $this->assertInstanceOf(AddressValidationInterface::class, $this->fixture);
  226:         $this->assertInstanceOf(ValidationResponseInterface::class, $actual);
  227:         $this->assertEquals($status, $actual->getStatus());
  228:         $this->assertNull($actual->getType());
  229:         $this->assertEquals($isValid, $actual->isValid());
  230:         $this->assertEquals($isAmbiguous, $actual->isAmbiguous());
  231:         $this->assertFalse($actual->hasErrors());
  232:         $this->assertSuggestionsEqual($suggestedList, $actual->getSuggestedAddresses());
  476:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Service/CouponEngine/ResultDeterminerTest.php:
   38:         $this->assertEquals($expected, $actual);
  141:         $this->assertEquals($return, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Service/CouponEngine/ApplicationStrategy/AllTest.php:
  29:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Service/CouponEngine/ApplicationStrategy/BiggestTest.php:
  29:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Service/CouponEngine/ApplicationStrategy/FirstTest.php:
  29:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Service/CouponEngine/Effect/CategoryDiscountEffectTest.php:
   51:         $this->assertEquals(0.0, $actual);
   52:         $this->assertIsFloat($actual);
   59:         $this->assertEquals([], $flags);
   85:         $this->assertEquals(0, $actual);
   86:         $this->assertIsFloat($actual);
   93:         $this->assertEquals([CartInterface::NORMAL], $flags);
  119:         $this->assertEquals(-20, $actual);
  120:         $this->assertIsFloat($actual);
  127:         $this->assertEquals([CartInterface::COUPONED], $flags);
  153:         $this->assertEquals(-2.0, $actual);
  154:         $this->assertIsFloat($actual);
  161:         $this->assertEquals([CartInterface::COUPONED], $flags);
  194:         $this->assertEquals(-2.40, $actual);
  195:         $this->assertIsFloat($actual);
  202:         $this->assertEquals(
  241:         $this->assertEquals(-40, $actual);
  242:         $this->assertIsFloat($actual);
  249:         $this->assertEquals(
  288:         $this->assertEquals(-40, $actual);
  289:         $this->assertIsFloat($actual);
  296:         $this->assertEquals(
  335:         $this->assertEquals(-20, $actual);
  336:         $this->assertIsFloat($actual);
  343:         $this->assertEquals(
  381:         $this->assertFalse($actual);
  382:         $this->assertIsBool($actual);
  389:         $this->assertEquals(
  421:         $this->assertFalse($actual);
  422:         $this->assertIsBool($actual);
  429:         $this->assertEquals(
  468:         $this->assertEquals(-0.20, $actual);
  469:         $this->assertIsFloat($actual);
  476:         $this->assertEquals(
  516:         $this->assertEquals(-0.40, $actual);
  517:         $this->assertIsFloat($actual);
  524:         $this->assertEquals(

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Service/CouponEngine/Effect/DiscountEffectTest.php:
   45:         $this->assertEquals($expected, $results);
   46:         $this->assertIsFloat($results);
   52:         $this->assertEquals($expectedFlags, $flags);
  159:         $this->assertFalse($results);
  165:         $this->assertEquals($expectedFlags, $flags);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Service/CouponEngine/Effect/ExtremumDiscountEffectTest.php:
   45:         $this->assertEquals($expected, $results);
   46:         $this->assertIsFloat($results);
   52:         $this->assertEquals($expectedFlags, $flags);
  164:         $this->assertFalse($results);
  170:         $this->assertEquals($expectedFlags, $flags);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Service/CouponEngine/Effect/FreeItemEffectTest.php:
   99:         $this->assertLineItemsEqual($expectedOrderLines, $order->getLineItems());
  100:         $this->assertEquals($expected, $results);
  101:         $this->assertIsFloat($results);
  132:         $this->assertEquals($expected, $actual);
  133:         $this->assertLineItemsEqual($expectedOrderLines, $order->getLineItems());
  134:         $this->assertIsFloat($actual);
  222:         $this->assertNull($actual);
  223:         $this->assertLineItemsEqual($expectedOrderLines, $order->getLineItems());
  279:         $this->assertLineItemsEqual($expectedOrderLines, $order->getLineItems());
  280:         $this->assertEquals($expected, $results);
  281:         $this->assertIsFloat($results);
  286:         $this->assertLineItemsEqual($expectedOrderLines, $order->getLineItems());
  287:         $this->assertEquals($expected, $results);
  288:         $this->assertIsFloat($results);
  580:         $this->assertCollectionOfEntitiesEqual($expected, $actual, $map, $message);
  612:         $this->assertEquals($expected, $trimmedActual, $message);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Service/CouponEngine/Effect/FreeShippingEffectTest.php:
  38:         $this->assertEquals(

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Service/CouponEngine/Effect/ProductDiscountEffectTest.php:
   53:         $this->assertEquals($expected, $results);
   54:         $this->assertIsFloat($results);
   60:         $this->assertEquals($expectedFlags, $flags);
  300:         $this->assertFalse($results);
  306:         $this->assertEquals($expectedFlags, $flags);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Service/CouponEngine/Requirement/AnniversaryRequirementTest.php:
   83:         $this->assertEquals($expected, $results);
  297:         $this->assertIsArray($actual);
  307:         $this->assertEquals([], $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Service/CouponEngine/Requirement/CategoryRequirementTest.php:
   56:         $this->assertEquals($expected, $results);
  239:         $this->assertIsArray($actual);
  285:         $this->assertCount(1, $actual, 'Only one line remains eligible.');
  288:         $this->assertInstanceOf(OrderLineItem::class, $actualLine);
  289:         $this->assertSame($expectedPrice, $actualLine->getItemPrice());
  290:         $this->assertSame($expectedQty, $actualLine->getQuantity());
  336:         $this->assertCount(1, $actual, 'Only one line remains eligible.');
  339:         $this->assertInstanceOf(OrderLineItem::class, $actualLine);
  340:         $this->assertSame($expectedPrice, $actualLine->getItemPrice());
  341:         $this->assertSame($expectedQty, $actualLine->getQuantity());

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Service/CouponEngine/Requirement/NewsletterRequirementTest.php:
   49:         $this->assertEquals($expected, $results);
  117:         $this->assertIsArray($actual);
  127:         $this->assertEquals([], $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Service/CouponEngine/Requirement/OrderRequirementTest.php:
   48:         $this->assertEquals($expected, $results);
  169:         $this->assertIsArray($actual);
  179:         $this->assertEquals($lines, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Service/CouponEngine/Requirement/ProductRequirementTest.php:
   48:         $this->assertEquals($expected, $results);
  207:         $this->assertIsArray($actual);
  241:         $this->assertLinesMatch($orderLines, $actual);
  275:         $this->assertCount(1, $actual);
  276:         $this->assertLinesMatch([1 => end($orderLines)], $actual);
  360:             $this->assertEquals($line->getProductId(), $actualLines[$key]->getProductId());
  361:             $this->assertEquals($line->getSku(), $actualLines[$key]->getSku());
  362:             $this->assertEquals($line->getProductName(), $actualLines[$key]->getProductName());
  363:             $this->assertEquals($line->getItemPrice(), $actualLines[$key]->getItemPrice());
  364:             $this->assertEquals($line->getQuantity(), $actualLines[$key]->getQuantity());
  365:             $this->assertEquals($line->getChannel(), $actualLines[$key]->getChannel());
  366:             $this->assertEquals($line->getFlags(), $actualLines[$key]->getFlags());
  367:             $this->assertEquals($line->getUnit(), $actualLines[$key]->getUnit());

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Service/CouponEngine/Requirement/ThankYouRequirementTest.php:
   82:         $this->assertEquals($expected, $results);
  255:         $this->assertIsArray($actual);
  265:         $this->assertEquals([], $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Service/CouponEngine/Requirement/UsageRequirementTest.php:
   80:         $this->assertEquals($expected, $results);
  251:         $this->assertIsArray($actual);
  261:         $this->assertEquals([], $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Service/Customer/AddressBookTest.php:
  57:         $this->assertNull($actual);
  68:         $this->assertNull($actual);
  80:         $this->assertSame($address, $actual);
  92:         $this->assertSame($address, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Service/Invoice/NormalizerTest.php:
  41:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Service/Invoice/SearchTest.php:
   46:         $this->assertInstanceOf(QueryBuilder::class, $this->fixture);
   58:         $this->assertInvoiceIds($expected);
  107:         $this->assertInvoiceIds($expected);
  156:         $this->assertInvoiceIds($expected);
  223:         $this->assertInvoiceIds($expected);
  272:         $this->assertInvoiceIds($expected);
  321:         $this->assertInvoiceIds($expected);
  373:         $this->assertInvoiceIds($expected);
  385:         $this->assertInvoiceIds($expected);
  460:         $this->assertInvoiceIds($expected);
  474:         $this->assertInvoiceIds($expected);
  549:         $this->assertInvoiceIds($expected);
  685:         $this->assertCount(count($expected), $actual);
  686:         $this->assertEquals($expected, $actualIdList);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Service/Invoice/TrackingDbTest.php:
  72:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Service/Invoice/TrackingTest.php:
   74:                     $this->assertTrue($trackingNumber === $event->tracking);
   80:         $this->assertEquals('Delivered', $trackingNumber->getState());
   93:         $this->assertEquals('Delivered', $trackingNumber->getState());
  111:                     $this->assertTrue($trackingNumber === $event->tracking);
  117:         $this->assertEquals('Shipped', $trackingNumber->getState());
  139:         $this->assertEquals('Shipped', $trackingNumber->getState());
  192:         $this->assertEquals('BIR', $trackingNumber->getState());
  210:         $this->assertEquals('BIR', $trackingNumber->getState());
  235:         $this->assertEquals('BIR', $trackingNumber->getState());
  259:         $this->assertEquals('BIR', $trackingNumber->getState());
  285:                     $self->assertTrue($trackingNumber === $event->tracking);
  291:         $this->assertEquals('Shipped', $trackingNumber->getState());
  317:                     $self->assertTrue($trackingNumber === $event->tracking);
  323:         $this->assertEquals('Delivered', $trackingNumber->getState());
  336:         $this->assertFalse($actual);
  353:         $this->assertTrue($actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Service/Invoice/Tracking/SearchTest.php:
   94:         $this->assertTaggedTrackingFound(['late'], $results);
  112:         $this->assertTaggedTrackingFound(['early'], $results);
  130:         $this->assertTaggedTrackingFound(['beta'], $results);
  147:         $this->assertTaggedTrackingFound(['alpha', 'beta'], $results);
  165:         $this->assertTaggedTrackingFound(['alpha', 'beta'], $results);
  183:         $this->assertTaggedTrackingFound(['beta'], $results);
  201:         $this->assertTaggedTrackingFound(['beta'], $results);
  219:         $this->assertTaggedTrackingFound(['alpha', 'gamma'], $results);
  237:         $this->assertTaggedTrackingFound(['alpha', 'gamma'], $results);
  255:         $this->assertTaggedTrackingFound(['alpha', 'beta'], $results);
  273:         $this->assertTaggedTrackingFound(['alpha', 'gamma'], $results);
  296:         $this->assertTaggedTrackingFound([$tagA, $tagB, $tagC], $results);
  323:         $this->assertCount(2, $results);
  324:         $this->assertEquals($tagB, $results[0]->getTrackingNumber());
  325:         $this->assertEquals($tagA, $results[1]->getTrackingNumber());
  347:         $this->assertEquals($expected, $tags, $message);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Service/Payment/CreditCardMaskerTest.php:
  26:         $this->assertSame('', $actual);
  38:         $this->assertEquals($mask.$lastFour, $actual);
  51:         $this->assertEquals($firstDigit.$mask.$lastFour, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Service/Payment/IpnConsumerTest.php:
  53:         $this->assertEquals(SqsConsumerInterface::MSG_REJECT, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Service/Payment/OnSiteThrottledTest.php:
   55:         $this->assertSame($result, $actual);
   83:         $this->assertSame(PaymentResultInterface::ERROR_DECLINE, $actual->getErrorType());
  100:         $this->assertSame($result, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Service/Payment/RefundPreCheckerTest.php:
   87:         $this->assertEquals($expected, $actual);
  121:         $this->assertEquals($amount, $actual);
  133:         $this->assertEquals($amount, $actual);
  173:         $this->assertNull($actual);
  185:         $this->assertNull($actual);
  199:         $this->assertNull($actual);
  213:         $this->assertNull($actual);
  240:         $this->assertInstanceOf(PaymentResult::class, $actual);
  241:         $this->assertEquals(PaymentResult::FAILED, $actual->getStatus());
  242:         $this->assertEquals(PaymentResult::ERROR_REQUEST, $actual->getErrorType());
  243:         $this->assertEquals($expected, $actual->getMessage());

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Service/Payment/CreditCard/AbstractOnSiteTest.php:
  28:         $this->assertInstanceOf(OnSiteInterface::class, $this->fixture);
  37:         $this->assertInstanceOf(OnSiteForm::class, $actual);
  38:         $this->assertEquals(CreditCardPaymentType::class, $actual->getFormType());

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Service/Payment/CreditCard/OnSiteCollectionTest.php:
   73:         $this->logger->assertLogsContains($expected, 'Log missing expected message');
  122:         $this->assertEquals($expected, $response->getLogDetail());
  172:         $this->assertEquals($expected, $response->getLogDetail());
  207:         $this->assertEquals($logDetailA, $response->getLogDetail());
  241:         $this->assertEquals($logDetailA, $response->getLogDetail());

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Service/Payment/Listener/PaymentDeleteListenerTest.php:
  50:         $this->assertFalse($event->isPropagationStopped());
  73:         $this->assertFalse($event->isPropagationStopped());
  89:         $this->assertTrue($event->isPropagationStopped());
  90:         $this->assertEquals($reason, $event->message);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Service/Payment/ManualEntry/OnSiteTest.php:
  39:         $this->assertInstanceOf(OnSiteInterface::class, $this->fixture);
  49:         $this->assertInstanceOf(OnSiteForm::class, $actual);
  50:         $this->assertEquals(ManualEntryPaymentType::class, $actual->getFormType());
  51:         $this->assertEquals(['systemNames' => $systemList], $actual->getOptions());
  76:         $this->assertEquals($expected, $actual);
  93:         $this->assertEquals($amount, $actual->getAmount());

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Service/Payment/ManualEntry/RefundTest.php:
   49:         $this->assertEquals($payment->getSystem(), $actual->getSystem());
   50:         $this->assertEquals($payment->getTransactionId(), $actual->getTransactionId());
   53:         $this->assertCount(1, $actualChildList);
   57:         $this->assertEquals($payment->getSystem(), $actualChild->getSystem());
   58:         $this->assertEquals($payment->getTransactionId().':'.$count, $actualChild->getTransactionId());
   59:         $this->assertEquals('Refund: '.$payment->getSummary(), $actualChild->getSummary());
   60:         $this->assertEquals(Payment::PAID, $actualChild->getStatus());
   61:         $this->assertStringContainsString($payment->getTransactionId(), $actual->getLogDetail());
   62:         $this->assertStringContainsString($reason, $actual->getLogDetail());
   82:         $this->assertNull($actual->getAmount());
   83:         $this->assertEquals(-$amount, $actualChild->getAmount());
  104:         $this->assertNull($actual->getAmount());
  105:         $this->assertEquals(-$amount, $actualChild->getAmount());
  140:         $this->assertNull($actual->getAmount());
  141:         $this->assertEqualsWithDelta(-array_sum([$amount, $partRefunded]), $actualChild->getAmount(), 0.0001);
  156:         $this->assertFalse($actual->isSuccessful());
  157:         $this->assertEquals(Refund::ERROR_NEGATIVE_REFUND, $actual->getMessage());

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Service/Payment/MoneyOrder/OnSiteTest.php:
  39:         $this->assertInstanceOf(OnSiteInterface::class, $this->fixture);
  48:         $this->assertInstanceOf(OnSiteForm::class, $actual);
  49:         $this->assertEquals(PreRenderedType::class, $actual->getFormType());
  50:         $this->assertEquals(['data' => $this->text], $actual->getOptions());
  71:         $this->assertEquals($expected, $actual);
  85:         $this->assertEquals($amount, $actual->getAmount());

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Service/Payment/PaymentResult/MergerTest.php:
   35:         $this->assertEquals($value, $actual->$method());
   66:         $this->assertEquals($errorType, $actual->getErrorType(), 'getErrorType() failed.');
   67:         $this->assertEquals($isSuccessful, $actual->isSuccessful(), 'isSuccessful() failed.');
   68:         $this->assertEquals($isError, $actual->isError(), 'isError() failed.');
   87:         $this->assertEquals($logDetails, $actual->getLogDetail());
   98:         $this->assertSame([$childResult, $refundResult], $actual->getChildPaymentList());
  112:         $this->assertSame([$childResultB, $refundResult], $actual->getChildPaymentList());
  128:         $this->assertSame($expected, $actual->getChildPaymentList());

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Service/Payment/PaymentResult/SystemNameManagerTest.php:
   33:         $this->assertEquals($system, $actual);
   46:         $this->assertEquals($system, $actual);
   59:         $this->assertEquals($system, $actual);
  110:         $this->assertSame($result, $actual);
  124:         $this->assertSame($result, $actual);
  142:         $this->assertSame($result, $actual);
  160:         $this->assertSame($result, $actual);
  186:         $this->assertInstanceOf(SystemNameDecorator::class, $actual);
  187:         $this->assertEquals($system, $actual->getSystem());

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Service/Payment/PayPal/IPNTest.php:
  41:         $this->assertInstanceOf(IpnInterface::class, $this->fixture);
  65:         $this->assertInstanceOf(Response::class, $actual);
  66:         $this->assertEquals(200, $actual->getStatusCode());
  67:         $this->assertEquals('', $actual->getContent());

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Service/Payment/PayPal/OnSiteTest.php:
   78:         $this->assertPaymentResponseEquals($expectedResponse, $actual);
  503:         $this->assertRequestMatches('DoDirectPayment', $this->remote['request'], $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Service/Payment/PayPal/RefundTest.php:
   88:         $this->assertPaymentResponseEquals($expectedResponse, $actual);
  578:         $this->assertRequestMatches('RefundTransaction', $this->remote['request'], $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Service/Payment/PayPal/SerializerTest.php:
   65:         $this->assertInstanceOf(PaymentDetailsType::class, $actual);
   79:         $this->assertEquals('Sale', $actual->PaymentAction);
  104:         $this->assertEquals(
  126:         $this->assertEquals($orderId, $actual->InvoiceID);
  145:         $this->assertInstanceOf(BasicAmountType::class, $actual->OrderTotal);
  146:         $this->assertEquals('USD', $actual->OrderTotal->currencyID);
  147:         $this->assertEqualsWithDelta($total, $actual->OrderTotal->value, 0.01);
  206:         $this->assertEquals($expected, $actual);
  527:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Service/Payment/PayPal/StatusCheckTest.php:
   55:         $this->assertPaymentResponseEquals($expectedResponse, $actual);
  406:         $this->assertRequestMatches('TransactionSearch', $this->remote['request'], $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Service/Payment/PayPal/TestCase.php:
  107:         $this->assertEquals($expected, $trimmed, $message);
  123:         $this->assertInstanceOf('PayPal\\PayPalAPI\\'.$type.'Req', $actual, $message);
  124:         $this->assertInstanceOf(
  132:         $this->assertEquals($expected, $trimmed, $message);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Service/Payment/PayPal/Ipn/ConsumerTest.php:
   79:         $this->assertEquals(SqsConsumerInterface::MSG_REJECT, $actual);
  102:         $this->logger->assertMessageLogged(LogLevel::INFO, 'PayPal IPN request', $body);
  337:         $this->logger->assertMessageLogged(LogLevel::INFO, 'PayPal IPN updated payment');
  338:         $this->assertEquals(SqsConsumerInterface::MSG_ACK, $actual);
  349:         $this->logger->assertMessageLogged(LogLevel::ERROR, 'PayPal IPN request not handled', $body);
  350:         $this->assertEquals(SqsConsumerInterface::MSG_REQUEUE, $actual);
  376:         $this->logger->assertMessageLogged(LogLevel::ERROR, 'PayPal IPN order not found', $body);
  377:         $this->assertEquals(SqsConsumerInterface::MSG_REQUEUE, $actual);
  399:         $this->assertEquals($this->systemName, $actual->getSystem());
  400:         $this->assertEquals($expected, $actual->getTransactionId());
  434:         $this->logger->assertMessageLogged(LogLevel::INFO, 'PayPal service outage');
  435:         $this->assertEquals(SqsConsumerInterface::MSG_REQUEUE, $actual);
  452:         $this->logger->assertMessageLogged(LogLevel::ERROR, 'PayPal IPN payment not successful', $body);
  453:         $this->assertEquals(SqsConsumerInterface::MSG_REQUEUE, $actual);
  479:         $this->logger->assertMessageLogged(LogLevel::INFO, 'PayPal IPN payment added', ['order' => $orderId]);
  480:         $this->assertEquals(SqsConsumerInterface::MSG_ACK, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Service/Payment/PurchaseOrder/AdminOnSiteTest.php:
  28:         $this->assertInstanceOf(OnSite::class, $this->fixture);
  37:         $this->assertInstanceOf(OnSiteForm::class, $actual);
  38:         $this->assertEquals(PurchaseOrderType::class, $actual->getFormType());
  39:         $this->assertEquals([], $actual->getOptions());

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Service/Payment/PurchaseOrder/OnSiteTest.php:
   32:         $this->assertInstanceOf(OnSiteInterface::class, $this->fixture);
   41:         $this->assertInstanceOf(OnSiteForm::class, $actual);
   42:         $this->assertEquals(PreRenderedType::class, $actual->getFormType());
   43:         $this->assertEquals(['data' => 'Fill in the Purchase Order Number field'], $actual->getOptions());
   64:         $this->assertEquals($expected, $actual);
   78:         $this->assertEquals($amount, $actual->getAmount());
  100:         $this->assertEquals('PO:'.$po, $actual->getSummary());
  118:         $this->assertEquals('PO:'.$po, $actual->getSummary());
  129:         $this->assertInstanceOf(PaymentResult::class, $actual);
  130:         $this->assertEquals(PaymentResult::ERROR_DECLINE, $actual->getErrorType(), 'invalid error type');
  131:         $this->assertEquals('Purchase Order Number required', $actual->getMessage(), 'invalid message');
  132:         $this->assertEquals(PaymentInterface::DECLINED, $actual->getStatus(), 'invalid status');
  149:         $this->assertInstanceOf(PaymentResult::class, $actual);
  150:         $this->assertEquals(PaymentResult::ERROR_DECLINE, $actual->getErrorType());
  151:         $this->assertEquals('Coupons are not allowed when using a Purchase Order', $actual->getMessage());
  152:         $this->assertEquals(PaymentInterface::DECLINED, $actual->getStatus());

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Shipping/ShippedOrderDeterminerTest.php:
   39:         $this->assertFalse($actual, 'Order should not be processing');
   55:         $this->assertEquals(['orderFulfilment', ['orders_id' => $orderId]], $firstCall->getParameters());
   71:         $this->assertEquals(['sendInvoices', ['orders_id' => $orderId]], $secondCall->getParameters());
   83:         $this->assertFalse($actual, 'Order should not be processing');
   95:         $this->assertFalse($actual, 'Order should not be processing');
  106:         $this->assertTrue($actual, 'Order should be processing');

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Shipping/UnshippedOrderReporterTest.php:
  40:         $this->assertEquals($expected, $actual);
  82:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Shipping/Estimator/CompositeTest.php:
  55:         $this->assertEquals(
  72:         $this->assertEquals(
  93:         $this->assertEquals(

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Shipping/Estimator/FreeReturnCalculatorTest.php:
   80:         $this->assertEquals($expected, $actual);
  227:         $this->assertEquals($expected, $actual);
  358:         $this->assertEquals([], $actual);
  383:         $this->assertEquals([], $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Shipping/Estimator/MultiStepTest.php:
   83:         $this->assertEquals(
  127:         $this->assertEquals(
  175:         $this->assertEquals(

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Shipping/Estimator/ProductReturnCalculatorTest.php:
   68:         $this->assertEquals($weight * $count, $actual['weight']);
   87:         $this->assertEquals($cost * $count, $actual['cost']);
  109:         $this->assertEquals($quantityA + $quantityB - $count, $actual['remainingQuantity']);
  137:         $this->assertEquals($quantityC - $count, $actual['remainingQuantity']);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Shipping/Estimator/ReturnsEstimatorTest.php:
  270:         $this->assertEquals(0, $actual);
  322:         $this->assertEquals($estimatedCost, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Shipping/Estimator/CostProvider/CostPercentTest.php:
  20:         $this->assertInstanceOf(
  41:         $this->assertEquals($actual, $expected);
  57:         $this->assertEquals($actual, $minimum);
  75:         $this->assertEquals($actual, $expected);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Shipping/Estimator/CostProvider/CostRangeCostTableTest.php:
  34:         $this->assertEquals($expectedCost, $actualCost);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Shipping/Estimator/CostProvider/DiscountedTest.php:
  56:         $this->assertInstanceOf(CostProviderInterface::class, $this->fixture);
  75:         $this->assertEquals($this->minimum, $actual);
  96:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Shipping/Estimator/CostProvider/DiscreteHandlingPerCostTest.php:
  49:         $this->assertInstanceOf(CostProviderInterface::class, $this->fixture);
  70:         $this->assertEquals($cost + $fee, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Shipping/Estimator/CostProvider/FixedTest.php:
  42:         $this->assertInstanceOf(CostProviderInterface::class, $this->fixture);
  58:         $this->assertEquals($this->flat + $this->perBox, $actual);
  74:         $this->assertEquals($this->flat + ($boxes * $this->perBox), $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Shipping/Estimator/CostProvider/FreePriceDecoratorTest.php:
  42:         $this->assertInstanceOf(CostProviderInterface::class, $this->fixture);
  59:         $this->assertEquals(0, $actual);
  79:         $this->assertEquals($cost, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Shipping/Estimator/CostProvider/FreightSplitTest.php:
   45:         $this->assertInstanceOf(CostProviderInterface::class, $this->fixture);
   68:         $this->assertEquals($cost, $actual);
   91:         $this->assertEquals($cost, $actual);
  119:         $this->assertEquals($cost, $actual);
  149:         $this->assertEquals($cost, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Shipping/Estimator/CostProvider/MaxCostLimitDecoratorTest.php:
  32:         $this->assertInstanceOf(CostProviderInterface::class, $this->fixture);
  66:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Shipping/Estimator/CostProvider/MinCostLimitDecoratorTest.php:
  32:         $this->assertInstanceOf(CostProviderInterface::class, $this->fixture);
  66:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Shipping/Estimator/CostProvider/StaticRatesTableTest.php:
  19:         $this->assertEquals($expected, $response);
  28:         $this->assertEquals(INF, $response);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Shipping/Estimator/CostProvider/UpsTableTest.php:
   54:         $this->assertEquals(
   78:         $this->assertEquals(
  100:         $this->assertEquals(

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Shipping/Estimator/CostProvider/WeightRangeCostTableTest.php:
  34:         $this->assertEquals($expectedCost, $actualCost);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Shipping/Estimator/CostProvider/WeightSplitTest.php:
  21:         $this->assertEquals($expected, $response);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Shipping/Estimator/DistanceProvider/DistanceTest.php:
  73:         $this->assertEquals($distance, $actual);
  96:         $this->assertInfinite($actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Shipping/Estimator/TimeProvider/CacheTest.php:
  55:         $this->assertEquals(
  60:         $this->assertEquals(
  81:         $this->assertEquals(
  86:         $this->assertEquals(

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Sqs/Consumer/ImportImageConsumerTest.php:
   61:         $this->assertEquals(SqsConsumerInterface::MSG_REJECT, $actual);
   77:         $this->assertEquals(SqsConsumerInterface::MSG_REJECT, $actual);
  100:         $this->assertEquals(SqsConsumerInterface::MSG_REJECT, $actual);
  111:         $this->assertEquals(SqsConsumerInterface::MSG_REJECT, $actual);
  128:         $this->assertEquals(SqsConsumerInterface::MSG_REJECT, $actual);
  141:         $this->assertEquals(SqsConsumerInterface::MSG_REJECT, $actual);
  170:         $this->assertEquals($expected, $actual);
  172:             $this->logger->assertMessageLogged(LogLevel::INFO, $log);
  261:         $this->assertEquals(SqsConsumerInterface::MSG_ACK, $actual);
  262:         $this->logger->assertMessagesLogged(
  287:         $this->assertEquals(SqsConsumerInterface::MSG_ACK, $actual);
  288:         $this->logger->assertMessagesLogged(
  311:         $this->assertEquals(SqsConsumerInterface::MSG_ACK, $actual);
  312:         $this->logger->assertMessagesLogged(
  333:         $this->assertEquals(SqsConsumerInterface::MSG_ACK, $actual);
  334:         $this->logger->assertMessagesLogged(
  359:         $this->assertEquals(SqsConsumerInterface::MSG_ACK, $actual);
  360:         $this->logger->assertMessagesLogged(
  385:         $this->assertEquals(SqsConsumerInterface::MSG_ACK, $actual);
  386:         $this->logger->assertMessagesLogged(
  407:         $this->assertEquals(SqsConsumerInterface::MSG_ACK, $actual);
  408:         $this->logger->assertMessagesLogged(
  433:         $this->assertEquals(SqsConsumerInterface::MSG_ACK, $actual);
  434:         $this->logger->assertMessageLogged(LogLevel::INFO, 'Unable to fetch image');
  448:         $this->assertEquals(SqsConsumerInterface::MSG_ACK, $actual);
  449:         $this->logger->assertMessageLogged(LogLevel::INFO, 'Set primary image');
  508:         $this->assertEquals(SqsConsumerInterface::MSG_REJECT, $actual);
  558:         $this->assertEquals(SqsConsumerInterface::MSG_ACK, $actual);
  577:         $this->assertEquals(SqsConsumerInterface::MSG_REJECT, $actual);
  578:         $this->logger->assertMessagesLogged(

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Sqs/Consumer/PostSlackMessageConsumerTest.php:
  36:         $this->assertInstanceOf(SqsConsumerInterface::class, $this->fixture);
  68:         $this->assertEquals(ConsumerResponseInterface::MSG_ACK, $actual);
  79:         $this->assertEquals(ConsumerResponseInterface::MSG_REJECT, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Sqs/Consumer/SlackClientWrapperTest.php:
  68:         $this->assertInstanceOf(SlackMessage::class, $message);
  77:         $this->assertEquals($body, $actual->getText());

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Subscription/BuilderTest.php:
   40:         $this->assertInstanceOf(BuilderInterface::class, $this->fixture);
   47:         $this->assertEquals(json_encode([]), $actual);
   81:         $this->assertEquals(
   85:         $this->assertEquals(
   99:         $this->assertSame($customer, $actual);
  110:         $this->assertSame($paymentDetails, $actual);
  121:         $this->assertSame($deliveryAddress, $actual);
  156:         $this->assertEquals($expectedString, $actual);
  193:         $this->assertEquals($expected, $actual);
  205:         $this->assertEquals($expected, $actual);
  231:         $this->assertEquals($frequency, $this->fixture->getProductFrequency($productIdList[0], $flagList[0]));
  235:         $this->assertNotEquals($frequency, $this->fixture->getProductFrequency($productIdList[0], $flagList[0]));
  253:         $this->assertEquals(
  257:         $this->assertEquals(
  264:         $this->assertNotEquals(
  268:         $this->assertEquals(
  283:         $this->assertEquals($frequency, $this->fixture->getProductFrequency($productId, $flags));
  286:         $this->assertNull($this->fixture->getProductFrequency($this->getRandomId(), $flags));
  287:         $this->assertNull($this->fixture->getProductFrequency($productId, $this->getRandomId()));
  299:         $this->assertNull($this->fixture->getProductFrequency($productId, $flags));
  311:         $this->assertNull($this->fixture->getProductFrequency($productId, $flags));
  316:         $this->assertTrue($this->fixture->isEmpty());
  327:         $this->assertFalse($this->fixture->isEmpty());
  339:         $this->assertTrue($this->fixture->isEmpty());
  355:         $this->assertSame([], $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Subscription/CartLineUpdaterTest.php:
   88:         $this->assertEquals(0, $actual);
  111:         $this->assertEquals($adjustment, $actual);
  124:         $this->assertEquals(0, $actual);
  145:         $this->assertEquals($overflow, $actual);
  175:         $this->assertEquals($overflow, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Subscription/CartLockTest.php:
  52:         $this->assertNull($this->repository->getCart($cartId));
  58:         $this->assertInstanceOf(CartInterface::class, $stored);
  59:         $this->assertCount($lineCount, $stored->getLineItems());
  79:         $this->assertEquals($expiration, $cartLine->getPriceExpiresOn());
  98:         $this->assertNull($this->repository->getCart($cartId));

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Subscription/DiscountProviderTest.php:
   79:         $this->assertEquals($expected, $actual);
  147:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Subscription/EavMediatorTest.php:
   90:         $this->assertEquals($expected, $actual);
  109:         $this->assertTrue($actual);
  127:         $this->assertFalse($actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Subscription/NormalizerTest.php:
   50:         $this->assertEquals($expected, $actual);
   78:         $this->assertEquals($expected, array_keys($actual));
   96:         $this->assertEquals($name, $actual['name']);
  106:         $this->assertEquals($status, $actual['status']);
  118:         $this->assertEquals($nextOrderDate, $actual['nextOrderDate']);
  130:         $this->assertEquals($frequency, $actual['frequency']);
  148:         $this->assertEquals($data, $actual['shipping']);
  159:         $this->assertEquals([], $actual['shipping']);
  178:         $this->assertEquals($data, $actual['billing']);
  189:         $this->assertEquals([], $actual['billing']);
  207:         $this->assertEquals($expected, array_keys($actual['payment']));
  216:         $this->assertEquals([], $actual['payment']);
  227:         $this->assertEquals($system, $actual['payment']['system']);
  238:         $this->assertEquals($token, $actual['payment']['token']);
  249:         $this->assertEquals($tokenType, $actual['payment']['tokenType']);
  260:         $this->assertEquals($isExpired, $actual['payment']['isExpired']);
  273:         $this->assertEquals($expiration, $actual['payment']['expiration']);
  284:         $this->assertEquals($displayData, $actual['payment']['displayData']);
  330:         $this->assertEquals([$lineA, $lineB], $actual['lines']);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Subscription/OrderFactoryTest.php:
  145:         $this->assertEqualData($data['address'], $actualAddress);
  166:         $this->assertFalse($actualOrder->getExpressProcessing());
  187:         $this->assertEqualData($expected, $actualOrder);
  224:         $this->assertEqualData($data['paymentDetails']['address'], $actualBillingAddress);
  312:         $this->assertEquals(OrderInterface::STATUS_WAITING_FOR_PAYMENT, $actualOrderStatus);
  338:         $this->assertEquals(OrderInterface::STATUS_WAITING_FOR_PAYMENT, $actualOrderStatus);
  373:         $this->assertEquals(OrderInterface::STATUS_CANCELLED, $actualOrderStatus);
  385:             $this->assertEquals($value, $actualObject->$method(), $message);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Subscription/SubscriptionAvailableTest.php:
   63:         $this->assertInstanceOf(SubscriptionAvailableInterface::class, $this->fixture);
   70:         $this->assertEquals([], $actual);
  128:         $this->assertEquals($expected, $actual);
  164:         $this->assertEquals($expected, $actual);
  206:         $this->assertEquals($expected, $actual);
  248:         $this->assertEquals($expected, $actual);
  295:         $this->assertEquals($expected, $actual);
  341:         $this->assertEquals($expected, $actual);
  394:         $this->assertEquals($expected, $actual);
  449:         $this->assertEquals($expected, $actual);
  504:         $this->assertEquals($expected, $actual);
  559:         $this->assertEquals($expected, $actual);
  609:         $this->assertEquals($expected, $actual);
  655:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Subscription/SubscriptionRepositoryTest.php:
   190:         $this->assertInstanceOf(SubscriptionInterface::class, $actual);
   191:         $this->assertEquals($name, $actual->getName());
   196:         $this->assertNull($this->fixture->getById($this->getRandomId()));
   224:         $this->assertContainsOnlyInstancesOf(SubscriptionInterface::class, $list);
   225:         $this->assertEquals($expected, $actual);
   407:         $this->assertNotEmpty($actual);
   408:         $this->assertContainsOnlyInstancesOf(SubscriptionInterface::class, $actual);
   409:         $this->assertEquals(
   460:         $this->assertNotEmpty($actual);
   461:         $this->assertContainsOnlyInstancesOf(SubscriptionInterface::class, $actual);
   462:         $this->assertEquals(
   505:         $this->assertSame($expected, $actual);
   512:         $this->assertInstanceOf(BuilderInterface::class, $actual);
   526:         $this->assertInstanceOf(BuilderInterface::class, $actual);
   527:         $this->assertEquals($frequency, $actual->getProductFrequency($productId, $flag));
   561:         $this->assertNotEmpty($actual);
   562:         $this->assertContainsOnlyInstancesOf(WritableSubscriptionInterface::class, $actual);
   563:         $this->assertContainsOnlyInstancesOf(SubscriptionInterface::class, $actual);
   566:         $this->assertEquals(SubscriptionInterface::STATUS_ACTIVE, $sample->getStatus());
   649:         $this->assertEquals(0, $actual->getLineCount());
   685:         $this->assertEquals(1, $actual->getLineCount());
   686:         $this->assertEquals($productId, $actualLine->getProductId());
   687:         $this->assertEquals($price, $actualLine->getItemPrice());
   688:         $this->assertEquals($quantity, $actualLine->getQuantity());
   689:         $this->assertEquals($flags, $actualLine->getFlags());
   715:         $this->assertEquals(0, $actual->getLineCount());
   736:         $this->assertInstanceOf(SubscriptionInterface::class, $saved[0]);
   779:         $this->assertEquals($quantity, $line->getQuantity());
   851:         $this->assertCount(1, $subscription->getActiveLineList());
   854:         $this->assertEquals(
   913:         $this->assertEquals($before + $additional, $subscription->getTotalCount());
   914:         $this->assertCount(1, $subscription->getActiveLineList());
   957:         $this->assertEquals($before + $additional, $subscription->getTotalCount());
   958:         $this->assertCount(2, $subscription->getActiveLineList());
  1000:         $this->assertEquals(0, $subscription->getTotalCount());
  1001:         $this->assertCount(0, $subscription->getActiveLineList());
  1043:         $this->assertEquals(0, $subscription->getTotalCount());
  1044:         $this->assertCount(0, $subscription->getActiveLineList());
  1165:         $this->assertCount(3, $subscription->getActiveLineList());
  1166:         $this->assertCount(1, $subscription->getMissedLineList());
  1169:         $this->assertEquals(
  1272:         $this->assertTrue($estimatedList[0]->isEstimatedPricing());
  1281:         $this->assertFalse($setList[0]->isEstimatedPricing());
  1303:         $this->assertEquals(SubscriptionInterface::STATUS_CANCELED, $actualA->getStatus());
  1304:         $this->assertEquals(SubscriptionInterface::STATUS_CANCELED, $actualB->getStatus());
  1410:         $this->AssertEmpty($actualCartA);
  1411:         $this->AssertEmpty($actualCartB);
  1472:         $this->assertEquals($expectedA->format('Y-m-d H:i:s'), $actualA->format('Y-m-d H:i:s'));
  1473:         $this->assertEquals($expectedB->format('Y-m-d H:i:s'), $actualB->format('Y-m-d H:i:s'));
  1515:         $this->assertFalse($actualA[0]->getSkip());
  1516:         $this->assertFalse($actualA[1]->getSkip());
  1517:         $this->assertFalse($actualB[0]->getSkip());
  1518:         $this->assertFalse($actualB[1]->getSkip());
  1553:         $this->assertCount(1, $subscription->getEventLog());
  1555:         $this->assertEquals(
  1614:         $this->assertEquals($expected, $actual);
  1678:         $this->assertSame($entity, $actual->getEntity());
  1709:         $this->assertEquals($expected, $writable->getStatus());
  1727:         $this->assertEquals($expected, $writable->getStatus());
  1745:         $this->assertEquals($expected, $writable->getStatus());
  1795:         $this->assertEquals($expected, $actual);
  1819:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Subscription/SuspensionDiagnoserTest.php:
   42:         $this->assertEquals($expected, $actual);
   52:         $this->assertEquals($expected, $actual);
   67:         $this->assertEquals($expected, $actual);
   88:         $this->assertEquals($expected, $actual);
  105:         $this->assertEquals([], $actual);
  138:         $this->assertEquals([], $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Subscription/Email/ShippingSoonMapperTest.php:
   85:         $this->assertSame($id, $actual['subscriptionId']);
   98:         $this->assertSame($name, $actual['name']);
  110:         $this->assertSame($orderDate, $actual['shippingDate']);
  123:         $this->assertEquals($expectedEditDate, $actual['lastEditDate']);
  159:         $this->assertSame($expected, $actual['productImageMap']);
  171:         $this->assertSame($coming, $actual['coming']);
  183:         $this->assertSame($missing, $actual['missing']);
  195:         $this->assertSame($address, $actual['shippingAddress']);
  238:         $this->assertSame($totalList, $actual['summary']);
  250:         $this->assertFalse($actual['paymentExpired']);
  262:         $this->assertTrue($actual['paymentExpired']);
  272:         $this->assertTrue($actual['paymentExpired']);
  311:         $this->assertEquals($expected, $actual['isShiftedDate']);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Subscription/Filter/CommonSubscriptionFilterTest.php:
   44:         $this->assertEquals($id, $actual['subscriptionId']);
   57:         $this->assertEquals($name, $actual['subscriptionName']);
   92:         $this->assertEquals($nameA, $actual['productList'][0]['name']);
   93:         $this->assertEquals($qtyA, $actual['productList'][0]['quantity']);
   94:         $this->assertEquals($imageA, $actual['productList'][0]['image']);
   95:         $this->assertEquals($nameB, $actual['productList'][1]['name']);
   96:         $this->assertEquals($qtyB, $actual['productList'][1]['quantity']);
   97:         $this->assertEquals($imageB, $actual['productList'][1]['image']);
  111:         $this->assertEquals($frequency, $actual['frequency']);
  124:         $this->assertEquals($shippingDate, $actual['shippingDate']);
  137:         $this->assertEquals($shippingAddress, $actual['shippingAddress']);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Subscription/Filter/NameByEmailFilterTest.php:
  67:         $this->assertEquals([$email => $first.' '.$last], $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Subscription/Listener/PaymentDeleteListenerTest.php:
   47:         $this->assertInstanceOf(EventSubscriberInterface::class, $this->fixture);
  105:         $this->assertSame($expected, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Subscription/Listener/SubscriptionListenerTest.php:
  35:         $this->assertInstanceOf(EventSubscriberInterface::class, $this->fixture);
  75:         $this->assertSame($expected, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Subscription/Model/EventTest.php:
  47:         $this->assertSame($this->type, $this->fixture->getType());
  52:         $this->assertSame($this->status, $this->fixture->getStatusId());
  57:         $this->assertSame($this->message, $this->fixture->getMessage());
  65:         $this->assertSame($this->fixture->getType(), $actual->getType());
  66:         $this->assertSame($this->fixture->getTimestamp(), $actual->getTimestamp());
  67:         $this->assertSame($this->fixture->getMessage(), $actual->getMessage());
  68:         $this->assertSame($newDetails, $actual->getDetails());
  69:         $this->assertSame($this->fixture->getLogDetails(), $actual->getLogDetails());
  77:         $this->assertSame($this->fixture->getType(), $actual->getType());
  78:         $this->assertSame($this->fixture->getTimestamp(), $actual->getTimestamp());
  79:         $this->assertSame($this->fixture->getMessage(), $actual->getMessage());
  80:         $this->assertSame($this->fixture->getDetails(), $actual->getDetails());
  81:         $this->assertSame($newLogDetails, $actual->getLogDetails());

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Subscription/Model/SubscriptionTest.php:
   46:         $this->assertEquals($entity->getName(), $fixture->getName());
   47:         $this->assertEquals($entity->getStatus(), $fixture->getStatus());
   48:         $this->assertEquals($entity->getCreatedDate(), $fixture->getCreatedDate());
   49:         $this->assertEquals($entity->getNextOrderDate(), $fixture->getNextOrderDate());
   50:         $this->assertSame($entity->getPaymentDetails(), $fixture->getPaymentDetails());
   63:         $this->assertEquals(Subscription::STATUS_CANCELED === $status, $fixture->isCanceled());
   64:         $this->assertEquals(Subscription::STATUS_ACTIVE === $status, $fixture->isActive());
   65:         $this->assertEquals(Subscription::STATUS_SUSPENDED === $status, $fixture->isSuspended());
  107:         $this->assertEquals($cart->getCartId(), $fixture->getCartId());
  108:         $this->assertEquals($cart->getTotalPrice(), $fixture->getTotalPrice());
  109:         $this->assertEquals($cart->getTotalCount(), $fixture->getTotalCount());
  110:         $this->assertEquals($cart->getLineCount(), $fixture->getLineCount());
  111:         $this->assertEquals($cart->isEmpty(), $fixture->isEmpty());
  112:         $this->assertSame($cart->getLastAddedLine(), $fixture->getLastAddedLine());
  113:         $this->assertSame($cart->getLineItems(), $fixture->getLineItems());
  152:         $this->assertEquals($getProductQty, $fixture->getProductQty($product, $flags));
  153:         $this->assertEquals($getLineIndex, $fixture->getLineIndex($product, $flags));
  154:         $this->assertEquals($hasLine, $fixture->hasLine($lineIndex));
  155:         $this->assertSame($getLine, $fixture->getLine($lineIndex));
  175:         $this->assertCount(count($expected), $actual);
  176:         $this->assertContainsOnlyInstancesOf(LineItem::class, $actual);
  179:         $this->assertEquals($expected, $actualIdList);
  262:         $this->assertCount(2, $actual);
  263:         $this->assertContainsOnlyInstancesOf(LineItem::class, $actual);
  269:         $this->assertEquals($expectedIdList, $actualIdList);
  305:         $this->assertCount(2, $actual);
  306:         $this->assertContainsOnlyInstancesOf(LineItem::class, $actual);
  312:         $this->assertEquals($expectedIdList, $actualIdList);
  335:         $this->assertCount(count($expected), $actual);
  336:         $this->assertContainsOnlyInstancesOf(LineItem::class, $actual);
  342:         $this->assertEquals($expected, $actualIdList);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Subscription/Model/WritableSubscriptionTest.php:
   73:         $this->assertEquals($entity->getName(), $fixture->getName());
   74:         $this->assertEquals($entity->getStatus(), $fixture->getStatus());
   75:         $this->assertEquals($entity->getCreatedDate(), $fixture->getCreatedDate());
   76:         $this->assertEquals($entity->getNextOrderDate(), $fixture->getNextOrderDate());
   77:         $this->assertSame($entity->getPaymentDetails(), $fixture->getPaymentDetails());
   89:         $this->assertEquals(Subscription::STATUS_CANCELED === $status, $fixture->isCanceled());
   90:         $this->assertEquals(Subscription::STATUS_ACTIVE === $status, $fixture->isActive());
   91:         $this->assertEquals(Subscription::STATUS_SUSPENDED === $status, $fixture->isSuspended());
  129:         $this->assertEquals($fixture->getName(), $entity->getName());
  130:         $this->assertEquals($fixture->getStatus(), $entity->getStatus());
  131:         $this->assertSame($fixture->getFrequency(), $entity->getFrequency());
  132:         $this->assertSame($fixture->getNextOrderDate(), $entity->getNextOrderDate());
  133:         $this->assertSame($fixture->getDeliveryAddress(), $entity->getDeliveryAddress());
  134:         $this->assertSame($fixture->getPaymentDetails(), $entity->getPaymentDetails());
  166:         $this->assertCount(2, $entity->getLineItemList());
  169:         $this->assertCount(1, $entity->getLineItemList());
  242:         $this->assertCount(2, $fixture->getActiveLineList());
  243:         $this->assertCount(0, $fixture->getSkippedLineList());
  246:         $this->assertCount(1, $fixture->getActiveLineList());
  247:         $this->assertCount(1, $fixture->getSkippedLineList());
  251:         $this->assertEquals($productA->getId(), $activeLineList->current()->getProductId());
  252:         $this->assertEquals($productB->getId(), $skippedLineList->current()->getProductId());
  255:         $this->assertCount(2, $fixture->getActiveLineList());
  256:         $this->assertCount(0, $fixture->getSkippedLineList());
  259:         $this->assertEquals($productA->getId(), $activeLineList->current()->getProductId());
  261:         $this->assertEquals($productB->getId(), $activeLineList->current()->getProductId());
  315:         $this->assertCount(1, $entity->getLineItemList());
  355:         $this->assertEquals($data, $actual);
  375:         $this->assertEquals($data, $actual);
  395:         $this->assertEquals($data, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Supplier/InformationTest.php:
  67:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Supplier/InventoryLocatorTest.php:
   75:         $this->assertIsArray($actual);
  145:         $this->assertEquals([], $actual);
  259:         $this->assertEquals($expected, $actual);
  303:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Tax/DeferredCustomerConsumerTest.php:
   51:         $this->assertInstanceOf(TaskConsumerInterface::class, $this->fixture);
   81:         $this->assertEquals(ConsumerResponseInterface::MSG_REJECT, $actual);
   99:         $this->assertEquals(ConsumerResponseInterface::MSG_REJECT, $actual);
  126:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Tax/DeferredCustomerSenderTest.php:
  32:         $this->assertInstanceOf(CustomerSenderInterface::class, $this->fixture);
  53:         $this->assertTrue($actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Tax/DeferredOrderConsumerTest.php:
   51:         $this->assertInstanceOf(TaskConsumerInterface::class, $this->fixture);
   81:         $this->assertEquals(ConsumerResponseInterface::MSG_REJECT, $actual);
   99:         $this->assertEquals(ConsumerResponseInterface::MSG_REJECT, $actual);
  126:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Tax/DeferredOrderSenderTest.php:
  32:         $this->assertInstanceOf(OrderSenderInterface::class, $this->fixture);
  53:         $this->assertTrue($actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Tax/DeferredSnapshotConsumerTest.php:
   61:         $this->assertInstanceOf(TaskConsumerInterface::class, $this->fixture);
   89:         $this->assertEquals(ConsumerResponseInterface::MSG_REJECT, $actual);
  128:         $this->assertEquals(ConsumerResponseInterface::MSG_REJECT, $actual);
  166:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Tax/DeferredSnapshotSenderTest.php:
  33:         $this->assertInstanceOf(SnapshotSenderInterface::class, $this->fixture);
  62:         $this->assertTrue($actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Tax/OrderLookupResultTest.php:
   19:         $this->assertInstanceOf(LookupResultInterface::class, $fixture);
   43:         $this->assertEquals($expected, $actual);
   59:         $this->assertEquals($tax, $actual);
   74:         $this->assertEquals(0.0, $actual);
   93:         $this->assertEquals($label, $actual);
  104:         $this->assertEquals('Tax', $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Tax/TaxGetterTest.php:
  157:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Tax/TaxSetterTest.php:
   80:         $this->assertCount(1, $totalLineList);
   81:         $this->assertEquals($expected, $totalLineList[0]->getTitle());
   82:         $this->assertEquals($amount, $totalLineList[0]->getValue());
  147:         $this->assertCount(2, $totalLineList);
  148:         $this->assertEquals('Tax Adjustment:', $totalLineList[1]->getTitle());
  149:         $this->assertEquals($amount - $currentTax, $totalLineList[1]->getValue());
  150:         $this->assertEquals($amount, $order->getTotalValue(TotalInterface::TYPE_TAX));
  174:         $this->assertCount(2, $totalLineList);
  175:         $this->assertEquals('Tax Adjustment:', $totalLineList[1]->getTitle());
  176:         $this->assertEquals($amount - $currentTax, $totalLineList[1]->getValue());
  177:         $this->assertEquals($amount, $order->getTotalValue(TotalInterface::TYPE_TAX));
  243:         $this->assertCount(3, $totalLineList);
  244:         $this->assertEquals('Tax Adjustment:', $totalLineList[2]->getTitle());
  245:         $this->assertEquals(-$maxTaxRefund, $totalLineList[2]->getValue());
  246:         $this->assertEquals(0, $order->getTotalValue(TotalInterface::TYPE_TAX));
  282:         $this->assertCount(2, $totalLineList);
  283:         $this->assertEquals(0, $order->getTotalValue(TotalInterface::TYPE_TAX));
  321:         $this->assertCount(3, $totalLineList);
  322:         $this->assertEquals($amount + $adjustment, $order->getTotalValue(TotalInterface::TYPE_TAX));

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Tax/TicProviderTest.php:
   34:         $this->assertInstanceOf(TicProviderInterface::class, $this->fixture);
   64:         $this->assertEquals($expected, $actual);
   81:         $this->assertEquals($expected, $actual);
  100:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Tax/Calculator/CountyTest.php:
   69:         $this->assertEquals($expected, $actual);
  144:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Tax/Calculator/LookupTest.php:
   43:         $this->assertInstanceOf(LookupInterface::class, $this->fixture);
  106:         $this->assertInstanceOf(LookupResultInterface::class, $actual);
  107:         $this->assertEquals($taxA + $taxB, $actual->getTaxTotal());
  108:         $this->assertEquals($taxA, $actual->getTaxForLine(0));
  109:         $this->assertEquals($taxB, $actual->getTaxForLine(1));
  110:         $this->assertEquals($this->taxLabel, $actual->getTaxLabel());

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Tax/Calculator/ManualTest.php:
  20:         $this->assertEquals($rateList, $actual);
  47:         $this->assertEquals($taxAmountList, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Tax/Calculator/StatesTest.php:
   46:         $this->assertEquals($ratesOhio, $this->fixture->getRateList($location));
   49:         $this->assertEquals($ratesWisconsin, $this->fixture->getRateList($location));
   52:         $this->assertEquals($ratesWisconsin, $this->fixture->getRateList($location));
   73:         $this->assertEquals($amountsOhio, $this->fixture->getTaxAmountList($location, 1000));
   76:         $this->assertEquals($amountsWisconsin, $this->fixture->getTaxAmountList($location, 1000));
   79:         $this->assertEquals($amountsWisconsin, $this->fixture->getTaxAmountList($location, 1000));
  133:         $this->assertEquals($expected, $actual);
  151:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Tax/Listener/AdjustmentListenerTest.php:
   52:         $this->assertInstanceOf(EventSubscriberInterface::class, $this->fixture);
  161:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Tax/Listener/VoidPaymentListenerTest.php:
  52:         $this->assertInstanceOf(EventSubscriberInterface::class, $this->fixture);
  64:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Tax/Lookup/CacheDecoratorTest.php:
  421:         $this->assertSame($result, $actual);
  436:         $this->assertSame($result, $actual);
  449:         $this->assertInstanceOf(NullLookupResult::class, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Tax/Lookup/ExistingLookupTest.php:
   38:         $this->assertInstanceOf(LookupInterface::class, $this->fixture);
   68:         $this->assertInstanceOf(LookupResultInterface::class, $actual);
   69:         $this->assertEquals($expected['total'], $actual->getTaxTotal());
   70:         $this->assertEquals($expected['label'], $actual->getTaxLabel());
   72:             $this->assertEquals($lineTotal, $actual->getTaxForLine($lineId));
  486:         $this->assertInstanceOf(OrderLookupResult::class, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Tax/Lookup/FlatLookupTest.php:
   51:         $this->assertInstanceOf(LookupInterface::class, $this->fixture);
   85:         $this->assertInstanceOf(LookupResultInterface::class, $actual);
   94:         $this->assertEquals('Tax', $actual->getTaxLabel());
  105:         $this->assertEquals($label, $actual->getTaxLabel());
  206:         $this->assertEquals(round($expectedTotal, 2), round($actual->getTaxTotal(), 2));
  208:             $this->assertEquals(round($expected, 2), round($actual->getTaxForLine($index), 2));
  428:         $this->assertEquals(round($expectedTotal, 2), round($actual->getTaxTotal(), 2));
  430:             $this->assertEquals(round($expected, 2), round($actual->getTaxForLine($index), 2));
  531:         $this->assertEquals(round($expected, 2), round($actual->getTaxTotal(), 2));

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Tax/Lookup/IsTaxableDecoratorTest.php:
   42:         $this->assertInstanceOf(LookupInterface::class, $this->fixture);
   88:         $this->assertInstanceOf(NullLookupResult::class, $actual);
  101:         $this->assertSame($result, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Tax/Lookup/StateAwareDecoratorTest.php:
   43:         $this->assertInstanceOf(LookupInterface::class, $this->fixture);
   76:         $this->assertSame($result, $actual);
  103:         $this->assertSame($result, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Tax/Lookup/StoreAwareDecoratorTest.php:
  43:         $this->assertInstanceOf(LookupInterface::class, $this->fixture);
  69:         $this->assertSame($result, $actual);
  95:         $this->assertSame($result, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Tax/Lookup/Adjustment/CalculatorFactoryTest.php:
  105:         $this->assertInstanceOf(Calculator::class, $actual);
  122:         $this->assertEquals($expected, $actual);
  142:         $this->assertEquals($expected, $actual);
  161:         $this->assertEquals($expected, $actualA);
  162:         $this->assertEquals($expected, $actualB);
  183:         $this->assertEquals($expected, $actualA);
  184:         $this->assertEquals($expected, $actualB);
  256:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Tax/Model/NullLookupResultTest.php:
  26:         $this->assertInstanceOf(NullInterface::class, $this->fixture);
  27:         $this->assertInstanceOf(LookupResultInterface::class, $this->fixture);
  32:         $this->assertEquals(0.0, $this->fixture->getTaxTotal());
  37:         $this->assertEquals(0.0, $this->fixture->getTaxForLine(rand(0, 10)));
  42:         $this->assertEquals('Tax', $this->fixture->getTaxLabel());

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Tax/Order/IsTaxableDeterminerTest.php:
   25:         $this->assertFalse($actual);
   38:         $this->assertFalse($actual);
   51:         $this->assertTrue($actual);
   62:         $this->assertTrue($actual);
   86:         $this->assertEquals($expected, $actual);
  173:         $this->assertTrue($actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Tax/Order/LookupTest.php:
   56:         $this->assertNull($actual);
   68:         $this->assertSame($order, $actual);
   79:         $this->assertNull($actual);
   90:         $this->assertNull($actual);
  104:         $this->assertSame($order, $actual);
  126:         $this->assertNull($actual);
  148:         $this->assertNull($actual);
  170:         $this->assertSame($order, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Tax/Order/SnapshotFactoryTest.php:
   32:         $this->assertInstanceOf(SnapshotInterface::class, $actual);
   42:         $this->assertEquals($orderId, $actual->getId());
   59:         $this->assertEquals($expected, $actual->isTaxExempt());
  119:         $this->assertEquals($expected, $actual->toJson());
  179:         $this->assertInstanceOf(SnapshotInterface::class, $actual);
  180:         $this->assertEquals($orderId, $actual->getId());
  181:         $this->assertEquals($taxExempt, $actual->isTaxExempt());

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Tax/Order/TotalPartitionerTest.php:
  39:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Tax/Order/TotalSummarizerTest.php:
  27:         $this->assertEquals(0.0, $actual);
  36:         $this->assertEquals(0.0, $actual);
  50:         $this->assertEquals($valueA + $valueB, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Tax/TaxGetter/AddressFactoryTest.php:
   29:         $this->assertInstanceOf(AddressInterface::class, $actual);
   39:         $this->assertEquals($name, $actual->getName());
   49:         $this->assertEquals($value, $actual->getPhone());
   59:         $this->assertEquals($value, $actual->getCity());
   69:         $this->assertEquals($value, $actual->getState());
   79:         $this->assertEquals('US', $actual->getCountry());
   89:         $this->assertEquals($value, $actual->getZip());
   99:         $this->assertEquals($value, $actual->getStreetAddress());
  109:         $this->assertEquals($value, $actual->getSuburb());
  119:         $this->assertEquals('', $actual->getSuburb());

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Tax/TaxGetter/OrderFactoryTest.php:
  102:         $this->assertEquals(OrderInterface::STATUS_LOCKED, $actual->getOrderStatus());
  112:         $this->assertInstanceOf(OrderInterface::class, $actual);
  113:         $this->assertSame($store, $actual->getStore());
  114:         $this->assertEquals($orderId, $actual->getId());
  159:         $this->assertEquals($name, $actual->getDeliveryName());
  160:         $this->assertEquals($company, $actual->getDeliveryCompany());
  161:         $this->assertEquals($line1, $actual->getDeliveryStreetAddress());
  162:         $this->assertEquals($line2, $actual->getDeliverySuburb());
  163:         $this->assertEquals($city, $actual->getDeliveryCity());
  164:         $this->assertEquals($state, $actual->getDeliveryState());
  165:         $this->assertEquals($zip, $actual->getDeliveryZip());
  166:         $this->assertEquals($phone, $actual->getDeliveryPhone());
  167:         $this->assertEquals($country, $actual->getDeliveryCountry());
  177:         $this->assertEquals($datePurchased, $actual->getDatePurchased()->format('Y-m-d H:i:s'));
  190:         $this->assertCount(count($expected), $totalList);
  192:             $this->assertEquals($expected[$index]['title'], $total->getTitle());
  193:             $this->assertEquals($expected[$index]['class'], $total->getClass());
  194:             $this->assertEquals($expected[$index]['value'], $total->getValue());
  195:             $this->assertEquals($expected[$index]['sort'], $total->getSortOrder());
  196:             $this->assertEquals($expected[$index]['flags'], $total->getFlags());
  355:         $this->assertCount(count($expected), $lineList);
  357:             $this->assertEquals($expected[$index]['sku'], $lineItem->getSku());
  358:             $this->assertEquals($expected[$index]['id'], $lineItem->getProductId());
  359:             $this->assertEquals($expected[$index]['price'], $lineItem->getItemPrice());
  360:             $this->assertEquals($expected[$index]['quantity'], $lineItem->getQuantity());
  361:             $this->assertEquals($expected[$index]['flags'], $lineItem->getFlags());
  402:         $this->assertEquals($couponId, $actual->getCouponId());
  437:         $this->assertSame($customer, $actual->getCustomer());
  461:         $this->assertNull($actual->getCustomer());
  491:         $this->assertSame($customer, $actual->getCustomer());
  503:         $this->assertNull($actual->getCustomer());

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Tax/TicProvider/AbstractTicProviderTest.php:
  26:         $this->assertInstanceOf(TicProviderInterface::class, $this->fixture);
  63:         $this->assertEquals($code, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Tax/TicProvider/SalesTaxHolidayDecoratorTest.php:
   70:         $this->assertInstanceOf(TicProviderInterface::class, $this->fixture);
  137:         $this->assertEquals($expected, $actual);
  377:         $this->assertEquals($expected, $actual);
  392:         $this->assertEquals($expected, $actual);
  411:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/TaxJar/ClientTest.php:
   43:         $this->assertInstanceOf(ClientInterface::class, $this->fixture);
   64:         $this->assertSame($object, $actual);
  121:         $this->assertSame($response, $actual);
  159:         $this->assertSame($transaction, $actual);
  197:         $this->assertSame($transaction, $actual);
  235:         $this->assertSame($transaction, $actual);
  273:         $this->assertSame($transaction, $actual);
  311:         $this->assertSame($transaction, $actual);
  349:         $this->assertSame($transaction, $actual);
  387:         $this->assertSame($transaction, $actual);
  408:         $this->assertSame($object, $actual);
  429:         $this->assertSame($object, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/TaxJar/LoggingClientTest.php:
  54:         $this->assertInstanceOf(ClientInterface::class, $this->fixture);
  80:         $this->assertSame($response, $actual);
  98:             $this->logger->assertLogsContains($message);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/TaxJar/ThrottledClientTest.php:
   60:         $this->assertInstanceOf(ClientInterface::class, $this->fixture);
   96:         $this->assertSame($response, $actual);
  148:         $this->logger->assertMessageLogged(LogLevel::INFO, $message, $context);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/TaxJar/Lookup/LookupResultTest.php:
  14:         $this->assertInstanceOf(LookupResultInterface::class, $fixture);
  24:         $this->assertEquals($tax, $fixture->getTaxTotal());
  37:         $this->assertEquals($label, $fixture->getTaxLabel());
  49:         $this->assertEquals($label, $fixture->getTaxLabel());
  61:         $this->assertEquals($label, $fixture->getTaxLabel());
  71:         $this->assertEquals($expected, $fixture->getTaxForLine($id));

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/TaxJar/Lookup/LookupTest.php:
   68:         $this->assertInstanceOf(LookupInterface::class, $this->fixture);
  247:         $this->assertInstanceOf(LookupResult::class, $actual);
  265:         $this->logs->assertMessageLogged(
  283:         $this->assertInstanceOf(NullLookupResult::class, $actual);
  300:         $this->assertInstanceOf(NullLookupResult::class, $actual);
  314:         $this->assertEquals($tax, $actual->getTaxTotal());
  340:         $this->assertEquals($label, $actual->getTaxLabel());
  357:         $this->assertEquals($label, $actual->getTaxLabel());
  383:         $this->assertEquals($label, $actual->getTaxLabel());
  398:         $this->assertEquals($expected, $actual->getTaxForLine($id));

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/TaxJar/Task/AdjustmentConsumerTest.php:
   84:         $this->assertInstanceOf(OrderSenderInterface::class, $this->fixture);
  125:         $this->assertTrue($actual);
  219:         $this->assertTrue($actual);
  270:         $this->assertTrue($actual);
  365:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/TaxJar/Task/CustomerConsumerTest.php:
   55:         $this->assertInstanceOf(CustomerSenderInterface::class, $this->fixture);
  210:         $this->assertTrue($actual);
  211:         $this->logger->assertEmptyLogs();
  226:         $this->assertFalse($actual);
  227:         $this->logger->assertMessageLogged(
  276:         $this->assertTrue($actual);
  277:         $this->logger->assertEmptyLogs();
  294:         $this->assertFalse($actual);
  295:         $this->logger->assertMessageLogged(

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/TaxJar/Task/CustomerNameLookupTest.php:
  56:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/TaxJar/Task/SnapshotConsumerTest.php:
   55:         $this->assertInstanceOf(SnapshotSenderInterface::class, $this->fixture);
   81:         $this->assertTrue($actual);
   94:         $this->assertTrue($actual);
  178:         $this->assertTrue($actual);
  200:         $this->assertTrue($actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/TaxJar/Task/UpsertConsumerTest.php:
   79:         $this->assertInstanceOf(OrderSenderInterface::class, $this->fixture);
   95:         $this->logger->assertEmptyLogs();
  115:         $this->logger->assertEmptyLogs();
  283:         $this->logger->assertEmptyLogs();
  301:         $this->logger->assertMessageLogged(LogLevel::ERROR, $message, $context);
  302:         $this->assertFalse($actual);
  322:         $this->logger->assertEmptyLogs();
  333:         $this->assertTrue($actual);
  334:         $this->logger->assertEmptyLogs();
  354:         $this->logger->assertMessageLogged(LogLevel::ERROR, $message, $context);
  369:         $this->assertFalse($actual);
  412:         $this->logger->assertEmptyLogs();
  426:         $this->assertTrue($actual);
  427:         $this->logger->assertEmptyLogs();
  447:         $this->logger->assertMessageLogged(LogLevel::ERROR, $messageB, $context);
  464:         $this->assertFalse($actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/TaxJar/Task/Adjustment/ExistenceHandlerTest.php:
   81:         $this->assertFalse($actual);
   95:         $this->assertFalse($actual);
  108:         $this->assertTrue($actual);
  121:         $this->assertFalse($actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/TaxJar/Task/Adjustment/FullRefundHandlerTest.php:
   73:         $this->assertEquals($expected, $actual);
   95:         $this->assertCount($count, $actual['refunds']['totals']);
   96:         $this->assertContainsOnlyInstancesOf(OrderTotal::class, $actual['refunds']['totals']);
  308:         $this->assertEquals(['updateGrandTotal', 'flush'], $actual);
  346:         $this->assertEquals($expected, $actual);
  392:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/TaxJar/Task/Adjustment/PaymentHandlerTest.php:
  105:         $this->assertEquals(ConsumerResponseInterface::MSG_REJECT, $actual);
  126:         $this->logger->assertEmptyLogs();
  140:         $this->logger->assertEmptyLogs();
  175:         $this->logger->assertEmptyLogs();
  196:         $this->logger->assertEmptyLogs();
  214:         $this->logger->assertEmptyLogs();
  235:         $this->logger->assertEmptyLogs();
  250:         $this->logger->assertEmptyLogs();
  274:         $this->logger->assertMessageLogged(LogLevel::ERROR, $message, $context);
  275:         $this->assertEquals(ConsumerResponseInterface::MSG_REQUEUE, $actual);
  296:         $this->logger->assertEmptyLogs();
  310:         $this->logger->assertEmptyLogs();
  345:         $this->logger->assertEmptyLogs();
  366:         $this->logger->assertEmptyLogs();
  385:         $this->logger->assertEmptyLogs();
  407:         $this->logger->assertEmptyLogs();
  422:         $this->logger->assertEmptyLogs();
  445:         $this->logger->assertMessageLogged(LogLevel::ERROR, $message, $context);
  446:         $this->assertEquals(ConsumerResponseInterface::MSG_REQUEUE, $actual);
  458:         $this->assertEquals(ConsumerResponseInterface::MSG_ACK, $actual);
  459:         $this->logger->assertEmptyLogs();

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/TaxJar/Task/Adjustment/TotalGrouperTest.php:
   99:         $this->assertSame($expected, $actual);
  127:         $this->assertSame($expected, $actual);
  155:         $this->assertNull($actual);
  170:         $this->assertNull($actual);
  193:         $this->assertSame($expected, $actual);
  228:         $this->assertSame($expected, $actual);
  249:         $this->assertNull($actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/TaxJar/Task/Adjustment/TotalMatcherTest.php:
  43:         $this->assertEquals($expected, $actual);
  50:         $this->assertNull($actual);
  57:         $this->assertNull($actual);
  82:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/TaxJar/Task/Adjustment/UnknownHandlerTest.php:
  55:         $this->logger->assertMessageLogged(
  88:         $this->assertEquals(['cron@officesupply.com' => 'OfficeSupply.com'], $actual->getFrom(), 'wrong From');
  89:         $this->assertEquals(['lkingsley@officesupply.com' => 'Luke'], $actual->getTo(), 'wrong To');
  90:         $this->assertEquals('Unknown order adjustment - '.$orderId, $actual->getSubject(), 'wrong Subject');
  91:         $this->assertEquals($expected, $actual->getText(), 'wrong Text');

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/TaxJar/Task/Adjustment/VoidHandlerTest.php:
   68:         $this->assertFalse($actual);
  162:         $this->assertTrue($actual);
  194:         $this->assertTrue($actual);
  208:         $this->assertFalse($actual);
  228:         $this->assertFalse($actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/TaxJar/Task/TaxExempt/CheckerTest.php:
   59:         $this->assertFalse($actual);
   69:         $this->assertFalse($actual);
   91:         $this->assertTrue($actual);
  107:         $this->assertFalse($actual);
  144:         $this->assertTrue($actual);
  156:         $this->assertFalse($actual);
  189:         $this->assertTrue($actual);
  201:         $this->assertFalse($actual);
  213:         $this->assertFalse($actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/TaxJar/Task/TaxExempt/HandlerTest.php:
  102:         $this->assertEquals((string) $orderId, $actual);
  130:         $this->assertEquals((string) $orderId, $actual);
  160:         $this->assertEquals($orderId.'-exempt', $actual);
  297:         $this->assertEquals($orderId.'-refund', $actual['transaction_id']);
  298:         $this->assertEquals($orderId, $actual['transaction_reference_id']);
  299:         $this->assertEquals($now, $actual['transaction_date']);
  325:         $this->assertEquals($orderId.'-exempt', $actual['transaction_id']);
  326:         $this->assertArrayNotHasKey('transaction_reference_id', $actual);
  327:         $this->assertEquals($now, $actual['transaction_date']);
  328:         $this->assertEquals(0.0, $actual['sales_tax']);
  344:         $this->assertEquals($orderId.'-exempt', $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/TaxJar/Task/TaxExempt/TransactionCombinerTest.php:
  80:         $this->assertSame($transaction, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/TaxJar/Task/TaxExempt/TransactionGetterTest.php:
  228:         $this->assertCount(8, $actual);
  229:         $this->assertContainsOnlyInstancesOf(TransactionInterface::class, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/TaxJar/Transaction/AbstractBuilderTest.php:
   66:         $this->assertEquals($street, $actual['to_street']);
   67:         $this->assertEquals($city, $actual['to_city']);
   68:         $this->assertEquals($state, $actual['to_state']);
   69:         $this->assertEquals($zip, $actual['to_zip']);
   70:         $this->assertEquals($country, $actual['to_country']);
   85:         $this->assertEquals($customerId, $actual['customer_id']);
   99:         $this->assertArrayNotHasKey('customer_id', $actual);
  130:         $this->assertArraySubset($expected, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/TaxJar/Transaction/ChargeBuilderTest.php:
  48:         $this->assertEquals($system.'-'.$transactionId.'-charge', $actual->getId());

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/TaxJar/Transaction/DateGetterTest.php:
  109:         $this->assertEquals('2018-03-09 12:11:30', $actual->format('Y-m-d H:i:s'));

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/TaxJar/Transaction/GeneratorTest.php:
  523:         $this->assertInstanceOf(Transaction::class, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/TaxJar/Transaction/LineItemNormalizerTest.php:
  378:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/TaxJar/Transaction/RefundBuilderTest.php:
   76:                         $test->assertInstanceOf(LookupResultInterface::class, $arg);
   77:                         $test->assertEquals($expectedTaxTotal, $arg->getTaxTotal());
  120:                         $test->assertInstanceOf(LookupResultInterface::class, $arg);
  121:                         $test->assertEquals($expectedTaxTotal, $arg->getTaxTotal());
  123:                             $test->assertEquals(
  175:         $this->assertArraySubset($expected, $actual);
  214:         $this->assertArraySubset($expected, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/TaxJar/Transaction/TransactionFactoryTest.php:
   44:         $this->assertInstanceOf(Transaction::class, $actual);
   45:         $this->assertInstanceOf(AddressInterface::class, $actual->getFromAddress());
   46:         $this->assertEquals($this->originAddress['street'], $actual->getFromAddress()->getStreetAddress());
   47:         $this->assertEquals($this->originAddress['city'], $actual->getFromAddress()->getCity());
   48:         $this->assertEquals($this->originAddress['state'], $actual->getFromAddress()->getState());
   49:         $this->assertEquals($this->originAddress['zip'], $actual->getFromAddress()->getZip());
   50:         $this->assertEquals($this->originAddress['country'], $actual->getFromAddress()->getCountry());
   75:         $this->assertInstanceOf(Transaction::class, $actual);
   76:         $this->assertArraySubset($object, $actual->toArray());
   77:         $this->assertEquals($this->originAddress['street'], $actual->getFromAddress()->getStreetAddress());
   78:         $this->assertEquals($this->originAddress['city'], $actual->getFromAddress()->getCity());
   79:         $this->assertEquals($this->originAddress['state'], $actual->getFromAddress()->getState());
   80:         $this->assertEquals($this->originAddress['zip'], $actual->getFromAddress()->getZip());
   81:         $this->assertEquals($this->originAddress['country'], $actual->getFromAddress()->getCountry());
  106:         $this->assertInstanceOf(Transaction::class, $actual);
  107:         $this->assertInstanceOf(NullAddress::class, $actual->getToAddress());
  131:         $this->assertNull($actual->getCustomerId());
  155:         $this->assertNull($actual->getParentId());

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Twig/Extension/CreditCardMaskerTest.php:
   35:         $this->assertInstanceOf(AbstractExtension::class, $this->fixture);
   42:         $this->assertCount(2, $filterList);
   43:         $this->assertFilter($filterList, 'maskCreditCard');
   44:         $this->assertFilter($filterList, 'last4', 'getLastFour');
   80:         $this->assertEquals($maskedNumber, $actual);
   93:         $this->assertEquals($expected, $actual);
  121:         $this->assertInstanceOf(TwigFilter::class, $filter);
  122:         $this->assertEquals($filterName, $filter->getName());
  123:         $this->assertEquals([$this->fixture, $methodName], $filter->getCallable());

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Twig/Extension/FacetUrlGeneratorTest.php:
   43:         $this->assertInstanceOf(AbstractExtension::class, $this->fixture);
   50:         $this->assertCount(1, $filterList);
   51:         $this->assertFilter($filterList, 'generateFacetUrl');
  108:         $this->assertEquals($url, $actual);
  121:         $this->assertInstanceOf(TwigFilter::class, $filter);
  122:         $this->assertEquals($filterName, $filter->getName());
  123:         $this->assertEquals([$this->fixture, $filterName], $filter->getCallable());

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Twig/Extension/MaxUploadSizeTest.php:
  26:         $this->assertInstanceOf(AbstractExtension::class, $this->fixture);
  33:         $this->assertCount(1, $actual);
  34:         $this->assertContainsOnlyInstancesOf(TwigFunction::class, $actual);
  46:         $this->assertEquals($maxSize, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Twig/Extension/PaymentDetailsTest.php:
   46:         $this->assertInstanceOf(AbstractExtension::class, $this->fixture);
   53:         $this->assertCount(3, $actual);
   54:         $this->assertContainsOnlyInstancesOf(TwigFunction::class, $actual);
   76:         $this->assertEquals($expected, $actual);
  108:         $this->assertEquals($expected, $actual);
  144:         $this->assertNull($actual);
  154:         $this->assertEquals($this->cardImageMap[$type], $actual);
  163:         $this->assertNull($actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Twig/Extension/RefinementExcludeUrlGeneratorTest.php:
   43:         $this->assertInstanceOf(AbstractExtension::class, $this->fixture);
   50:         $this->assertCount(1, $filterList);
   51:         $this->assertFilter($filterList, 'generateExcludeRefinementUrl');
  121:         $this->assertEquals($url, $actual);
  134:         $this->assertInstanceOf(TwigFilter::class, $filter);
  135:         $this->assertEquals($filterName, $filter->getName());
  136:         $this->assertEquals([$this->fixture, $filterName], $filter->getCallable());

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Twig/Extension/RefinementUrlGeneratorTest.php:
   43:         $this->assertInstanceOf(AbstractExtension::class, $this->fixture);
   50:         $this->assertCount(1, $filterList);
   51:         $this->assertFilter($filterList, 'generateRefinementUrl');
  112:         $this->assertEquals($url, $actual);
  125:         $this->assertInstanceOf(TwigFilter::class, $filter);
  126:         $this->assertEquals($filterName, $filter->getName());
  127:         $this->assertEquals([$this->fixture, $filterName], $filter->getCallable());

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Twig/Extension/RelativeDateTest.php:
  27:         $this->assertInstanceOf(AbstractExtension::class, $this->fixture);
  34:         $this->assertCount(1, $actual);
  37:         $this->assertInstanceOf(TwigFilter::class, $filter);
  38:         $this->assertEquals('relative_date', $filter->getName());
  39:         $this->assertEquals([$this->fixture, 'getRelativeDate'], $filter->getCallable());
  49:         $this->assertEquals($expected, $actual);
  61:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Utility/ProductUtilityTest.php:
   35:         $this->assertEquals(array_keys($outputA), [$this->products[0]->getId()]);
   36:         $this->assertSame(current($outputA), [$this->attributes[0]]);
   40:         $this->assertEquals(array_keys($outputB), [$this->products[0]->getId()]);
   41:         $this->assertSame(current($outputB), [$this->attributes[0]]);
   46:         $this->assertEquals(array_keys($outputC), [$this->products[0]->getId()]);
   47:         $this->assertSame(current($outputC), [$this->attributes[0]]);
   51:         $this->assertEquals(
   61:         $this->assertSame($outputD[$this->products[0]->getId()], [$this->attributes[0]]);
   63:         $this->assertSame(
   68:         $this->assertSame(
   73:         $this->assertEquals($outputD[$this->products[3]->getId()], []);
   77:         $this->assertEquals($outputE, []);
   86:         $this->assertEquals(array_keys($outputA), [$this->products[0]->getId()]);
   87:         $this->assertSame(current($outputA), [$this->altIds[0], $this->altIds[1]]);
   91:         $this->assertEquals(array_keys($outputB), [$this->products[0]->getId()]);
   92:         $this->assertSame(current($outputB), [$this->altIds[0]]);
   97:         $this->assertEquals(array_keys($outputC), [$this->products[0]->getId()]);
   98:         $this->assertSame(current($outputC), [$this->altIds[1]]);
  102:         $this->assertEquals(array_keys($outputD), [$this->products[0]->getId()]);
  103:         $this->assertEquals(current($outputD), []);
  107:         $this->assertEquals(
  115:         $this->assertSame($outputE[$this->products[0]->getId()], [$this->altIds[0]]);
  116:         $this->assertSame(
  120:         $this->assertEquals($outputE[$this->products[2]->getId()], []);
  124:         $this->assertEquals(
  132:         $this->assertSame(
  136:         $this->assertEquals($outputF[$this->products[1]->getId()], []);
  137:         $this->assertEquals($outputF[$this->products[2]->getId()], []);
  146:         $this->assertEquals(array_keys($expected), array_keys($output));
  147:         $this->assertSame($expected, $output);
  167:         $this->assertEquals($expected, $actual);
  185:         $this->assertEquals($expected, $actual);
  200:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Watchlist/WatchlistManagerTest.php:
   72:         $this->assertNull($actual);
   88:         $this->assertInstanceOf(WatchlistInterface::class, $actual);
   89:         $this->assertEquals($expected, $actual->getId());
  159:         $this->assertNull($actual);
  168:         $this->assertFalse($success);
  171:         $this->assertCount(0, $actual);
  193:         $this->assertTrue($success);
  194:         $this->assertEquals($expected, $actual->getSelector());
  195:         $this->assertEquals($type, $actual->getSelectorType());
  196:         $this->assertEquals($flags, ArrayUtility::callMethodOnList($actual->getFlags(), 'getName'));
  260:         $this->assertTrue($success);
  261:         $this->assertEquals($selector, $actual->getSelector());
  262:         $this->assertEquals($type, $actual->getSelectorType());
  263:         $this->assertEquals($expected, ArrayUtility::callMethodOnList($actual->getFlags(), 'getName'));
  330:         $this->assertEquals($selector, $watchlist->getSelector());
  331:         $this->assertEquals($type, $watchlist->getSelectorType());
  334:         $this->assertEquals($expected, ArrayUtility::callMethodOnList($actual->getFlags(), 'getName'));
  395:         $this->assertEquals($selector, $watchlist->getSelector());
  396:         $this->assertEquals($type, $watchlist->getSelectorType());
  399:         $this->assertEquals($expected, ArrayUtility::callMethodOnList($actual->getFlags(), 'getName'));
  408:         $this->assertFalse($success);
  411:         $this->assertCount(0, $actual);
  426:         $this->assertFalse($success);
  467:         $this->assertTrue($success);
  468:         $this->assertEquals($selector, $actual->getSelector());
  469:         $this->assertEquals($type, $actual->getSelectorType());
  470:         $this->assertEquals($expected, ArrayUtility::callMethodOnList($actual->getFlags(), 'getName'));
  534:         $this->assertEquals($selector, $watchlist->getSelector());
  535:         $this->assertEquals($type, $watchlist->getSelectorType());
  538:         $this->assertEquals([$flagB], ArrayUtility::callMethodOnList($actual->getFlags(), 'getName'));
  565:         $this->assertEquals($selector, $watchlist->getSelector());
  566:         $this->assertEquals($type, $watchlist->getSelectorType());
  569:         $this->assertEquals([$flagB], ArrayUtility::callMethodOnList($actual->getFlags(), 'getName'));
  586:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Watchlist/WatchlistUpdaterTest.php:
  155:         $this->assertEquals($selector, $actual->getArgument('selector'));
  156:         $this->assertEquals($type, $actual->getArgument('type'));
  157:         $this->assertEquals($flags, $actual->getArgument('flags'));

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Workflow/SqsConsumerTest.php:
   87:         $this->loggerSpy->assertEmptyLogs();
  107:         $this->loggerSpy->assertEmptyLogs();
  152:         $this->loggerSpy->assertEmptyLogs();
  243:         $this->loggerSpy->assertEmptyLogs();
  282:         $this->loggerSpy->assertLogsContains($errorMessage);
  329:                     $this->assertContains('ROLE_SYSTEM', $roleList, 'Did not switch to a system role');

DiscountOfficeItems • src/DealExpress/CatalogBundle/Tests/Workflow/ServiceObject/CancelPaymentsTest.php:
  112:         $this->assertTrue($this->fixture->execute($exec));
  198:         $this->assertEquals('Cancel Payments', $this->fixture);

DiscountOfficeItems • src/DealExpress/CMSBundle/Tests/Plugin/ProductListingPluginTest.php:
   62:         $this->assertInstanceOf(PluginInterface::class, $this->fixture);
   70:         $this->assertEquals($expected, $actual);
   78:         $this->assertEquals($expected, $actual);
  107:         $this->assertEquals($expected, $actual);
  207:         $this->assertCount(2, $invocationList);
  213:         $this->assertEquals($expectedTwig, $firstCall[0]);
  214:         $this->assertEquals($expectedTwig, $secondCall[0]);
  215:         $this->assertArraySubset($expectedSubset, $firstCall[1]);
  216:         $this->assertArraySubset($expectedSubset, $secondCall[1]);
  240:         $this->assertCount(2, $invocationList);
  244:         $this->assertSame([$productListingA], $firstCall[1]['results']->getProductListingList());
  245:         $this->assertSame([$productListingB], $secondCall[1]['results']->getProductListingList());
  246:         $this->assertSame('', $firstCall[1]['results']->getKeywords());
  247:         $this->assertSame($title, $secondCall[1]['results']->getKeywords());
  256:         $this->assertEquals($expected, $actual);
  277:         $this->assertEquals($expected, $actual);
  300:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/CMSBundle/Tests/Service/PageTest.php:
   88:         $this->assertFalse($actual);
   97:         $this->assertTrue($actual);
  105:         $this->assertSame($this->entity, $actual);
  231:         $this->assertEquals($expected, $actual);
  246:         $this->assertEquals($expected, $actual);
  260:         $this->assertEquals($expected, $actual);
  275:         $this->assertEquals($expected, $actual);
  278:         $this->assertInstanceOf(CmsPage::class, $entity);
  279:         $this->assertEquals($layout, $entity->getLayout());
  285:         $this->assertFalse($actual);
  300:         $this->assertFalse($actual);
  319:         $this->assertFalse($actual);
  337:         $this->assertFalse($actual);
  355:         $this->assertTrue($actual);
  387:         $this->assertEquals($expected, $actual);
  400:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/CMSBundle/Tests/Service/TemplateFinderTest.php:
  31:         $this->assertEquals([], $actual);
  37:         $this->assertEquals([], $actual);
  57:         $this->assertEquals($expected, $actual);
  75:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/DiscountOfficeItemsBundle/Tests/Cart/BehaviorTrackingTest.php:
   46:         $this->assertFalse($this->fixture->needsAdjustment($cart, $this->logger));
   55:         $this->assertTrue($this->fixture->needsAdjustment($cart, $this->logger));
   73:         $this->assertFalse($this->fixture->needsAdjustment($cart, $this->logger));
   91:         $this->assertTrue($this->fixture->needsAdjustment($cart, $this->logger));
  112:         $this->assertEquals(implode('/', $referrer), $entityCart->getChannel());

DiscountOfficeItems • src/DealExpress/DiscountOfficeItemsBundle/Tests/Command/EkomiEmailCommandTest.php:
  124:         $this->assertStringContainsString($expected, $actual);
  144:         $this->assertStringContainsString($expected, $actual);
  171:         $this->assertStringContainsString($expected, $actual);

DiscountOfficeItems • src/DealExpress/DiscountOfficeItemsBundle/Tests/Command/FlagPriceDropCommandTest.php:
   88:         $this->assertInstanceOf(Command::class, $this->fixture);
  150:         $this->assertWasPrice($wasList);
  171:         $this->assertEquals($expected, $actual);
  349:         $this->assertEquals($actualSetEvent->getUser(), 'doi:pricedrop');
  350:         $this->assertEquals($actualSetEvent->getReason(), '');
  351:         $this->assertEquals($actualRestoreEvent->getUser(), 'doi:pricedrop');
  352:         $this->assertEquals($actualRestoreEvent->getReason(), '');
  440:         $this->assertEventsDispatched(
  512:         $this->assertEquals($expected, $actual);
  640:         $this->assertEventsDispatched(
  715:         $this->assertEquals($expected, $actual);
  900:         $this->assertEquals($expectedCount, $actualCount, $message);

DiscountOfficeItems • src/DealExpress/DiscountOfficeItemsBundle/Tests/Command/FlagTopSellersCommandTest.php:
  83:         $this->assertInstanceOf(Command::class, $this->fixture);

DiscountOfficeItems • src/DealExpress/DiscountOfficeItemsBundle/Tests/Command/PurgePaymentDetailsCommandTest.php:
  218:             $this->assertEquals(Event::TYPE_SYSTEM, $actual->getType());
  219:             $this->assertEquals(Event::STATUS_UPDATED, $actual->getStatusId());
  220:             $this->assertEquals('Removed expired payment details from subscription', $actual->getMessage());
  221:             $this->assertEquals('', $actual->getDetails());
  246:         $this->assertPaymentDetailsEquals($expected['details']);
  247:         $this->assertEquals($output, $actual);
  270:         $this->assertPaymentDetailsEquals($expected['details']);
  271:         $this->assertEquals('', $actual);
  334:         $this->assertRegexp('/; purged 0 remote cards;/', $actual);
  628:         $this->assertEquals($expected, $actual, 'Wrong payment details');

DiscountOfficeItems • src/DealExpress/DiscountOfficeItemsBundle/Tests/Command/TestInvoicePdfCommandTest.php:
  168:             $this->assertEquals($expectedTemplate, $actualTemplate, 'template does not match');
  169:             $this->assertInstanceOf(OrdersInvoices::class, $details->invoice, 'invalid invoice');
  170:             $this->assertContainsOnlyInstancesOf(OrdersInvoicesLines::class, $details->lines, 'invalid invoice lines');
  213:         $this->assertEquals($expected, $actual);
  222:         $this->assertEquals('', $actual);
  243:             $this->assertEquals($data, $actual);

DiscountOfficeItems • src/DealExpress/DiscountOfficeItemsBundle/Tests/Command/UpdatePaymentEmailCommandTest.php:
  111:             $this->assertEquals(array_keys($expected[$index]), array_keys($data));
  116:         $this->assertEquals($expected, $actual);
  118:         $this->logger->assertLogsEqual(
  250:         $this->logger->assertEmptyLogs();

DiscountOfficeItems • src/DealExpress/DiscountOfficeItemsBundle/Tests/Controller/CartController/ReferrerTrackingTest.php:
   88:         $this->assertEquals($expected['firstReferrer'], $this->behaviorStorage->read()->get('firstReferrer'));
   89:         $this->assertEquals($expected['lastReferrer'], $this->behaviorStorage->read()->get('lastReferrer'));
  123:         $this->assertEquals($expected['userIp'], $session->get('userIP'));
  124:         $this->assertEquals($expected['userAgent'], $session->get('userAgent'));
  213:         $this->assertNull($session);

DiscountOfficeItems • src/DealExpress/DiscountOfficeItemsBundle/Tests/Customer/PurchaseHistoryProviderTest.php:
   65:         $this->assertTrue($actual);
   85:         $this->assertFalse($actual);
   98:         $this->assertEmpty($actual);
  113:         $this->assertEquals([$productId => false], $actual);
  130:         $this->assertEquals([$productId => false], $actual);
  156:         $this->assertEquals(

DiscountOfficeItems • src/DealExpress/DiscountOfficeItemsBundle/Tests/Email/MessageFactory/AttachOrderTest.php:
  57:         $this->assertSame($message, $actual);
  82:         $this->assertInstanceOf(Attachment::class, $attachment);
  83:         $this->assertEquals(

DiscountOfficeItems • src/DealExpress/DiscountOfficeItemsBundle/Tests/Factory/CategoryFactoryTest.php:
   53:         $this->assertEquals($expected, $actual);
  183:         $this->assertEquals($expected, $actual);
  202:         $this->assertEquals($expected, $actual);
  224:         $this->assertEquals([$seek => $expected], $actual);

DiscountOfficeItems • src/DealExpress/DiscountOfficeItemsBundle/Tests/Factory/NewSkuProductFactoryTest.php:
  127:         $this->assertEquals([], $actual);
  153:         $this->assertEquals([$productB, $productC, $productA, $productD], $actual);

DiscountOfficeItems • src/DealExpress/DiscountOfficeItemsBundle/Tests/Factory/ProductFactoryTest.php:
   95:         $this->assertInstanceOf(ProductFactoryInterface::class, $this->fixture);
  107:             $this->assertSame($productResult, null);
  112:         $this->assertSame($products[$productsId]['id'], $productResult->getId());
  113:         $this->assertSame($products[$productsId]['sku'], $productResult->getSku());
  114:         $this->assertSame($products[$productsId]['mfgPartNum'], $productResult->getMfgPartNo());
  115:         $this->assertSame($products[$productsId]['name'], $productResult->getName());
  116:         $this->assertSame($products[$productsId]['shortDesc'], $productResult->getShortDescription());
  117:         $this->assertSame($products[$productsId]['longDesc'], $productResult->getLongDescription());
  118:         $this->assertSame($products[$productsId]['keywords'], $productResult->getKeywords());
  161:             $this->assertSame($productResult, null);
  188:             $this->assertSame($productResult, null);
  215:             $this->assertSame($productResult, null);
  242:             $this->assertSame($productResult, null);
  269:             $this->assertSame($productResult, null);
  296:             $this->assertSame($productResult, null);
  311:             $this->assertSame($productResult, null);
  318:             $this->assertEquals($productAttributeList->count(), 0);
  325:             $this->assertSame($attributeExpected['name'], $attributeActual->getValue());
  326:             $this->assertSame($attributeExpected['class'], $attributeActual->getClass());
  339:             $this->assertSame($productResult, null);
  346:             $this->assertEquals($productImageList->count(), 0);
  353:             $this->assertSame($imageActual->getHash(), $imageExpected['hash']);
  354:             $this->assertSame($imageActual->getSourceId(), $imageExpected['source']);
  367:             $this->assertSame($productResult, null);
  374:             $this->assertEquals($productMediaList->count(), 0);
  381:             $this->assertSame($mediaActual->getType(), $mediaExpected['type']);
  382:             $this->assertSame($mediaActual->getSourceId(), $mediaExpected['source']);
  395:             $this->assertSame($productResult, null);
  402:             $this->assertCount(0, $alternateList);
  409:             $this->assertSame($altActual->getType(), $altExpected['type']);
  410:             $this->assertSame($altActual->getValue(), $altExpected['value']);
  423:             $this->assertSame($productResult, null);
  430:             $this->assertEquals($categoryList->count(), 0);
  437:             $this->assertSame($categoryActual->getId(), $categoryExpected['id']);
  438:             $this->assertSame($categoryActual->getName(), $categoryExpected['name']);
  454:                 $this->assertEquals($expected, $productResult);
  461:         $this->assertEquals($valid, $resultFound);
  478:             $this->assertContains($productId, $found, 'did not find an expected product');
  481:         $this->assertEquals(

DiscountOfficeItems • src/DealExpress/DiscountOfficeItemsBundle/Tests/Factory/WeeklyDeals/ProductDataFactoryTest.php:
  30:         $this->assertInstanceOf(ProductData::class, $actual);
  39:         $this->assertProductDataList($actual, $product);
  40:         $this->assertTrue($actual[0]->getAvailable());
  49:         $this->assertEquals($product, $actual->getProduct());
  59:         $this->assertFalse($actualOne->getAvailable());
  60:         $this->assertTrue($actualTwo->getAvailable());
  69:         $this->assertCount(1, $actual);
  70:         $this->assertContainsOnlyInstancesOf(ProductData::class, $actual);
  71:         $this->assertEquals($product, $actual[0]->getProduct());

DiscountOfficeItems • src/DealExpress/DiscountOfficeItemsBundle/Tests/Filter/CartEmailFieldsTest.php:
  114:         $this->assertEquals($expected, ($this->fixture)($cart));
  311:         $this->assertEquals([], $params, 'Not expecting any product url parameters');
  312:         $this->assertEquals(

DiscountOfficeItems • src/DealExpress/DiscountOfficeItemsBundle/Tests/Filter/CartEmailTest.php:
  55:         $this->assertEquals($expected, ($this->fixture)($cart));

DiscountOfficeItems • src/DealExpress/DiscountOfficeItemsBundle/Tests/Form/Processor/AccountReturnFormDataFactoryTest.php:
  41:         $this->assertEquals($expected, $actual);
  70:         $this->assertEquals($expected, $actual);
  99:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/DiscountOfficeItemsBundle/Tests/Form/Processor/AccountReturnFormProcessorTest.php:
  116:         $this->logs->assertLogsContains('Please review your form submission.');
  128:         $this->assertFalse($actual);
  147:         $this->assertFalse($actual);
  148:         $this->logs->assertLogsContains('No products selected for return.');
  218:         $this->logs->assertLogsContains(
  256:         $this->logs->assertLogsContains(
  294:         $this->logs->assertLogsContains(
  332:         $this->logs->assertLogsContains(
  373:         $this->logs->assertLogsContains(
  416:         $this->logs->assertLogsContains(
  419:         $this->logs->assertLogsContains(
  488:         $this->assertTrue($actual);
  533:         $this->assertFalse($actual);
  609:         $this->assertTrue($actual);
  610:         $this->logs->assertLogsContains('Your return request has been submitted.');
  622:         $this->assertEmpty($actual);
  636:         $this->assertEmpty($actual);
  661:         $this->assertEmpty($actual);
  719:         $this->assertSame($expected, $actual);

DiscountOfficeItems • src/DealExpress/DiscountOfficeItemsBundle/Tests/Geography/GeographyTest.php:
  14:         $this->assertEquals(Geography::SHIPPABLE_STATE_CODES, $actual);
  21:         $this->assertEquals(Geography::BILLABLE_STATE_CODES, $actual);

DiscountOfficeItems • src/DealExpress/DiscountOfficeItemsBundle/Tests/Homepage/BannerManagerTest.php:
   47:         $this->assertInstanceOf(BannerContainer::class, $actual);
   59:         $this->assertEquals($couponGlobal, $actual->getCouponGlobal());
   70:         $this->assertEquals($desktopHeroList, $actual->getDesktopHeroList());
   81:         $this->assertEquals($mobileHeroList, $actual->getMobileHeroList());
   95:         $this->assertEquals([], $actual->getHomeAList());
  111:         $this->assertEquals([$bannerAPosition => $bannerA], $actual->getHomeAList());
  122:         $this->assertEquals($homeCList, $actual->getHomeCList());
  134:         $this->assertEquals($rebate, $actual->getRebate());
  146:         $this->assertEquals($weeklyDeal, $actual->getWeeklyDeal());
  158:         $this->assertEquals($coupon, $actual->getCoupon());
  170:         $this->assertEquals($valuePack, $actual->getValuePack());

DiscountOfficeItems • src/DealExpress/DiscountOfficeItemsBundle/Tests/Homepage/BloomReachClientTest.php:
  137:         $this->assertInstanceOf(BloomReachContainer::class, $actual);
  151:         $this->assertEquals($bestsellerList, $actual->getBestsellerList());
  165:         $this->assertEquals($justForYou, $actual->getJustForYou());

DiscountOfficeItems • src/DealExpress/DiscountOfficeItemsBundle/Tests/Login/AuthenticationSuccessHandlerTest.php:
   72:         $this->assertInstanceOf(AuthenticationSuccessHandlerInterface::class, $this->fixture);
   90:         $this->assertEquals($options, $actual);
  121:         $this->assertEquals($providerKey, $actual);
  215:         $this->assertSame($response, $actual);

DiscountOfficeItems • src/DealExpress/DiscountOfficeItemsBundle/Tests/Login/CartUpdaterIntegrationTest.php:
  147:         $this->assertEmpty($logger->all());
  150:         $this->assertLineItems(
  163:         $this->assertEquals($guestCartId, $actual);
  168:         $this->assertEquals($user->getId(), $cart->getCustomerId());
  178:         $this->assertEquals(
  227:         $this->assertEmpty($logger->all());
  229:         $this->assertLineItems(
  242:         $this->assertEquals($guestCartId, $actual);
  247:         $this->assertEquals($user->getId(), $cart->getCustomerId());
  249:         $this->assertLineItems(
  307:         $this->assertEmpty($logger->all());
  309:         $this->assertLineItems(
  322:         $this->assertEquals($userCartId, $actual);
  327:         $this->assertNull($this->storage->getCart($guestCartId));
  330:         $this->assertEquals($user->getId(), $cart->getCustomerId());
  332:         $this->assertLineItems(
  359:         $this->assertEquals($expected, $actualLineList);

DiscountOfficeItems • src/DealExpress/DiscountOfficeItemsBundle/Tests/Login/CartUpdaterTest.php:
   72:         $this->assertEquals($cartId, $actual);
  227:                     $this->assertEquals($customerCartId, $subject->getCartId());
  249:         $this->assertEquals($customerCartId, $actual);
  263:         $this->assertEquals($user->getId(), $cart->getCustomerId());
  276:         $this->assertEquals('', $actual);

DiscountOfficeItems • src/DealExpress/DiscountOfficeItemsBundle/Tests/Login/CheckoutDeterminerTest.php:
   41:         $this->assertFalse($actual);
   65:         $this->assertFalse($actual);
   79:         $this->assertTrue($actual);
  102:         $this->assertFalse($actual);

DiscountOfficeItems • src/DealExpress/DiscountOfficeItemsBundle/Tests/Login/FormAuthenticationEntryPointTest.php:
   50:         $this->assertInstanceOf(BaseFormAuthenticationEntryPoint::class, $this->fixture);
  124:         $this->assertEquals($response, $actual);
  151:         $this->assertEquals($response, $entryPointResponse);
  152:         $this->assertEquals(401, $entryPointResponse->getStatusCode());

DiscountOfficeItems • src/DealExpress/DiscountOfficeItemsBundle/Tests/Login/ReferrerCheckoutDeterminerTest.php:
  62:         $this->assertInstanceOf(RedirectResponse::class, $actual);
  63:         $this->assertEquals($referrer, $actual->getTargetUrl());
  76:         $this->assertEquals($response, $actual);

DiscountOfficeItems • src/DealExpress/DiscountOfficeItemsBundle/Tests/Order/DeliveryEstimatorTest.php:
   55:         $this->assertIsInt($this->fixture->getEstimatedDate($order));
  105:         $this->assertEquals($possibleDeliveryDates[$expected], $actual);
  132:         $this->assertEquals($possibleDeliveryDates['mfg_dir'], $actual);
  146:         $this->assertEquals(1893520923, $actual);

DiscountOfficeItems • src/DealExpress/DiscountOfficeItemsBundle/Tests/Order/ExpressProcessingAvailabilityDeciderTest.php:
  94:         $this->assertSame($expected, $actual, $message);

DiscountOfficeItems • src/DealExpress/DiscountOfficeItemsBundle/Tests/Order/FlagProviderTest.php:
   49:         $this->assertEquals([$idA, $idB, $idC], $actual);
   74:         $this->assertInstanceOf(ArrayCollection::class, $response);
   75:         $this->assertEquals([$flagA, $flagB, $flagC], $actual);
   94:         $this->assertEquals([$idA, $idB, $idC], $actual);
  110:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/DiscountOfficeItemsBundle/Tests/Order/ProductSummaryFactoryTest.php:
   32:         $this->assertInstanceOf(ProductSummary::class, $actual[0]);
   42:         $this->assertArrayHasKey($productId, $actual);
   53:         $this->assertEquals($productId, $actual[$productId]->getProductId());
   65:         $this->assertCount(1, $actual);
   77:         $this->assertEquals($productId, $actual[$productId]->getProductId());
   88:         $this->assertCount(2, $actual);
  101:         $this->assertEquals($productIdA, $actual[$productIdA]->getProductId());
  102:         $this->assertEquals($productIdB, $actual[$productIdB]->getProductId());
  113:         $this->assertEquals($sku, $actual[0]->getSku());
  124:         $this->assertEquals($quantity, $actual[0]->getQuantity());
  138:         $this->assertEquals($quantityA + $quantityB, $actual[$productId]->getQuantity());

DiscountOfficeItems • src/DealExpress/DiscountOfficeItemsBundle/Tests/Order/Analytics/LineItemNormalizerTest.php:
  72:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/DiscountOfficeItemsBundle/Tests/Order/Analytics/ReporterTest.php:
   85:         $this->assertEquals($clientIdPartA.'.'.$clientIdPartB, $this->client->getClientId());
  101:         $this->assertNull($this->client->getClientId());
  102:         $this->assertNotNull($this->client->getUserId());
  118:         $this->assertNull($this->client->getClientId());
  119:         $this->assertNotNull($this->client->getUserId());
  132:         $this->assertEquals($userAgent, $this->client->getUserAgentOverride());
  152:         $this->assertEquals($couponCode, $this->client->getCouponCode());
  167:         $this->assertNull($this->client->getCouponCode());
  200:         $this->assertEquals($normalizedLineItems, $this->client->getProduct());
  213:         $this->assertEquals($ip, $this->client->getIpOverride());
  226:         $this->assertEquals($transactionId, $this->client->getTransactionId());
  238:         $this->assertEquals('Checkout Success', $this->client->getEventAction());
  251:         $this->assertEquals($total, $this->client->getRevenue());
  264:         $this->assertEquals($tax, $this->client->getTax());
  277:         $this->assertEquals($shipping, $this->client->getShipping());
  294:         $this->assertEquals("{$skuA},{$skuB},{$skuC}", $this->client->getEventLabel());
  306:         $this->assertTrue($this->client->getNonInteractionHit());
  318:         $this->assertEquals('purchase', $this->client->getProductAction());
  341:         $this->assertEquals('admin', $this->client->getUserId());
  351:         $this->assertEquals($orderId, $this->client->getTransactionId());
  360:         $this->assertEquals('Refund', $this->client->getEventAction());
  369:         $this->assertTrue($this->client->getNonInteractionHit());
  378:         $this->assertEquals('refund', $this->client->getProductAction());

DiscountOfficeItems • src/DealExpress/DiscountOfficeItemsBundle/Tests/Order/View/SummaryFactoryTest.php:
   29:         $this->assertEquals($expected, $actual);
   44:         $this->assertCount(1, $actual['subtotal']);
   45:         $this->assertCount(0, $actual['total']);
   46:         $this->assertContainsOnlyInstancesOf(TotalInterface::class, $actual['subtotal']);
   68:         $this->assertCount(0, $actual['subtotal']);
   69:         $this->assertCount(1, $actual['total']);
   70:         $this->assertContainsOnlyInstancesOf(TotalInterface::class, $actual['total']);
   81:         $this->assertEquals($expected, $actual);
   92:         $this->assertArrayHasKey('subtotal', $actual);
   93:         $this->assertCount(1, $actual['subtotal']);
   94:         $this->assertContainsOnlyInstancesOf(TotalInterface::class, $actual['subtotal']);
   95:         $this->assertEquals(TotalInterface::TYPE_COUPON, $actual['subtotal'][0]->getClass());
   96:         $this->assertEquals('Coupon', $actual['subtotal'][0]->getTitle());
   97:         $this->assertEquals($value, $actual['subtotal'][0]->getValue());
  108:         $this->assertEquals($totalClass, $actual['subtotal'][0]->getClass());
  119:         $this->assertEquals($totalClass, $actual['total'][0]->getClass());
  130:         $this->assertEquals($totalTitle, $actual['total'][0]->getTitle());
  142:         $this->assertEquals($totalTitle, $actual['subtotal'][0]->getTitle());
  153:         $this->assertEquals($totalTitle, $actual['total'][0]->getTitle());
  165:         $this->assertEquals($totalTitle, $actual['subtotal'][0]->getTitle());
  176:         $this->assertEquals($totalValue, $actual['total'][0]->getValue());
  188:         $this->assertEquals($totalValue, $actual['subtotal'][0]->getValue());
  204:         $this->assertEquals($expectedValue, $actual['subtotal'][0]->getValue());
  219:         $this->assertEquals($totalValueA, $actual['subtotal'][0]->getValue());
  220:         $this->assertEquals($totalValueB, $actual['total'][0]->getValue());
  237:         $this->assertEquals($expected, $actual['subtotal'][0]->getTitle());
  264:         $this->assertEquals($expected, $actual['total'][0]->getTitle());
  282:         $this->assertEquals($totalValueA, $actual['subtotal'][0]->getValue());
  283:         $this->assertEquals($totalValueB, $actual['subtotal'][1]->getValue());

DiscountOfficeItems • src/DealExpress/DiscountOfficeItemsBundle/Tests/Product/AttributeSelectorTest.php:
   33:         $this->assertEquals($expected, $actual);
  141:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/DiscountOfficeItemsBundle/Tests/Product/CalendarTest.php:
  37:         $this->assertSame(0, $actual);
  52:         $this->assertEquals($editionYear, $actual);

DiscountOfficeItems • src/DealExpress/DiscountOfficeItemsBundle/Tests/Product/InventoryProviderTest.php:
   78:         $this->assertEquals($expected, $actual);
  101:         $this->assertEquals($expected, $actual);
  172:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/DiscountOfficeItemsBundle/Tests/Product/PromotionProviderTest.php:
  158:         $this->assertEquals($expected, $actual);
  284:         $this->assertEquals($expected, $actual);
  310:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/DiscountOfficeItemsBundle/Tests/Product/SearcherTest.php:
  123:         $this->assertEquals($productListingList, $actual->getProductListingList());
  141:         $this->assertEquals($value, $actual->$method());
  167:         $this->assertEquals($count, $actual->getTotalProductCount());
  181:         $this->assertEquals($categoryList, $actual->getCategoryList());
  212:         $this->assertEquals($facetList, $actual->getFacetList());
  227:         $this->assertEquals($facetList, $actual->getFullfacetList());
  241:         $this->assertEquals($spellingList, $actual->getSuggestedSpellingList());
  255:         $this->assertEquals($context, $actual->getContext());

DiscountOfficeItems • src/DealExpress/DiscountOfficeItemsBundle/Tests/Product/Flag/ProviderTest.php:
   82:         $this->assertInstanceOf(ProductFlagsProviderInterface::class, $this->fixture);
   88:         $this->assertInstanceOf(Collection::class, $actual);
   99:             $this->assertTrue($actualFlagList->contains($expectedFlagName));
  105:         $this->assertCount(0, $actualFlagList);
  116:         $this->assertEquals($flagListForId, $flagListForProduct);
  123:         $this->assertIsBool($actual);
  130:         $this->assertFalse($this->fixture->hasFlag($productId, uniqid()));
  138:         $this->assertTrue($this->fixture->hasFlag($productId, $flag['name']));
  145:         $this->assertIsArray($actual);
  159:         $this->assertEquals($expectedHasFlagList, $actual);
  166:         $this->assertEquals($expectedHasFlagList, $actualFromObjectList);
  183:         $this->assertEquals($expectedHasFlagList, $actual);
  190:         $this->assertEquals($expectedHasFlagList, $actualFromObjectList);
  208:         $this->assertEquals($expected, $actual);
  215:         $this->assertEquals($expected, $actualFromObjectList);
  222:         $this->assertIsArray($actual);
  232:         $this->assertExpectedFlagList(
  238:         $this->assertExpectedFlagList(
  326:         $this->assertExpectedFlagList($productIdList, $expectedFlagList);
  329:         $this->assertExpectedFlagList($productList, $expectedFlagList);
  354:         $this->assertExpectedFlagList($productIdList, $expectedFlagList);
  357:         $this->assertExpectedFlagList($productList, $expectedFlagList);
  438:         $this->assertExpectedFlagList($productIdList, $expectedFlagList);
  441:         $this->assertExpectedFlagList($productList, $expectedFlagList);
  480:         $this->assertExpectedFlagList($productIdList, $expectedFlagList);
  483:         $this->assertExpectedFlagList($productList, $expectedFlagList);
  510:         $this->assertEquals($expectedFlagList, $actualFlagListByProduct);

DiscountOfficeItems • src/DealExpress/DiscountOfficeItemsBundle/Tests/Product/Flag/Provider/AuthorizationAwareDecoratorTest.php:
   57:         $this->assertSame($result, $this->fixture->getFlagList($product));
   72:         $this->assertSame($result, $this->fixture->getFlagList($product));
   86:         $this->assertEquals($feedList, $this->fixture->getFlagList($product)->toArray());
  101:         $this->assertEquals($feedOut, $this->fixture->getFlagList($product)->toArray());
  207:         $this->assertEquals($result, $this->fixture->hasFlag($product, $flag));
  223:         $this->assertEquals($result, $this->fixture->hasFlag($product, $flag));
  235:         $this->assertTrue(
  250:         $this->assertFalse(
  273:         $this->assertEquals(
  300:         $this->assertEquals(
  320:         $this->assertEquals(
  336:         $this->assertEquals(
  353:         $this->assertEquals(

DiscountOfficeItems • src/DealExpress/DiscountOfficeItemsBundle/Tests/Product/Flag/Provider/FreightDeciderTest.php:
  38:         $this->assertIsArray($actual);
  67:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/DiscountOfficeItemsBundle/Tests/Product/Search/AutocompleterTest.php:
   82:         $this->assertEquals($productList, $actual->getProductList());
   97:         $this->assertEquals($hasContent, $actual->hasContent());
  112:         $this->assertSame([$spelling], $actual->getSuggestedSpellingList());

DiscountOfficeItems • src/DealExpress/DiscountOfficeItemsBundle/Tests/Product/Search/FacetListFactoryTest.php:
   50:         $this->assertEquals([], $actual->getAll());
   61:         $this->assertFacetList([$facetA, $facetB], $actual->getAll());
   75:         $this->assertFacetList([$facetA, $facetB], $actual->getAll());
   89:         $this->assertFacetList([$facetA, $facetC], $actual->getAll());
  103:         $this->assertFacetList([$facetB, $facetC], $actual->getAll());
  117:         $this->assertFacetList([$facetB], $actual->getSelected());
  131:         $this->assertFacetList([$facetC], $actual->getUnselected());
  145:         $this->assertFacetList([$facetC, $facetB], $actual->getAll());
  172:         $this->assertEquals([$name], $nameList);
  189:         $this->assertEquals([$nameA, $nameB], $nameList);
  209:         $this->assertEquals([$nameA, $nameB], $nameList);
  279:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/DiscountOfficeItemsBundle/Tests/Product/View/BlockFactoryTest.php:
  112:         $this->assertProductBlock('default', $actual);
  124:         $this->assertProductBlock('default', $actual);
  125:         $this->assertEquals(BlockFactory::NOTICE_DISABLED, $actual->getFailureMessage());
  137:         $this->assertProductBlock('default', $actual);
  149:         $this->assertProductBlock('default', $actual);
  167:         $this->assertProductBlock($displayType, $actual);
  168:         $this->assertCount(1, $actual->getAggregateList());
  171:         $this->assertEquals(0, $aggregate->getId());
  172:         $this->assertEquals('', $aggregate->getName());
  173:         $this->assertCount(1, $aggregate->getValueList());
  176:         $this->assertEquals('common-product', $aggregateValue->getClass());
  177:         $this->assertEquals('', $aggregateValue->getValue());
  201:         $this->assertProductBlock($expected, $actual);
  370:         $this->assertProductBlock('default', $actual);
  392:         $this->assertProductBlock('default', $actual);
  393:         $this->assertEquals($failureMessage, $actual->getFailureMessage());
  408:         $this->assertEquals($aggregateList, $actual->getAggregateList(), 'Attributes did not match.');
  409:         $this->assertProductBlock($display, $actual);
  419:         $this->assertEquals(BlockFactory::ERR_NO_DISTINCT, $actual->getFailureMessage());
  530:         $this->assertInstanceOf(ProductBlock::class, $actual);
  531:         $this->assertEquals($display, $actual->getDisplay(), 'Display did not match.');

DiscountOfficeItems • src/DealExpress/DiscountOfficeItemsBundle/Tests/Product/View/PriceFactoryTest.php:
   57:         $this->assertEquals([], $actual, 'Default output when no products are provided');
  123:         $this->assertArrayHasKey($productId, $actual);
  124:         $this->assertContainsOnlyInstancesOf(Price::class, $actual);
  125:         $this->assertSame(0, $actual[$productId]->getPriceValue());
  126:         $this->assertSame(0, $actual[$productId]->getDisplayPrice());
  127:         $this->assertFalse($actual[$productId]->isLoginRequired());
  128:         $this->assertFalse($actual[$productId]->isMapHidden());
  146:         $this->assertEquals(
  151:         $this->assertEquals(
  170:         $this->assertEquals(
  206:         $this->assertEquals($expected, $actualList);
  252:         $this->assertSame(0, $actual[$productId]->getDisplayPrice());
  315:         $this->assertInstanceOf(Price::class, $actual);
  316:         $this->assertEquals($loginRequired, $actual->isLoginRequired());
  317:         $this->assertEquals($mapHidden, $actual->isMapHidden());
  318:         $this->assertEquals($map, $actual->getDisplayPrice());
  319:         $this->assertEquals($price, $actual->getPriceValue());
  320:         $this->assertTrue($actual->hasMap());
  346:         $this->assertInstanceOf(Price::class, $actual);
  347:         $this->assertEquals($loginRequired, $actual->isLoginRequired());
  348:         $this->assertEquals($mapHidden, $actual->isMapHidden());
  349:         $this->assertEquals($map, $actual->getDisplayPrice());
  350:         $this->assertEquals($price, $actual->getPriceValue());
  351:         $this->assertTrue($actual->hasMap());
  371:         $this->assertFalse($actual->hasMap());
  393:         $this->assertFalse($actual->isMapHidden());
  414:         $this->assertFalse($actual->isMapHidden());
  436:         $this->assertTrue($actual->isMapHidden());
  457:         $this->assertTrue($actual->isMapHidden());

DiscountOfficeItems • src/DealExpress/DiscountOfficeItemsBundle/Tests/Product/View/ProductListingFactoryTest.php:
   97:         $this->assertEquals([], $actual);
  183:         $this->assertContainsOnlyInstancesOf(ProductListing::class, $actual);
  184:         $this->assertCount(1, $actual);
  206:         $this->assertInstanceOf(WasPrice::class, $productListing->getWasPrice());
  207:         $this->assertFalse($productListing->getWasPrice()->isDisplayable());
  208:         $this->assertEquals(null, $productListing->getWasPrice()->getPriceValue());
  221:         $this->assertSame($product, $productListing->getProduct());
  237:         $this->assertSame($viewPrice, $productListing->getPrice());
  256:         $this->assertInstanceOf(WasPrice::class, $productListing->getWasPrice());
  288:         $this->assertSame($expected, $productListing->isHotBuy());
  348:         $this->assertSame($expected, $productListing->isOnSale());
  389:         $this->assertSame($expected, $productListing->isFreight());
  434:         $this->assertSame($expected, $productListing->hasFreeShipping());
  495:         $this->assertSame($expected, $productListing->hasShippingInDays($days));
  546:         $this->assertSame($expected, $productListing->hasFreeShippingInDays($days));
  611:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/DiscountOfficeItemsBundle/Tests/Product/View/WasPriceFactoryTest.php:
   30:         $this->assertEquals([], $actual, 'Default output when no products are provided');
   40:         $this->assertCount(1, $actual);
   41:         $this->assertContainsOnlyInstancesOf(WasPrice::class, $actual);
   51:         $this->assertNull($actual[$productId]->getPriceValue());
   52:         $this->assertFalse($actual[$productId]->isDisplayable());
   64:         $this->assertEquals($wasValue, $actual[$productId]->getPriceValue());
   65:         $this->assertFalse($actual[$productId]->isDisplayable());
   77:         $this->assertNull($actual[$productId]->getPriceValue());
   78:         $this->assertFalse($actual[$productId]->isDisplayable());
   91:         $this->assertEquals($wasValue, $actual[$productId]->getPriceValue());
   92:         $this->assertFalse($actual[$productId]->isDisplayable());
  105:         $this->assertNan($actual[$productId]->getPriceValue());
  106:         $this->assertFalse($actual[$productId]->isDisplayable());
  125:         $this->assertEquals($wasValue, $actual[$productId]->getPriceValue());
  126:         $this->assertEquals($expected, $actual[$productId]->isDisplayable());
  160:         $this->assertEquals($wasValueA, $actual[$productIdA]->getPriceValue());
  161:         $this->assertTrue($actual[$productIdA]->isDisplayable());
  162:         $this->assertEquals($wasValueB, $actual[$productIdB]->getPriceValue());
  163:         $this->assertFalse($actual[$productIdB]->isDisplayable());
  183:         $this->assertEquals($wasValueA, $actual[$productIdA]->getPriceValue());
  184:         $this->assertTrue($actual[$productIdA]->isDisplayable());
  185:         $this->assertNull($actual[$productIdB]->getPriceValue());
  186:         $this->assertFalse($actual[$productIdB]->isDisplayable());

DiscountOfficeItems • src/DealExpress/DiscountOfficeItemsBundle/Tests/Product/View/Block/AttributeAggregateFactoryTest.php:
   34:         $this->assertInstanceOf(AttributeAggregate::class, $actual);
   57:         $this->assertEquals($id, $actual->getId(), 'Id did not match.');
   58:         $this->assertEquals($name, $actual->getName(), 'Name did not match.');
   61:         $this->assertContainsOnlyInstancesOf(AttributeValue::class, $valueList);
   62:         $this->assertCount(1, $valueList, 'Expected one value in attribute value list.');
   63:         $this->assertEquals($value, $valueList[0]->getValue(), 'Value did not match.');
   64:         $this->assertEquals([$product], $valueList[0]->getProductList(), 'Product list did not match.');
   77:         $this->assertCount(1, $valueList, 'Expected one value in the attribute value list.');
   78:         $this->assertEquals($className, $valueList[0]->getClass());
  115:         $this->assertCount(3, $valueList, 'Unexpected attribute value list size.');
  116:         $this->assertEquals(
  145:         $this->assertCount(1, $valueList, 'Unexpected attribute value list size.');
  146:         $this->assertEquals($value, $valueList[0]->getValue());
  147:         $this->assertSame([$productA, $productB], $valueList[0]->getProductList());
  172:         $this->assertCount(2, $valueList, 'Unexpected attribute value list size.');
  173:         $this->assertEquals($valueA, $valueList[0]->getValue());
  174:         $this->assertEquals([$productA, $productC], $valueList[0]->getProductList());
  175:         $this->assertEquals($valueB, $valueList[1]->getValue());
  176:         $this->assertEquals([$productB], $valueList[1]->getProductList());
  190:         $this->assertCount(2, $valueList, 'Unexpected attribute value list size.');
  191:         $this->assertEquals($valueB, $valueList[0]->getValue());
  192:         $this->assertEquals($valueA, $valueList[1]->getValue());
  206:         $this->assertCount(2, $valueList, 'Unexpected attribute value list size.');
  207:         $this->assertEquals(

DiscountOfficeItems • src/DealExpress/DiscountOfficeItemsBundle/Tests/Product/View/Block/AttributeAggregatorTest.php:
   45:         $this->assertEquals([], $actual);
  137:         $this->assertEquals([$aggregate], $actual);
  172:         $this->assertEquals([$aggregate, $aggregate], $actual);
  186:         $this->assertEquals([$aggregate], $actual);
  202:         $this->assertEquals([$aggregate], $actual);
  226:         $this->assertSame([$aggregateB, $aggregateA], $actual);

DiscountOfficeItems • src/DealExpress/DiscountOfficeItemsBundle/Tests/Product/View/Block/AttributeComparerTest.php:
   39:         $this->assertEquals([], $actual);
   52:         $this->assertEquals([], $actual);
  169:         $this->assertEquals($expectedList, $actual);
  189:         $this->assertSame($expectedListB, $actual);
  240:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/DiscountOfficeItemsBundle/Tests/Product/View/Block/AttributeFactoryTest.php:
   35:         $this->assertInstanceOf(Attribute::class, $actual);
   52:         $this->assertEquals($id, $actual->getId(), 'Id did not match.');
   53:         $this->assertEquals($name, $actual->getName(), 'Name did not match.');
   54:         $this->assertEquals($value, $actual->getValue(), 'Value did not match.');
   55:         $this->assertSame($product, $actual->getProduct(), 'Product object did not match.');
   70:         $this->assertCount($count, $actual);
   71:         $this->assertContainsOnly(CommonAttribute::class, $actual);
   86:         $this->assertEquals($id, $actual->getId(), 'Id did not match.');
   87:         $this->assertEquals($name, $actual->getName(), 'Name did not match.');
   88:         $this->assertEquals($value, $actual->getValue(), 'Value did not match.');
   89:         $this->assertSame($product, $actual->getProduct(), 'Product object did not match.');
  106:         $this->assertCount($count, $actual);
  107:         $this->assertContainsOnly(CurrentAttribute::class, $actual);
  122:         $this->assertEquals($id, $actual->getId(), 'Id did not match.');
  123:         $this->assertEquals($name, $actual->getName(), 'Name did not match.');
  124:         $this->assertEquals($value, $actual->getValue(), 'Value did not match.');
  125:         $this->assertSame($product, $actual->getProduct(), 'Product object did not match.');
  142:         $this->assertCount($count, $actual);
  143:         $this->assertContainsOnly(OtherAttribute::class, $actual);
  158:         $this->assertEquals($id, $actual->getId(), 'Id did not match.');
  159:         $this->assertEquals($name, $actual->getName(), 'Name did not match.');
  160:         $this->assertEquals($value, $actual->getValue(), 'Value did not match.');
  161:         $this->assertSame($product, $actual->getProduct(), 'Product object did not match.');

DiscountOfficeItems • src/DealExpress/DiscountOfficeItemsBundle/Tests/Product/View/Block/AttributeListGeneratorTest.php:
   40:         $this->assertEquals([], $actual);
   51:         $this->assertEquals([], $actual);
   62:         $this->assertEquals([], $actual);
   89:         $this->assertEquals($expected, $actual);
  111:         $this->assertEquals($expected, $actual);
  130:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/DiscountOfficeItemsBundle/Tests/Product/ViewModel/DisplayFlagFactoryTest.php:
   66:         $this->assertEquals($productFlags, $actual);
   86:         $this->assertEquals($expected, $actual);
  106:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/DiscountOfficeItemsBundle/Tests/Returns/UpsLabelClientTest.php:
  171:         $this->assertSame($tracking, $actual);
  189:         $this->assertSame('', $actual);

DiscountOfficeItems • src/DealExpress/DiscountOfficeItemsBundle/Tests/Returns/UpsLabelDataFactoryTest.php:
   44:         $this->assertInstanceOf(
   63:         $this->assertEquals($orderId, $actual->getOrderId());
   78:         $this->assertEquals($email, $actual->getCustomerEmail());
   92:         $this->assertEquals($returnAddress, $actual->getReturnAddress());
  104:         $this->assertEquals($dcAddress, $actual->getDcAddress());
  149:         $this->assertEquals($expectedWeight, $actual->getWeight());
  163:         $this->assertEquals(1, $actual->getWeight());
  187:         $this->assertEquals($hardCodedFields, $actual->getHardCodedFields());
  223:         $this->assertEquals($actualWeight, $actual->getWeight());

DiscountOfficeItems • src/DealExpress/DiscountOfficeItemsBundle/Tests/Returns/UpsLabelGeneratorTest.php:
   70:         $this->assertInstanceOf(
  201:         $this->assertEquals(UpsLabelGenerator::CARRIER_NAME, $actual->getCarrierName());
  222:         $this->assertEquals($trackingNumber, $actual->getTrackingNumber());

DiscountOfficeItems • src/DealExpress/DiscountOfficeItemsBundle/Tests/Security/FormAuthenticationEntryPointTest.php:
   57:         $this->assertInstanceOf(FormAuthenticationEntryPoint::class, $this->fixture);
   69:         $this->assertEquals(403, $actual->getStatusCode());
   70:         $this->assertEquals('{"success":false}', $actual->getContent());
   84:         $this->assertSame($response, $actual);
   97:         $this->assertSame($response, $actual);
  111:         $this->assertEquals("{$url}?checkout=1", $actual->getTargetUrl());
  125:         $this->assertEquals("{$url}&checkout=1", $actual->getTargetUrl());

DiscountOfficeItems • src/DealExpress/DiscountOfficeItemsBundle/Tests/Security/PriceViewVoterTest.php:
   40:         $this->assertEquals($expected, $this->fixture->supportsAttribute($attribute));
   66:         $this->assertTrue($this->fixture->supportsClass($class));
   75:         $this->assertEquals(
   87:         $this->assertEquals(
   99:         $this->assertEquals(
  116:         $this->assertEquals(
  134:         $this->assertEquals(
  155:         $this->assertEquals(
  176:         $this->assertEquals(

DiscountOfficeItems • src/DealExpress/DiscountOfficeItemsBundle/Tests/Security/Core/Authorization/Voter/CheckoutVoterTest.php:
   36:         $this->assertInstanceOf(VoterInterface::class, $this->fixture);
   46:         $this->assertEquals($expected, $actual);
   64:         $this->assertTrue($actual);
   74:         $this->assertSame(VoterInterface::ACCESS_ABSTAIN, $actual);
   98:         $this->assertSame(VoterInterface::ACCESS_GRANTED, $actual);
  122:         $this->assertSame(VoterInterface::ACCESS_DENIED, $actual);
  142:         $this->assertSame(VoterInterface::ACCESS_GRANTED, $actual);
  152:         $this->assertSame(VoterInterface::ACCESS_DENIED, $actual);

DiscountOfficeItems • src/DealExpress/DiscountOfficeItemsBundle/Tests/Security/Core/Authorization/Voter/PurchaseOrderVoterTest.php:
   44:         $this->assertInstanceOf(VoterInterface::class, $this->fixture);
   52:         $this->assertEquals($expected, $this->fixture->supportsAttribute($attribute));
   65:         $this->assertTrue($this->fixture->supportsClass(uniqid()));
  104:         $this->assertSame(

DiscountOfficeItems • src/DealExpress/DiscountOfficeItemsBundle/Tests/Security/Encoder/AdminBypassDecoratorTest.php:
   33:         $this->assertInstanceOf(PasswordEncoderInterface::class, $this->fixture);
   49:         $this->assertEquals($hash, $actual);
   66:         $this->assertEquals($success, $actual);
   82:         $this->assertTrue($actual);
  104:         $this->assertEquals($success, $actual);

DiscountOfficeItems • src/DealExpress/DiscountOfficeItemsBundle/Tests/Security/Logout/LogoutSuccessHandlerTest.php:
   87:         $this->assertEquals($request, $parameters[0]);
   88:         $this->assertInstanceOf(RedirectResponse::class, $parameters[1]);
  110:         $this->assertInstanceOf(RedirectResponse::class, $actual);
  111:         $this->assertEquals('/', $actual->getTargetUrl());
  136:         $this->assertInstanceOf(RedirectResponse::class, $actual);
  137:         $this->assertEquals($expected, $actual->getTargetUrl());

DiscountOfficeItems • src/DealExpress/DiscountOfficeItemsBundle/Tests/Security/User/DoiCustomerUserProviderTest.php:
   37:         $this->assertInstanceOf(UserProviderInterface::class, $this->fixture);
   49:         $this->assertSame($customer, $actual);
   98:         $this->assertSame($customer, $actual);
  134:         $this->assertTrue($actual);
  141:         $this->assertFalse($actual);

DiscountOfficeItems • src/DealExpress/DiscountOfficeItemsBundle/Tests/Seo/CategoryUrlGeneratorTest.php:
  37:         $this->assertInstanceOf(AbstractUrlGenerator::class, $this->fixture);

DiscountOfficeItems • src/DealExpress/DiscountOfficeItemsBundle/Tests/Seo/CmsUrlGeneratorTest.php:
  37:         $this->assertInstanceOf(AbstractUrlGenerator::class, $this->fixture);

DiscountOfficeItems • src/DealExpress/DiscountOfficeItemsBundle/Tests/Seo/ProductUrlGeneratorTest.php:
   52:         $this->assertInstanceOf(AbstractUrlGenerator::class, $this->fixture);
   88:         $this->assertParamsBuilt(['productId' => $product->getId(), 'slug' => 'product'], $product);
   97:         $this->assertParamsBuilt($expected, $product, $parameterList);
  120:         $this->assertParamsBuilt(['productId' => null, 'slug' => $linkFragment], $product);
  129:         $this->assertParamsBuilt(['productId' => null, 'slug' => $slug], $product);
  141:         $this->assertParamsBuilt(['productId' => null, 'slug' => $linkFragment.'/'.$slug], $product);

DiscountOfficeItems • src/DealExpress/DiscountOfficeItemsBundle/Tests/Seo/StringFormatterTest.php:
  27:         $this->assertEquals($expectedOutput, $this->fixture->makeSeoSlug($input));

DiscountOfficeItems • src/DealExpress/DiscountOfficeItemsBundle/Tests/Service/AccountServiceTest.php:
  48:         $this->assertTrue($actual);
  60:         $this->assertTrue($actual);
  73:         $this->assertFalse($actual);

DiscountOfficeItems • src/DealExpress/DiscountOfficeItemsBundle/Tests/Service/CategoryServiceTest.php:
  259:         $this->assertEquals($expected, $id);
  276:         $this->assertEquals($expected, $id);
  310:         $this->assertNull($actual);
  317:         $this->assertEquals([], $actual);
  330:         $this->assertCount(1, $actual);
  331:         $this->assertArrayHasKey(95, $actual);
  332:         $this->assertEmpty($actual[95]);
  346:         $this->assertCount(2, $actual);
  347:         $this->assertArrayHasKey(95, $actual);
  348:         $this->assertCount(4, $actual[95]);
  349:         $this->assertEquals('Great Grand Parent', $actual[95][0]->getName());
  350:         $this->assertEquals('Grand Parent', $actual[95][1]->getName());
  351:         $this->assertEquals('Parent', $actual[95][2]->getName());
  352:         $this->assertEquals('Category', $actual[95][3]->getName());
  353:         $this->assertArrayHasKey(96, $actual);
  354:         $this->assertCount(2, $actual[96]);
  355:         $this->assertEquals('USC', $actual[96][0]->getName());
  356:         $this->assertEquals('Primary USC Child', $actual[96][1]->getName());
  377:             $this->assertInstanceOf($entityNames['categories'], $category);

DiscountOfficeItems • src/DealExpress/DiscountOfficeItemsBundle/Tests/Service/CategoryTagsTest.php:
   65:         $this->assertInstanceOf(Collection::class, $actualTagList);
   66:         $this->assertEquals($expected, $actualTagList->toArray());
   78:         $this->assertInstanceOf(Collection::class, $actualTagList);
   79:         $this->assertEquals($expected, $actualTagList->toArray());
   91:         $this->assertInstanceOf(Collection::class, $actualTagList);
   92:         $this->assertEquals($expected, $actualTagList->toArray());
  103:         $this->assertEquals($expected, $actualResult);
  114:         $this->assertEquals($expected, $actualTagList);
  125:         $this->assertEquals($expected, $actualTagList);
  140:         $this->assertEquals($expected, $actualCategoryListTagList);
  155:         $this->assertEquals($expected, $actualCategoryListTagList);

DiscountOfficeItems • src/DealExpress/DiscountOfficeItemsBundle/Tests/Service/CustomerContextPricePointProviderTest.php:
  62:         $this->assertInstanceOf(CustomerContextPricePointProviderInterface::class, $this->fixture);
  67:         $this->assertInstanceOf(AbstractProxyPricePointProvider::class, $this->fixture);

DiscountOfficeItems • src/DealExpress/DiscountOfficeItemsBundle/Tests/Service/EkomiTest.php:
  56:         $this->assertEquals("{$this->authId}|{$this->authPassword}", $query['auth']);
  57:         $this->assertEquals('json', $query['type']);
  58:         $this->assertStringStartsWith('cust-', $query['version']);
  59:         $this->assertEquals($orderId, $query['order_id']);
  66:         $this->assertNull($this->fixture->getReviewLink(uniqid()));
  73:         $this->assertNull($this->fixture->getReviewLink(uniqid()));
  80:         $this->assertNull($this->fixture->getReviewLink(uniqid()));
  92:         $this->assertEquals($link, $this->fixture->getReviewLink(uniqid()));

DiscountOfficeItems • src/DealExpress/DiscountOfficeItemsBundle/Tests/Service/InkTest.php:
   55:         $this->assertEquals($expected, $actual);
  241:         $this->assertEquals($expected, $actual);
  335:         $this->assertEquals($expected, $actual);
  448:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/DiscountOfficeItemsBundle/Tests/Service/ProductAvailabilityTest.php:
  62:         $this->assertEquals($expected, $this->fixture->isAvailable($mockProductModel));
  63:         $this->assertEquals($expected, $this->fixture->isAvailable($productId));
  82:         $this->assertEquals(
  86:         $this->assertEquals(
  94:         $this->assertEquals([], $this->fixture->isListAvailable(new \ArrayObject([])));

DiscountOfficeItems • src/DealExpress/DiscountOfficeItemsBundle/Tests/Service/ProductDeliveryTest.php:
   68:         $this->assertEquals($default, $days['default']);
   69:         $this->assertEquals($mfgDirect, $days['mfg_dir']);
  148:         $this->assertEquals(2, $days['default']);
  149:         $this->assertEquals(7, $days['mfg_dir']);
  153:         $this->assertEquals(2, $daysCached['default']);
  154:         $this->assertEquals(7, $daysCached['mfg_dir']);
  206:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/DiscountOfficeItemsBundle/Tests/Service/WeeklyDealsTest.php:
   54:         $this->assertEquals([], $actual);
  126:         $this->assertEquals($randomValue, $actual);

DiscountOfficeItems • src/DealExpress/DiscountOfficeItemsBundle/Tests/Twig/ErrorListenerTest.php:
   66:         $this->logger->assertEmptyLogs();
   82:         $this->logger->assertEmptyLogs();
  102:         $this->logger->assertEmptyLogs();
  136:                     $this->assertEquals($statusCode, $response->getStatusCode());
  137:                     $this->assertEquals($template, $response->getContent());
  177:                     $this->assertEquals($statusCode, $response->getStatusCode());
  178:                     $this->assertEquals($template, $response->getContent());
  219:                     $this->assertEquals(500, $response->getStatusCode());
  220:                     $this->assertEquals($template, $response->getContent());
  258:                     $this->assertEquals(500, $response->getStatusCode());
  259:                     $this->assertEquals($template, $response->getContent());

DiscountOfficeItems • src/DealExpress/DiscountOfficeItemsBundle/Tests/Twig/Extension/ConversionTrackingTest.php:
   71:         $this->assertInstanceOf(AbstractExtension::class, $this->fixture);
   79:             $this->assertInstanceOf(TwigFunction::class, $simpleFunction);
   96:         $this->assertArraySubset($expectedNames, $actualNames);
  115:         $this->assertEquals($expected, $actual);
  138:         $this->assertEquals($expected, $actual);
  175:         $this->assertEquals($expected, $actual);
  215:         $this->assertEquals($expected, $actual);
  255:         $this->assertEquals($expected, $actual);
  304:         $this->assertEquals($expected, $actual);
  337:         $this->assertEquals($expected, $actual);
  412:         $this->assertEquals($expected, $actual);
  456:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/DiscountOfficeItemsBundle/Tests/Twig/Extension/ReturnableTest.php:
  34:         $this->assertInstanceOf(AbstractExtension::class, $this->fixture);
  42:             $this->assertInstanceOf(TwigFilter::class, $simpleFunction);
  53:             $this->assertContains($filter->getName(), $filterNames);

DiscountOfficeItems • src/DealExpress/DiscountOfficeItemsBundle/Tests/Twig/Extension/SeoUrlsExtensionTest.php:
   57:         $this->assertInstanceOf(AbstractExtension::class, $this->fixture);
   65:             $this->assertInstanceOf(TwigFunction::class, $simpleFunction);
   78:             $this->assertContains($simpleFunction->getName(), $simpleFunctionNames);
  140:         $this->assertEquals($expected, $actual, 'Generated return did not match expected return');

DiscountOfficeItems • src/DealExpress/DiscountOfficeItemsBundle/Tests/ViewModel/CheckoutFactoryTest.php:
   69:         $this->assertEquals($order, $actual->getOrder());
   92:         $this->assertEquals([], $actual->getOrderLineList());
  108:         $this->assertEquals($expected, $actual->getOrderLineList());
  130:         $this->assertSame($expected, $actual->getOrderLineList());
  175:         $this->assertSame($expected, $actual->getOrderLineList());
  199:         $this->assertEquals($summary, $actual->getOrderSummary());
  223:         $this->assertEquals($cardList, $actual->getCardList());
  243:         $this->assertEquals($expected, $actual->isGuestCheckout());
  273:         $this->assertEquals($expected, $actual->getEmail());
  297:         $this->assertTrue($actual->hasSubscription());
  306:         $this->assertFalse($actual->hasSubscription());

DiscountOfficeItems • src/DealExpress/DiscountOfficeItemsBundle/Tests/ViewModel/SubscriptionFactoryTest.php:
  116:         $this->assertInstanceOf(Subscription::class, $actual);
  129:         $this->assertEquals($id, $actual->getId());
  143:         $this->assertEquals($name, $actual->getName());
  154:         $this->assertTrue($actual->isCanceled());
  165:         $this->assertFalse($actual->isCanceled());
  177:         $this->assertEquals($nextOrderDate, $actual->getNextOrderDate());
  200:         $this->assertEquals($expected, $actual->hasValidNextOrderDate());
  230:         $this->assertEquals($frequency, $actual->getFrequencyValue());
  250:         $this->assertEquals($translated, $actual->getName());
  267:         $this->assertEquals($expected, $subscription->getLineItems());
  317:         $this->assertSame($totalList, $actual->getSummary());
  328:         $this->assertEquals($subscription, $actual->getSubscription());
  360:         $this->assertEquals($expected, $actual->getShippingInfo());
  371:         $this->assertEquals('No address set', $actual->getShippingInfo());
  394:         $this->assertTrue($actual->hasValidShipping());
  405:         $this->assertFalse($actual->hasValidShipping());
  430:         $this->assertEquals($expected, $actual->getBillingInfo());
  431:         $this->assertTrue($actual->hasValidBilling());
  484:         $this->assertEquals('No payment set', $actual->getBillingInfo());
  485:         $this->assertFalse($actual->hasValidBilling());
  536:         $this->assertSame([$addressB], $actual->getShippingAddressBook());
  570:         $this->assertSame([$address], $actual->getShippingAddressBook());
  587:         $this->assertSame($addressA, $actual->getSelectedShippingAddress());
  625:         $this->assertSame([$addressB], $actual->getBillingAddressBook());
  660:         $this->assertSame([$address], $actual->getBillingAddressBook());
  678:         $this->assertSame($addressA, $actual->getSelectedBillingAddress());
  692:         $this->assertSame([Subscription::ERROR_NO_TOTALS => []], $actual->getErrorList());
  724:         $this->assertEquals($expected, $actual->getErrorList());
  740:         $this->assertEquals([], $actual->getErrorList());
  760:         $this->assertEquals($expected, $actual->getErrorList());
  774:         $this->assertEquals([], $actual->getErrorList());
  785:         $this->assertTrue($actual->isSuspended());
  786:         $this->assertArrayHasKey(Subscription::ERROR_SUSPENDED, $actual->getErrorList());
  797:         $this->assertFalse($actual->isSuspended());

DiscountOfficeItems • src/DealExpress/DiscountOfficeItemsBundle/Tests/ViewModel/SubscriptionListTest.php:
   29:         $this->assertTrue($fixture->isEmpty());
   32:         $this->assertTrue($fixture->isEmpty());
   38:         $this->assertFalse($fixture->isEmpty());
   41:         $this->assertFalse($fixture->isEmpty());
   47:         $this->assertFalse($fixture->isEmpty());
   52:         $this->assertFalse($fixture->isEmpty());
   66:         $this->assertTrue($fixture->hasProduct($productIdAA));
   67:         $this->assertTrue($fixture->hasProduct($productIdAB));
   68:         $this->assertTrue($fixture->hasProduct($productIdBA));
   69:         $this->assertTrue($fixture->hasProduct($productIdBB));
   70:         $this->assertFalse($fixture->hasProduct(rand()));
  114:         $this->assertEquals([$viewModel], $actual);
  133:         $this->assertSame([$viewModelA, $viewModelB], $actual);

DiscountOfficeItems • src/DealExpress/DiscountOfficeItemsBundle/Tests/ViewModel/Address/DisplayFilterTest.php:
   82:         $this->assertObjectList([], $actual);
   94:         $this->assertEquals([$address], $actual);
  115:         $this->assertObjectList($expected, $actual);
  139:         $this->assertObjectList([$entryA, $entryB, $entryC, $entryD], $actual);
  193:         $this->assertObjectList([$addressA, $addressB], $actual);
  208:         $this->assertObjectList([$addressA], $actual);
  235:         $this->assertObjectList(array_merge([$addressA], $addressList), $actual);
  257:         $this->assertObjectList(array_merge([$addressA], $addressList), $actual);
  281:         $this->assertObjectList(array_merge([$addressA], $addressList), $actual);
  348:         $this->assertEquals($expectedIdList, $actualIdList, $message);

DiscountOfficeItems • src/DealExpress/DiscountOfficeItemsBundle/Tests/ViewModel/Checkout/AddressBookTest.php:
  87:         $this->assertSame($addressList, $actual);

DiscountOfficeItems • src/DealExpress/DiscountOfficeItemsBundle/Tests/ViewModel/Checkout/Braintree/CardListFactoryTest.php:
   48:         $this->assertEquals([], $actual->getList());
   55:         $this->assertNull($actual->getDefault());
   56:         $this->assertFalse($actual->hasDefault());
  103:         $this->assertSame($cardList, $actual->getList());
  115:         $this->assertSame($card, $actual->getDefault());
  128:         $this->assertSame($cardA, $actual->getDefault());
  140:         $this->assertNull($actual->getDefault());
  155:         $this->assertNull($actual->getDefault());
  167:         $this->assertNull($actual->getDefault());

DiscountOfficeItems • src/DealExpress/DiscountOfficeItemsBundle/Tests/ViewModel/Order/TotalTest.php:
  15:         $this->assertInstanceOf(BaseTotal::class, $fixture);
  22:         $this->assertEquals('', $fixture->getCategory());
  31:         $this->assertEquals($expected, $fixture->getCategory());

DiscountOfficeItems • src/DealExpress/DiscountOfficeItemsBundle/Tests/ViewModel/Product/BasicResultsTest.php:
   22:         $this->assertEquals('', $actual);
   33:         $this->assertEquals($keywords, $actual);
   44:         $this->assertTrue($actual);
   53:         $this->assertFalse($actual);
   70:         $this->assertSame($expected, $actual);
   88:         $this->assertSame([], $actual);
  105:         $this->assertEquals($productListingCount, $actual);
  114:         $this->assertSame([], $actual);
  123:         $this->assertSame([], $actual);
  132:         $this->assertEquals('', $actual);
  141:         $this->assertSame([], $actual);
  150:         $this->assertEquals('', $actual);
  159:         $this->assertEquals('', $actual);

DiscountOfficeItems • src/DealExpress/DiscountOfficeItemsBundle/Tests/ViewModel/Product/InkResultsTest.php:
   23:         $this->assertEquals('', $actual);
   34:         $this->assertTrue($actual);
   43:         $this->assertFalse($actual);
   60:         $this->assertSame($expected, $actual);
   86:         $this->assertSame($expected, $actual);
  103:         $this->assertEquals($productListingCount, $actual);
  112:         $this->assertSame([], $actual);
  121:         $this->assertSame([], $actual);
  130:         $this->assertEquals('', $actual);
  139:         $this->assertSame([], $actual);
  148:         $this->assertEquals('', $actual);
  157:         $this->assertEquals('', $actual);

DiscountOfficeItems • src/DealExpress/DiscountOfficeItemsBundle/Tests/ViewModel/Subscription/AlternateProductListFactoryTest.php:
   93:         $this->assertNotSame($request, $actual, 'Request was not cloned');
   94:         $this->assertEquals($expected, $actual, 'Request is missing parameters');
  145:         $this->assertSame($listingList, $actual);

DiscountOfficeItems • src/DealExpress/DiscountOfficeItemsBundle/Tests/ViewModel/Subscription/LineItemFactoryTest.php:
  128:         $this->assertEmpty($actual);
  149:         $this->assertEquals($productA, $actual[0]->getProduct());
  150:         $this->assertEquals($productB, $actual[1]->getProduct());
  167:         $this->assertEquals($lineA, $actual[0]->getLine());
  168:         $this->assertEquals($lineB, $actual[1]->getLine());
  185:         $this->assertFalse($actual[0]->isAvailable());
  186:         $this->assertTrue($actual[1]->isAvailable());
  203:         $this->assertFalse($actual[0]->isSkipped());
  204:         $this->assertTrue($actual[1]->isSkipped());
  224:         $this->assertEquals($displayFlagsA, $actual[0]->getFlags());
  225:         $this->assertEquals($displayFlagsB, $actual[1]->getFlags());
  250:         $this->assertEquals([], $actual[0]->getAlternateProducts());
  251:         $this->assertEquals($listingList, $actual[1]->getAlternateProducts());
  276:         $this->assertFalse($actual[0]->hasAlternateProducts());
  277:         $this->assertTrue($actual[1]->hasAlternateProducts());
  293:         $this->assertCount(2, $actual);
  294:         $this->assertEquals($product, $actual[0]->getProduct());
  295:         $this->assertEquals($product, $actual[1]->getProduct());

DiscountOfficeItems • src/DealExpress/EdiBundle/Tests/Export/InvoiceProcessorTest.php:
   78:         $this->assertInstanceOf(AbstractProcessor::class, $this->fixture);
  132:         $this->assertTrue($this->fixture->sendInvoice($invoice));
  152:         $this->assertFalse($this->fixture->sendInvoice($invoice));

DiscountOfficeItems • src/DealExpress/EdiBundle/Tests/Export/MessageBuilderFactoryTest.php:
  28:         $this->assertInstanceOf(MessageBuilder::class, $actual);
  47:         $this->assertSame($senderQualifier, $envelope->getSenderQualifier());
  48:         $this->assertSame($senderCode, $envelope->getSenderCode());
  49:         $this->assertSame($receiverQualifier, $envelope->getReceiverQualifier());
  50:         $this->assertSame($receiverCode, $envelope->getReceiverCode());
  57:         $this->assertInstanceOf(FunctionalGroupEnvelope::class, $actual->getGroupEnvelope());
  75:         $this->assertSame($functionalId, $envelope->getFunctionalId());
  76:         $this->assertSame($senderCode, $envelope->getSenderCode());
  77:         $this->assertSame($receiverCode, $envelope->getReceiverCode());

DiscountOfficeItems • src/DealExpress/EdiBundle/Tests/Export/MessageBuilderTest.php:
   37:         $this->assertInstanceOf(MessageBuilderInterface::class, $this->fixture);
   47:         $this->assertEquals($delimiter, $actual);
   57:         $this->assertEquals($delimiter, $actual);
   64:         $this->assertInstanceOf(InterchangeEnvelope::class, $actual);
   77:         $this->assertEquals($envelope, $actual);
  103:         $this->assertEquals($transaction, $actual);
  132:         $this->assertInstanceOf(FunctionalGroupEnvelope::class, $actual);
  133:         $this->assertEquals($functionalId, $actual->getFunctionalId());
  134:         $this->assertEquals($senderCode, $actual->getSenderCode());
  135:         $this->assertEquals($receiverCode, $actual->getReceiverCode());
  151:         $this->assertInstanceOf(TransactionSetEnvelope::class, $actual);
  152:         $this->assertEquals($identifierCode, $actual->getIdentifierCode());
  201:         $this->assertSame([$valueA.' '.$valueB, $valueB, $valueC], $invocations[0]->getParameters()[0]);
  202:         $this->assertSame([$valueB.$valueC, $valueC, $valueA], $invocations[1]->getParameters()[0]);
  203:         $this->assertSame([$valueC, $valueA, $valueB], $invocations[2]->getParameters()[0]);
  204:         $this->assertSame([$whitelist], $invocations[3]->getParameters()[0]);
  229:         $this->assertSame($expected, $actual);

DiscountOfficeItems • src/DealExpress/EdiBundle/Tests/Export/PurchaseOrderIndexedTest.php:
   60:         $this->assertFailsMinimumLength($invoice);
   70:         $this->assertFailsMaximumLength($invoice);
  146:         $this->assertFailsMinimumLength($invoice);
  167:         $this->assertFailsMaximumLength($invoice);
  195:         $this->assertEquals($expected, $actual[1][2]);
  226:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/EdiBundle/Tests/Export/PurchaseOrderTest.php:
   59:         $this->assertFailsMinimumLength($invoice);
   69:         $this->assertFailsMaximumLength($invoice);
  145:         $this->assertFailsMinimumLength($invoice);
  166:         $this->assertFailsMaximumLength($invoice);
  194:         $this->assertEquals($expected, $actual[1][2]);
  225:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/EdiBundle/Tests/Export/MessageBuilder/Envelope/FunctionalGroupEnvelopeTest.php:
   58:         $this->assertInstanceOf(EnvelopeInterface::class, $this->fixture);
   65:         $this->assertEquals($this->functionalId, $actual);
   76:         $this->assertEquals($functionalId, $actual);
   83:         $this->assertEquals($this->senderCode, $actual);
   94:         $this->assertEquals($senderCode, $actual);
  101:         $this->assertEquals($this->receiverCode, $actual);
  112:         $this->assertEquals($receiverCode, $actual);
  121:         $this->assertEquals($now->format('Ymd'), $actual);
  132:         $this->assertEquals($date, $actual);
  143:         $this->assertEquals($date->format('Ymd'), $actual);
  152:         $this->assertEquals($now->format('Hi'), $actual);
  163:         $this->assertEquals($time, $actual);
  174:         $this->assertEquals($time->format('Hi'), $actual);
  181:         $this->assertEquals($this->controlNumber, $actual);
  192:         $this->assertEquals($controlNumber, $actual);
  199:         $this->assertEquals('X', $actual);
  210:         $this->assertEquals($agencyCode, $actual);
  217:         $this->assertEquals('004010', $actual);
  228:         $this->assertEquals($versionId, $actual);
  239:         $this->assertSame([$envelope], $actual);
  254:         $this->assertSame($envelopeC, $actual);
  255:         $this->assertInstanceOf(EnvelopeInterface::class, $actual);
  277:         $this->assertSame($envelopeB, $actual);
  278:         $this->assertInstanceOf(EnvelopeInterface::class, $actual);
  293:         $this->assertSame($expected, $actual);
  322:         $this->assertSame($expected, $actual);

DiscountOfficeItems • src/DealExpress/EdiBundle/Tests/Export/MessageBuilder/Envelope/InterchangeEnvelopeTest.php:
   65:         $this->assertInstanceOf(EnvelopeInterface::class, $this->fixture);
   72:         $this->assertEquals('00', $actual);
   83:         $this->assertEquals($authorizationQualifier, $actual);
   90:         $this->assertEquals('', $actual);
  101:         $this->assertEquals($authorizationInfo, $actual);
  108:         $this->assertEquals('00', $actual);
  119:         $this->assertEquals($securityQualifier, $actual);
  126:         $this->assertEquals('', $actual);
  137:         $this->assertEquals($securityInfo, $actual);
  144:         $this->assertEquals($this->senderQualifier, $actual);
  155:         $this->assertEquals($senderQualifier, $actual);
  162:         $this->assertEquals($this->senderCode, $actual);
  173:         $this->assertEquals($senderCode, $actual);
  180:         $this->assertEquals($this->receiverQualifier, $actual);
  191:         $this->assertEquals($receiverQualifier, $actual);
  198:         $this->assertEquals($this->receiverCode, $actual);
  209:         $this->assertEquals($receiverCode, $actual);
  218:         $this->assertEquals($now->format('ymd'), $actual);
  229:         $this->assertEquals($date, $actual);
  240:         $this->assertEquals($date->format('ymd'), $actual);
  249:         $this->assertEquals($now->format('Hi'), $actual);
  260:         $this->assertEquals($time, $actual);
  271:         $this->assertEquals($time->format('Hi'), $actual);
  278:         $this->assertEquals('U', $actual);
  289:         $this->assertEquals($standardsId, $actual);
  296:         $this->assertEquals('00400', $actual);
  307:         $this->assertEquals($versionId, $actual);
  314:         $this->assertEquals($this->controlNumber, $actual);
  325:         $this->assertEquals($controlNumber, $actual);
  332:         $this->assertEquals(0, $actual);
  343:         $this->assertEquals($acknowledgement, $actual);
  350:         $this->assertEquals('P', $actual);
  361:         $this->assertEquals($usageIndicator, $actual);
  368:         $this->assertEquals(chr(9), $actual);
  379:         $this->assertEquals($separator, $actual);
  390:         $this->assertSame([$envelope], $actual);
  405:         $this->assertSame($envelopeC, $actual);
  406:         $this->assertInstanceOf(EnvelopeInterface::class, $actual);
  428:         $this->assertSame($envelopeB, $actual);
  429:         $this->assertInstanceOf(EnvelopeInterface::class, $actual);
  444:         $this->assertSame($expected, $actual);
  473:         $this->assertSame($expected, $actual);
  481:         $this->assertSame(105, strlen($header));

DiscountOfficeItems • src/DealExpress/EdiBundle/Tests/Export/MessageBuilder/Envelope/TransactionSetEnvelopeTest.php:
   42:         $this->assertInstanceOf(EnvelopeInterface::class, $this->fixture);
   49:         $this->assertEquals($this->identifierCode, $actual);
   60:         $this->assertEquals($identifierCode, $actual);
   67:         $this->assertEquals($this->controlNumber, $actual);
   78:         $this->assertEquals($controlNumber, $actual);
   89:         $this->assertSame([$segment], $actual);
  103:         $this->assertSame([[$valueA, (string) $valueB, $valueC]], $actual);
  115:         $this->assertSame($expected, $actual);
  138:         $this->assertSame($expected, $actual);

DiscountOfficeItems • src/DealExpress/EdiBundle/Tests/Export/PurchaseOrder/CustomerReferenceTest.php:
  32:         $this->assertEquals(
  51:         $this->assertEquals(
  73:         $this->assertEquals(

DiscountOfficeItems • src/DealExpress/EdiBundle/Tests/Export/PurchaseOrder/PhoneNumberTest.php:
  52:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/EdiBundle/Tests/Export/PurchaseOrder/ShortenedShippingAddressTest.php:
   59:         $this->assertInstanceOf(AbstractAddress::class, $this->fixture);
   79:         $this->assertEquals($address->getName(), $actual['N2'][0]);
   80:         $this->assertEquals($address->getStreetAddress(), $actual['N3'][0]);
   81:         $this->assertEquals($address->getSuburb(), $actual['N3'][1]);
   82:         $this->assertEquals($address->getCity(), $actual['N4'][0]);
   83:         $this->assertEquals($address->getState(), $actual['N4'][1]);
   84:         $this->assertEquals($address->getZip(), $actual['N4'][2]);
  113:         $this->assertEquals($shortened->getName(), $actual['N2'][0]);
  114:         $this->assertEquals($shortened->getStreetAddress(), $actual['N3'][0]);
  115:         $this->assertEquals($shortened->getSuburb(), $actual['N3'][1]);
  116:         $this->assertEquals($shortened->getCity(), $actual['N4'][0]);
  117:         $this->assertEquals($shortened->getState(), $actual['N4'][1]);
  118:         $this->assertEquals($shortened->getZip(), $actual['N4'][2]);

DiscountOfficeItems • src/DealExpress/EdiBundle/Tests/Import/EmitterTest.php:
   50:         $this->assertInvalidEdiEvent($spy, $message, $failureDescription);
   78:         $this->assertInvalidEdiEvent($spy, $message, $failureDescription, $badLineNumber);
  113:         $this->assertEquals(Emitter::EVENT_UNHANDLED, $eventLabel);
  116:         $this->assertInstanceOf(UnhandledDocumentEvent::class, $event);
  119:         $this->assertEquals($unhandledMessage, $event->getMessage());
  145:         $this->assertInvalidEdiEvent($spy, $message, $failureDescription);
  186:         $this->assertInvalidEdiEvent($spy, $message, $failureDescription);
  234:             $this->assertInstanceOf(TransactionEvent::class, $event);
  235:             $this->assertEquals($sender, $event->getSender());
  236:             $this->assertEquals($recipient, $event->getRecipient());
  240:         $this->assertEquals(Emitter::EVENT_TRANSACTION.$typeA, $eventLabelA);
  243:         $this->assertEquals($typeA, $eventA->getType());
  244:         $this->assertEquals([], $eventA->getSegmentList());
  265:         $this->assertEquals(Emitter::EVENT_INVALID, $eventLabel);
  268:         $this->assertInstanceOf(InvalidEdiEvent::class, $event);
  269:         $this->assertEquals($message, $event->getEdiMessage());
  270:         $this->assertEquals($failureDescription, $event->getFailureDescription());
  271:         $this->assertEquals($lineNumber, $event->getLineNumber());

DiscountOfficeItems • src/DealExpress/EdiBundle/Tests/Import/ImporterTest.php:
  60:         $this->assertNull($actual);

DiscountOfficeItems • src/DealExpress/EdiBundle/Tests/Import/InvoiceAcknowledgementHandlerTest.php:
   75:             $this->assertNotEmpty($lock);
  160:         $this->logFactory->assertLogsContains("Malformed long invoice ID from EDI: {$longInvoiceId}");
  178:         $this->logFactory->assertLogsContains("Order not found for long invoice ID from EDI: {$longInvoiceId}");
  248:         $this->logFactory->assertLogsContains($confirmation);
  327:         $this->logFactory->assertLogsContains($errorMessage);
  341:         $this->assertCount(1, $this->getInvocations($spy));
  344:         $this->assertEquals('onSkuReject', $actual->getParameters()[0]);
  345:         $this->assertSame($response, $actual->getParameters()[1]['response']);

DiscountOfficeItems • src/DealExpress/EdiBundle/Tests/Import/StreamConsumerTest.php:
  41:         $this->assertInstanceOf(S3ConsumerInterface::class, $this->fixture);
  64:         $this->assertEquals(S3ConsumerInterface::MSG_ACK, $actual);

DiscountOfficeItems • src/DealExpress/EdiBundle/Tests/Import/Inventory/ProcessorTest.php:
   98:         $this->assertIterablesEquals(
  128:             $this->logs->assertEmptyLogs();
  140:         $this->logs->assertLogsContains('EDI Inventory: '.$message);

DiscountOfficeItems • src/DealExpress/EdiBundle/Tests/Import/Tracking/DefaultProcessorTest.php:
  41:         $this->assertInstanceOf(ProcessorInterface::class, $this->fixture);
  60:         $this->logger->assertEmptyLogs();
  74:         $this->logger->assertMessageLogged(

DiscountOfficeItems • src/DealExpress/EdiBundle/Tests/Import/Tracking/MissingTrackingProcessorTest.php:
   42:         $this->assertInstanceOf(ProcessorInterface::class, $this->fixture);
   58:         $this->logger->assertEmptyLogs();
  127:         $this->logger->assertMessageLogged(
  204:         $this->assertEquals($eta.' 00:00:00', $trackingA->getEta()->format('Y-m-d H:i:s'));
  205:         $this->assertEquals($eta.' 00:00:00', $trackingB->getEta()->format('Y-m-d H:i:s'));
  261:         $this->assertEquals($eta.' 00:00:00', $trackingA->getEta()->format('Y-m-d H:i:s'));
  262:         $this->assertEquals($eta.' 00:00:00', $trackingB->getEta()->format('Y-m-d H:i:s'));

DiscountOfficeItems • src/DealExpress/EdiBundle/Tests/Import/X12/AcknowledgerTest.php:
   54:         $this->assertNull($this->fixture->acknowledge($messageData));
  134:         $this->assertStringContainsString($this->controlNumber, $this->fixture->acknowledge($messageData));
  164:         $this->assertEquals($encoded, $this->fixture->acknowledge($messageData));

DiscountOfficeItems • src/DealExpress/EdiBundle/Tests/Import/X12/DecoderTest.php:
   26:         $this->assertIsArray($actual);
   35:         $this->assertEquals($errorMessage, $actual);
   45:         $this->assertEquals($errorMessage, $actual);
   58:         $this->assertEquals($errorMessage, $actual);
   98:         $this->assertEquals($decodedLine, $actual[0]);
  123:         $this->assertEquals($expected, $actual);
  172:         $this->assertEquals($expected, $actual);
  192:         $this->assertEquals($message, $actual);
  222:         $this->assertEquals($message, $actual);
  244:         $this->assertEquals($decodedLine, $actual[0]);

DiscountOfficeItems • src/DealExpress/EdiBundle/Tests/Import/X12/ExtractorTest.php:
   74:         $this->assertEquals($errorData, $actual);
   83:         $this->assertIsArray($actual);
   95:         $this->assertEquals($message, $actual[Extractor::FAILURE_DESCRIPTION]);
  149:         $this->assertEquals($errorData, $actual);
  163:         $this->assertEquals($errorData, $actual);
  177:         $this->assertEquals($errorData, $actual);
  191:         $this->assertEquals($errorData, $actual);
  205:         $this->assertEquals($errorData, $actual);
  219:         $this->assertEquals($errorData, $actual);
  234:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/EdiBundle/Tests/Import/X12/InventoryHandlerTest.php:
  100:         $this->logger->assertMessageLogged(

DiscountOfficeItems • src/DealExpress/EdiBundle/Tests/Import/X12/InventoryParserTest.php:
   32:         $this->assertInstanceOf(InventoryParserInterface::class, $this->fixture);
   48:         $this->assertIterablesEquals($expected, $actual);
   50:         $this->logger->assertEmptyLogs();
  128:         $this->assertIterablesEquals([], $actual);
  130:         $this->logger->assertMessagesLogged($expected);

DiscountOfficeItems • src/DealExpress/EdiBundle/Tests/Import/X12/InvoiceHandlerTest.php:
  240:         $this->assertEquals($pickTicket, $actual['pickTicket']);
  270:         $this->assertEquals($expected, $actual['pickTicket']);

DiscountOfficeItems • src/DealExpress/EdiBundle/Tests/Import/X12/InvoiceAcknowledgement/BakLineValidatorTest.php:
   25:         $this->assertEquals(BakLineValidator::LINE_EMPTY, $actual);
   73:         $this->assertEquals($message, $actual);
  110:         $this->assertEquals($message, $actual);
  144:         $this->assertEquals($message, $actual);
  176:         $this->assertEquals(null, $actual);
  189:         $this->assertEquals(BakLineValidator::BAK_REJECTION.$acknowledgement, $actual);

DiscountOfficeItems • src/DealExpress/EdiBundle/Tests/Import/X12/InvoiceAcknowledgement/ResponseFactoryTest.php:
    51:         $this->assertInstanceOf(PickTicketResponse::class, $response);
    69:         $this->assertResponse($expected, $response);
    88:         $this->assertResponse($expected, $response);
   135:         $this->assertResponse($expected, $response);
   184:         $this->assertResponse($expected, $response);
   200:         $this->assertInstanceOf(PickTicketResponse::class, $response);
   217:         $this->assertResponse($expected, $response);
   250:         $this->assertEquals(
   270:         $this->assertEquals(
   285:         $this->assertNull($response->getEstimatedDelivery());
  1125:         $this->assertEquals($expectedResponseData, $actualResponseData);

DiscountOfficeItems • src/DealExpress/EdiBundle/Tests/Transaction/NullEventListenerTest.php:
  19:         $this->assertNull($actual);

DiscountOfficeItems • src/DealExpress/EdiBundle/Tests/Validation/X12/GroupValidatorTest.php:
   28:         $this->assertEquals(
   43:         $this->assertEquals(
   57:         $this->assertEquals(
   72:         $this->assertEquals(
   86:         $this->assertEquals(
  105:         $this->assertEquals(
  127:         $this->assertEquals(
  148:         $this->assertEquals(
  169:         $this->assertEquals(
  190:         $this->assertEquals(
  211:         $this->assertEquals(
  232:         $this->assertEquals(

DiscountOfficeItems • src/DealExpress/EdiBundle/Tests/Validation/X12/InterchangeValidatorTest.php:
   30:         $this->assertEquals(
   38:         $this->assertEquals(
   51:         $this->assertEquals(
   65:         $this->assertEquals(
   80:         $this->assertEquals(
   94:         $this->assertEquals(
  108:         $this->assertEquals(
  122:         $this->assertEquals(
  136:         $this->assertEquals(
  155:         $this->assertEquals(
  177:         $this->assertEquals(
  198:         $this->assertEquals(
  219:         $this->assertEquals(
  240:         $this->assertEquals(
  261:         $this->assertEquals(
  282:         $this->assertEquals(

DiscountOfficeItems • src/DealExpress/EdiBundle/Tests/Validation/X12/TransactionValidatorTest.php:
   28:         $this->assertEquals(
   43:         $this->assertEquals(
   57:         $this->assertEquals(
   72:         $this->assertEquals(
   86:         $this->assertEquals(
  105:         $this->assertEquals(
  127:         $this->assertEquals(
  148:         $this->assertEquals(
  169:         $this->assertEquals(
  190:         $this->assertEquals(
  211:         $this->assertEquals(
  232:         $this->assertEquals(

DiscountOfficeItems • src/DealExpress/EmailBundle/Tests/Factory/TemplateMessageFactoryTest.php:
   59:         $this->assertInstanceOf(Message::class, $actual);
   84:         $this->assertInstanceOf(Message::class, $actual);
  105:         $this->assertInstanceOf(Message::class, $actual);
  125:         $this->assertInstanceOf(Message::class, $actual);
  127:         $this->assertStringEndsWith('.subject.twig', $actual->getSubject());
  128:         $this->assertStringEndsWith('.text.twig', $actual->getText());
  129:         $this->assertStringEndsWith('.html.twig', $actual->getHtml());
  148:         $this->assertEquals(trim($rendered), $actual->getSubject());
  150:         $this->assertEquals($rendered, $actual->getText());
  214:         $this->assertEquals($convertedHtml, $actual->getHtml());

DiscountOfficeItems • src/DealExpress/EmailBundle/Tests/MailingList/MailingListResolverTest.php:
   96:         $this->assertMembershipStatus($expected, $actual);
  234:         $this->assertEquals($expected, $actual);
  261:         $this->assertEquals($expected, $actual);
  329:         $this->assertEquals($expected, $actualRender);

DiscountOfficeItems • src/DealExpress/EmailBundle/Tests/MailingList/SessionAwareMailingListStatusTest.php:
   49:         $this->assertMembershipStatus([], $actual);
   60:         $this->assertMembershipStatus([], $actual);
   70:         $this->assertMembershipStatus([], $actual);
  109:         $this->assertMembershipStatus($list, $actual);
  125:         $this->assertEquals($expected, $actual);
  141:         $this->assertMembershipStatus($list, $actual);
  159:         $this->assertMembershipStatus($list, $actual);
  173:         $this->assertMembershipStatus([], $actual);
  188:         $this->assertMembershipStatus([], $actual);
  194:         $this->assertMembershipStatus($list, $actual);
  219:         $this->assertEquals($expected, $actual);
  243:         $this->assertEquals($expected, $actual);
  280:         $this->assertContainsOnlyInstancesOf(MembershipStatusInterface::class, $actual);
  287:         $this->assertEquals($expected, $actualRender);

DiscountOfficeItems • src/DealExpress/EmailBundle/Tests/Message/MessageTest.php:
  29:         $this->assertEquals($expected, $this->fixture->$getMethod());
  87:         $this->assertEquals([$categoryA, $categoryB], $actual);

DiscountOfficeItems • src/DealExpress/EmailBundle/Tests/Sender/SqsConsumerTest.php:
  84:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/EmailBundle/Tests/Sender/SqsSenderTest.php:
  41:         $this->assertInstanceOf(SenderInterface::class, $this->fixture);
  75:         $this->assertTrue($actual);

DiscountOfficeItems • src/DealExpress/EmailBundle/Tests/Sender/StoreDelegatorEventSenderTest.php:
   88:         $this->logs->assertLogsContains(StoreDelegatorEventSender::ERR_NO_LISTENER);
  143:         $this->assertEquals($eventName, $message->getSubject());
  144:         $this->assertEquals($data, $message['data']);

DiscountOfficeItems • src/DealExpress/EmailBundle/Tests/Sender/SwiftSenderTest.php:
   54:         $this->assertInstanceOf(SenderInterface::class, $this->fixture);
   85:         $this->logger->assertMessageLogged(LogLevel::ERROR, $errorMessage);
   98:         $this->assertFalse($actual);
  124:         $this->assertTrue($actual);
  147:         $this->assertTrue($actual);

DiscountOfficeItems • src/DealExpress/EmailBundle/Tests/Sender/SwiftSender/CategorySenderTest.php:
  60:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/EmailBundle/Tests/Serializer/NormalizerTest.php:
   26:         $this->assertFalse($this->fixture->supportsNormalization(new \stdClass()));
   27:         $this->assertTrue($this->fixture->supportsNormalization(new Message()));
   32:         $this->assertFalse($this->fixture->supportsDenormalization([], \stdClass::class));
   33:         $this->assertTrue($this->fixture->supportsDenormalization([], Message::class));
   45:                 $this->assertFalse(is_object($value));
   60:                 $this->assertFalse(is_object($value));
   75:                 $this->assertFalse(is_object($value));
   88:         $this->assertInstanceOf(Message::class, $denormal);
   89:         $this->assertEquals($message, $denormal);
  101:         $this->assertInstanceOf(Message::class, $denormal);
  102:         $this->assertContainsOnlyInstancesOf(Attachment::class, $denormal->getAttachmentList());
  103:         $this->assertEquals($message, $denormal);
  115:         $this->assertInstanceOf(Message::class, $denormal);
  116:         $this->assertEquals($message, $denormal);
  127:         $this->assertLessThan(200000, strlen(json_encode($array)));
  131:         $this->assertInstanceOf(Message::class, $denormal);
  132:         $this->assertEquals($message, $denormal);

DiscountOfficeItems • src/DealExpress/EmailBundle/Tests/Status/SendGridStatusTest.php:
   60:         $this->assertCount(count($this->services['$listList']), $actual);
   62:             $this->assertEquals(MembershipStatusInterface::STATUS_SUPPRESSED, $status->getStatus());
   82:         $this->assertCount(count($this->services['$listList']), $actual);
   84:             $this->assertEquals(MembershipStatusInterface::STATUS_UNSUBSCRIBED, $status->getStatus());
  106:         $this->assertCount(count($this->services['$listList']), $actual);
  107:         $this->assertEquals(MembershipStatusInterface::STATUS_SUBSCRIBED, $actual[$inList]->getStatus());
  135:         $this->assertEquals(
  198:         $this->assertEquals($expected, $actual);
  225:         $this->assertEquals(
  273:         $this->assertEquals(
  328:         $this->assertEquals(
  370:         $this->assertEquals(

DiscountOfficeItems • src/DealExpress/EmailBundle/Tests/Status/SuppressionCheckerTest.php:
  82:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/ExtrasBundle/Tests/Address/AddressShortenerTest.php:
   82:         $this->assertEquals($expected, $actual);
  370:         $this->assertTrue($actual);
  382:         $this->assertFalse($actual);

DiscountOfficeItems • src/DealExpress/ExtrasBundle/Tests/Aws/ThrottledClientDecoratorTest.php:
   48:         $this->assertInstanceOf(AwsClientInterface::class, $this->fixture);
   63:         $this->assertSame($result, $actual);
   78:         $this->assertSame($promise, $actual);
   91:         $this->assertSame($promise, $actual);
  104:         $this->assertSame($region, $actual);
  117:         $this->assertSame($uri, $actual);
  130:         $this->assertSame($api, $actual);
  145:         $this->assertSame($config, $actual);
  158:         $this->assertSame($list, $actual);
  175:         $this->assertSame($iterator, $actual);
  192:         $this->assertSame($paginator, $actual);
  206:         $this->assertNull($actual);
  223:         $this->assertSame($waiter, $actual);
  256:         $this->assertSame($value, $actual);

DiscountOfficeItems • src/DealExpress/ExtrasBundle/Tests/Aws/Cognito/ApiKeyAuthenticatorTest.php:
   80:                     $this->assertEquals(
  142:         $this->assertInstanceOf(PreAuthenticatedToken::class, $token);
  143:         $this->assertSame($user, $token->getUser());
  144:         $this->assertEquals(
  161:         $this->assertTrue($this->fixture->supportsToken($preauth, $key));
  162:         $this->assertFalse($this->fixture->supportsToken($preauth, uniqid('other')));
  163:         $this->assertFalse($this->fixture->supportsToken($token, $key));
  200:         $this->assertSame($afterUser, $newToken->getUser());
  224:         $this->assertEquals(
  244:         $this->assertEquals(

DiscountOfficeItems • src/DealExpress/ExtrasBundle/Tests/Aws/Cognito/AuthenticationEntryPointTest.php:
  58:         $this->assertInstanceOf(RedirectResponse::class, $actual);
  59:         $this->assertEquals($url, $actual->getTargetUrl());

DiscountOfficeItems • src/DealExpress/ExtrasBundle/Tests/Aws/Cognito/OAuthClientProviderTest.php:
   77:         $this->assertStringStartsWith(
   87:         $this->assertStringContainsString($this->redirectUri, $actual);
   88:         $this->assertStringContainsString($this->fixture->getState(), $actual);
   95:         $this->assertStringStartsWith(
  112:         $this->assertStringStartsWith(
  149:         $this->assertEquals(

DiscountOfficeItems • src/DealExpress/ExtrasBundle/Tests/Aws/Cognito/TokenDecoderTest.php:
  163:         $this->assertEquals(

DiscountOfficeItems • src/DealExpress/ExtrasBundle/Tests/Aws/Cognito/UserFactoryTest.php:
   28:         $this->assertInstanceOf(User::class, $actual);
   37:         $this->assertEquals($value, $actual->getUsername());
   46:         $this->assertEquals($roles, $actual->getRoles());
   55:         $this->assertEquals($value, $actual->isEnabled());
   73:         $this->assertEquals($value, $actual->getEmail());
   91:         $this->assertEquals($value, $actual->getEmail());
   98:         $this->assertNull($actual->getRefreshToken());
  106:         $this->assertFalse($actual->hasExpired());
  109:         $this->assertTrue($actual->hasExpired());

DiscountOfficeItems • src/DealExpress/ExtrasBundle/Tests/Aws/Cognito/UserManagerTest.php:
  102:         $this->assertSame([$userA, $userB], $actual);
  171:         $this->assertSame($user, $actual);

DiscountOfficeItems • src/DealExpress/ExtrasBundle/Tests/Aws/Cognito/UserProviderTest.php:
   74:         $this->assertSame($input, $actual);
  112:         $this->assertEquals($username, $actual->getUsername());
  117:         $this->assertTrue($this->fixture->supportsClass(User::class));
  118:         $this->assertFalse($this->fixture->supportsClass(UserInterface::class));
  141:         $this->assertEquals($username, $actual->getUsername());
  142:         $this->assertEquals($refreshToken, $actual->getRefreshToken());
  143:         $this->assertEquals(

DiscountOfficeItems • src/DealExpress/ExtrasBundle/Tests/Aws/Cognito/UserRoleManagerTest.php:
  182:         $this->assertEquals($expected, $actual);
  225:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/ExtrasBundle/Tests/Aws/Cognito/UserTest.php:
  28:         $this->assertEquals($decoded['roles'], $user->getRoles());
  29:         $this->assertEquals($email, $user->getUsername());
  30:         $this->assertEquals('', $user->getPassword());
  31:         $this->assertEquals(null, $user->getSalt());
  32:         $this->assertEquals($decoded['refresh'], $user->getRefreshToken());
  35:         $this->assertFalse($user->hasExpired());
  38:         $this->assertTrue($user->hasExpired());

DiscountOfficeItems • src/DealExpress/ExtrasBundle/Tests/Aws/Cognito/TokenDecoder/KeychainTest.php:
   92:         $this->assertEquals(
  102:         $this->assertTrue(
  111:         $this->assertFalse(
  122:         $this->assertEquals('OpenSSL key', get_resource_type($key));
  153:         $this->assertTrue(
  173:         $this->assertTrue(

DiscountOfficeItems • src/DealExpress/ExtrasBundle/Tests/Aws/S3/PostObjectFactoryTest.php:
  179:         $this->assertInstanceOf(PostObjectV4::class, $actual);
  190:         $this->assertSame($this->client, $actual->getClient());
  202:         $this->assertSame($bucket, $actual->getBucket());
  220:         $this->assertSame($expected, $actual->getFormAttributes());
  235:         $this->assertEquals($value, $attributeList[$name]);
  262:         $this->assertEquals($expectedExpiration, $actualRawPolicy['expiration']);
  285:         $this->assertEquals($policyList, $actualPolicyList);
  316:         $this->assertEquals($policyList, $actualPolicyList);
  337:             $this->assertEquals($value, $actualInputList[$name], 'Invalid input value for '.$name);
  409:         $this->assertEquals($value, $inputList[$name]);

DiscountOfficeItems • src/DealExpress/ExtrasBundle/Tests/Aws/S3/PostObjectFactory/PolicyMergerTest.php:
  74:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/ExtrasBundle/Tests/Aws/S3/PostObjectFactory/PolicyValidatorTest.php:
  67:         $this->assertNull($result);
  77:         $this->assertNull($result);

DiscountOfficeItems • src/DealExpress/ExtrasBundle/Tests/Aws/Sqs/S3ConsumerTest.php:
   81:         $this->logger->assertLogsContains($message);
   82:         $this->assertEquals(SqsConsumerInterface::MSG_REJECT, $actual);
  142:         $this->logger->assertLogsContains(S3Consumer::ERROR_UNHANDLED_KEY.$key);
  143:         $this->assertEquals(SqsConsumerInterface::MSG_REQUEUE_SHUTDOWN, $actual);
  153:         $this->logger->assertLogsContains(S3Consumer::ERROR_UNHANDLED_KEY);
  154:         $this->assertEquals(SqsConsumerInterface::MSG_REQUEUE_SHUTDOWN, $actual);
  187:         $this->assertEquals(SqsConsumerInterface::MSG_REQUEUE_SHUTDOWN, $actual);
  212:         $this->assertEquals(SqsConsumerInterface::MSG_REJECT, $actual);
  213:         $this->logger->assertLogsContains(S3Consumer::INFO_CANCELED_REQUEST);
  238:         $this->assertEquals(SqsConsumerInterface::MSG_REJECT, $actual);
  239:         $this->logger->assertLogsContains(S3Consumer::INFO_EXPIRED_REQUEST);
  260:         $this->assertEquals(SqsConsumerInterface::MSG_REQUEUE_SHUTDOWN, $actual);
  275:         $this->logger->assertLogsContains(S3Consumer::INFO_HANDLE_KEY);
  341:         $this->assertEquals($expected, $actual);
  385:         $this->assertEquals($expected, $actual);
  398:         $this->assertEquals(SqsConsumerInterface::MSG_REJECT, $actual);
  408:         $this->assertEquals(SqsConsumerInterface::MSG_REJECT, $actual);

DiscountOfficeItems • src/DealExpress/ExtrasBundle/Tests/Aws/Sqs/SqsProducerFactoryTest.php:
   63:         $this->assertInstanceOf(SqsProducerInterface::class, $actual);
   86:         $this->assertInstanceOf(SqsProducerInterface::class, $actual);
  114:         $this->assertInstanceOf(SqsProducerInterface::class, $actual);
  142:         $this->assertInstanceOf(SqsProducerInterface::class, $actual);

DiscountOfficeItems • src/DealExpress/ExtrasBundle/Tests/Aws/Sqs/SqsTaskConsumerTest.php:
  54:         $this->assertEquals($result, $this->fixture->consume($message));
  91:         $this->assertEquals(ConsumerResponseInterface::MSG_REQUEUE_SHUTDOWN, $this->fixture->consume($message));

DiscountOfficeItems • src/DealExpress/ExtrasBundle/Tests/Cache/ArrayCacheTest.php:
  46:         $this->assertEquals($limit, $count);
  47:         $this->assertEquals(end($dataList), $actual);

DiscountOfficeItems • src/DealExpress/ExtrasBundle/Tests/Cache/MysqlCacheTest.php:
  86:         $this->assertNull($this->getCacheDriver()->getStats());

DiscountOfficeItems • src/DealExpress/ExtrasBundle/Tests/Command/PivotalCopyCommandTest.php:
   70:         $this->assertFileContents('');
   85:         $this->assertFileContents($response);
  103:         $this->assertFileContents($responseA.$responseB);
  111:         $this->assertTrue(file_exists($this->storyPath.'/'.$this->fileName));
  114:         $this->assertEquals($expected, $fileContents, 'Data not saved to text file correctly');

DiscountOfficeItems • src/DealExpress/ExtrasBundle/Tests/Command/PivotalCreateCommandTest.php:
  113:         $this->assertEquals($expected, $tester->getDisplay());
  127:         $this->assertEquals('', $tester->getDisplay());

DiscountOfficeItems • src/DealExpress/ExtrasBundle/Tests/Command/SqsConsumerCommandTest.php:
   96:         $this->assertGreaterThan($expectedTime, $stopTime);
  129:         $this->assertEquals(SqsConsumerCommand::ERROR_FAILURE, $actual);
  147:         $this->assertEquals(SqsConsumerCommand::ERROR_FAILURE, $actual);

DiscountOfficeItems • src/DealExpress/ExtrasBundle/Tests/Converter/UnitConverterTest.php:
   29:         $this->assertEquals($expected, $actual);
  102:         $this->assertEquals('double', gettype($actual));

DiscountOfficeItems • src/DealExpress/ExtrasBundle/Tests/DateTime/ExponentialBackoffThrottlerTest.php:
   49:         $this->assertSame($start + $this->minimumSleep, $end);
   62:         $this->assertSame($start + $this->minimumSleep * 2, $end);
   76:         $this->assertSame($start + $this->minimumSleep * 4, $end);
   91:         $this->assertSame($start + $this->minimumSleep * 4, $end);
  105:         $this->assertSame($start + $this->minimumSleep, $end);
  120:         $this->assertSame($start + $this->minimumSleep, $end);

DiscountOfficeItems • src/DealExpress/ExtrasBundle/Tests/DateTime/LocalClockTest.php:
   22:         $this->assertEquals($firstCheck->getTimestamp(), $secondCheck->getTimestamp());
   30:         $this->assertNotEquals($firstCheck->getTimestamp(), $secondCheck->getTimestamp());
   39:         $this->assertEquals($firstCheck->getTimestamp(), $secondCheck->getTimestamp());
   47:         $this->assertNotEquals($firstCheck->getTimestamp(), $secondCheck->getTimestamp());
   58:         $this->assertEquals('UTC', $time->getTimezone()->getName());
   71:         $this->assertTrue(1 >= $realClock, 'Fake sleep did not fake it');
   72:         $this->assertEquals(
   86:         $this->assertTrue(1 <= $realClock, 'Real sleep did not sleep');
  114:         $this->assertSame(
  155:         $this->assertSame(
  166:         $this->assertSame(
  170:         $this->assertInstanceOf(\DateTime::class, $actual);
  186:         $this->assertSame(
  220:         $this->assertNull(LocalClock::normalizeNullable($input));
  252:         $this->assertEquals(new \DateTime('2011-01-01 1:00:00'), $previous);
  257:         $this->assertEquals(new \DateTime('2011-07-01 3:00:00'), $later);

DiscountOfficeItems • src/DealExpress/ExtrasBundle/Tests/DBAL/DbalUtilityTest.php:
  22:         $this->assertEquals($expected, DbalUtility::sortDirection($input, $default));

DiscountOfficeItems • src/DealExpress/ExtrasBundle/Tests/DBAL/MasterSlaveListenerTest.php:
  92:         $this->assertEmpty($this->getResponseCookie($event));

DiscountOfficeItems • src/DealExpress/ExtrasBundle/Tests/DBAL/Types/UtcDateTimeTypeTest.php:
   44:         $this->assertEquals('2018-09-05 21:37:29', $actual);
   51:         $this->assertNull($actual);
  110:         $this->assertInstanceOf(\DateTimeImmutable::class, $actual);
  111:         $this->assertEquals('2018-09-05 21:37:29', $actual->format('Y-m-d H:i:s'));
  112:         $this->assertEquals($this->fixture::TIMEZONE, $actual->getTimezone()->getName());
  119:         $this->assertNull($actual);
  128:         $this->assertSame($value, $actual);

DiscountOfficeItems • src/DealExpress/ExtrasBundle/Tests/DBAL/Types/ZBlobTest.php:
  38:         $this->assertIsString($this->type->convertToDatabaseValue([], $this->platform));
  44:         $this->assertIsArray($this->type->convertToPHPValue($compressed, $this->platform));
  49:         $this->assertNull($this->type->convertToPHPValue(null, $this->platform));
  55:         $this->assertFalse($this->type->convertToPHPValue($compressed, $this->platform));

DiscountOfficeItems • src/DealExpress/ExtrasBundle/Tests/DependencyInjection/Compiler/PrefixServiceLocatorPassTest.php:
   40:         $this->assertEquals([$registerAs], array_keys($located));
   42:         $this->assertReference($subscribeServiceId.'.'.$serviceId, $located[$registerAs]);
   73:         $this->assertEquals([$registerAs], array_keys($located));
   75:         $this->assertReference($subscribeServiceId.'.'.$serviceId, $located[$registerAs]);
  108:         $this->assertEquals([$registerAs], array_keys($located));
  110:         $this->assertReference($prefix.$serviceId, $located[$registerAs]);
  138:         $this->assertEquals($methodName, $call[0]);
  144:         $this->assertEquals([$registerAs], array_keys($located));
  146:         $this->assertReference($subscribeServiceId.'.'.$serviceId, $located[$registerAs]);
  167:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/ExtrasBundle/Tests/DependencyInjection/Compiler/ReferenceParentContainerPassTest.php:
  37:         $this->assertSame($expected, $child[0]);
  74:         $this->assertSame($expected[0], $container->get($childName[0])[0]);
  75:         $this->assertSame($expected[1], $container->get($childName[1])[0]);

DiscountOfficeItems • src/DealExpress/ExtrasBundle/Tests/DependencyInjection/Compiler/S3ConsumerPassTest.php:
  38:         $this->assertReference($subscribeServiceId, $wrappedReference);
  70:         $this->assertEquals($eventList, array_keys($located));
  91:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/ExtrasBundle/Tests/DependencyInjection/Compiler/TaskConsumerPassTest.php:
  35:         $this->assertEquals(

DiscountOfficeItems • src/DealExpress/ExtrasBundle/Tests/FileReader/JsonFileReaderTest.php:
  59:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/ExtrasBundle/Tests/FileWriter/TimestampedFileNameTest.php:
  29:         $this->assertEquals($fileName, (string) $this->fixture);
  38:         $this->assertEquals($fileName, (string) $this->fixture);
  52:         $this->assertEquals($expected, (string) $this->fixture);
  68:         $this->assertEquals($expected, (string) $this->fixture);
  84:         $this->assertEquals($expected, (string) $this->fixture);

DiscountOfficeItems • src/DealExpress/ExtrasBundle/Tests/Form/ErrorListNormalizerTest.php:
  34:         $this->assertEquals($normalizedList, $actual);

DiscountOfficeItems • src/DealExpress/ExtrasBundle/Tests/Form/FormConstraintValidatorTest.php:
  79:         $this->assertTrue($actual);
  93:         $this->assertFalse($actual);

DiscountOfficeItems • src/DealExpress/ExtrasBundle/Tests/Form/DataTransformer/CCNumberTest.php:
  25:         $this->assertEquals($expected, $this->fixture->transform($input));
  57:         $this->assertEquals($expected, $this->fixture->reverseTransform($input));

DiscountOfficeItems • src/DealExpress/ExtrasBundle/Tests/Form/Type/CityStateTypeTest.php:
  27:         $this->assertInstanceOf(DataTransformerInterface::class, $this->fixture);
  37:         $this->assertEquals($expected, $actual);
  95:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/ExtrasBundle/Tests/Form/Type/DeleteTypeTest.php:
  27:         $this->assertTrue($form->isSynchronized());
  28:         $this->assertTrue($form->isValid());
  34:             $this->assertArrayHasKey($key, $children);
  49:         $this->assertTrue($form->isSynchronized());
  50:         $this->assertFalse($form->isValid());
  64:         $this->assertTrue($form->isSynchronized());
  65:         $this->assertTrue($form->isValid());
  71:             $this->assertArrayHasKey($key, $children);

DiscountOfficeItems • src/DealExpress/ExtrasBundle/Tests/FtpRpc/RequestBuilderTest.php:
   25:         $this->assertStringContainsString($service, $fixture->getRequest());
   37:         $this->assertStringContainsString($expected, $this->fixture->getRequest());
   58:         $this->assertEquals($expected, $actual['raise error']);
   67:         $this->assertEquals('newest', $actual['limit']);
   78:         $this->assertEquals($expected, $actual['delete after']);
   87:         $this->assertStringContainsString($expected->format(\DateTime::ATOM), $this->fixture->getRequest());
   96:         $this->assertStringContainsString($expected->format(\DateTime::ATOM), $this->fixture->getRequest());
  120:         $this->assertStringContainsString($expected, $this->fixture->getRequest());

DiscountOfficeItems • src/DealExpress/ExtrasBundle/Tests/FtpRpc/SqsClientTest.php:
  33:         $this->assertInstanceOf(RequestBuilderInterface::class, $actual);

DiscountOfficeItems • src/DealExpress/ExtrasBundle/Tests/GuzzleHttp/ClientTest.php:
   60:         $this->assertInstanceOf(GuzzleClient::class, $this->fixture->getClient());
  146:         $this->assertInstanceOf(Response::class, $actual);
  224:         $this->assertInstanceOf(Response::class, $actual);
  234:         $this->assertInstanceOf(Response::class, $actual);
  244:         $this->assertInstanceOf(Response::class, $actual);
  254:         $this->assertInstanceOf(Response::class, $actual);
  264:         $this->assertInstanceOf(Response::class, $actual);
  274:         $this->assertInstanceOf(Response::class, $actual);
  284:         $this->assertInstanceOf(Response::class, $actual);

DiscountOfficeItems • src/DealExpress/ExtrasBundle/Tests/GuzzleHttp/DnsWhitelistResolveTest.php:
   64:         $this->assertSame($response, $actual);
   71:         $this->assertNotEmpty($spy[0]['curl'][CURLOPT_RESOLVE][0]);
   72:         $this->assertResolve($spy[0]['curl'][CURLOPT_RESOLVE][0]);
   88:         $this->assertResolve($actual);
   89:         $this->assertEquals($option, $spy[0]);
  107:         $this->assertCount(3, $spy);
  108:         $this->assertEquals($spy[0], $spy[1]);
  109:         $this->assertEquals($spy[0], $spy[2]);
  114:         $this->assertStringStartsWith('api.sendgrid.com:443:167.89.', $actual);

DiscountOfficeItems • src/DealExpress/ExtrasBundle/Tests/GuzzleHttp/RequestFactoryTest.php:
   41:         $this->assertInstanceOf(Request::class, $actual);
   50:         $this->assertEquals($method, $actual->getMethod());
   59:         $this->assertEquals($uri, $actual->getUri());
   70:         $this->assertEquals($headerList, $actual->getHeaders());
   85:         $this->assertIsArray($actualHeader);
   86:         $this->assertCount(1, $actualHeader);
   87:         $this->assertEquals($headerValue, reset($actualHeader));
  101:         $this->assertEquals($headerValue, $actual->getHeaderLine($headerKey));
  110:         $this->assertEquals($body, $actual->getBody());
  119:         $this->assertEquals($protocol, $actual->getProtocolVersion());

DiscountOfficeItems • src/DealExpress/ExtrasBundle/Tests/GuzzleHttp/RequestTest.php:
   30:         $this->assertInstanceOf(RequestInterface::class, $fixture->getRequest());
   39:         $this->assertEquals($method, $fixture->getMethod());
   48:         $this->assertEquals($uri, $fixture->getUri());
   60:         $this->assertEquals($headerList, $fixture->getHeaders());
   76:         $this->assertIsArray($actual);
   77:         $this->assertCount(1, $actual);
   78:         $this->assertEquals($headerValue, reset($actual));
   93:         $this->assertEquals($headerValue, $fixture->getHeaderLine($headerKey));
  102:         $this->assertEquals($body, $fixture->getBody());
  111:         $this->assertEquals($protocol, $fixture->getProtocolVersion());

DiscountOfficeItems • src/DealExpress/ExtrasBundle/Tests/GuzzleHttp/ResponseFactoryTest.php:
   27:         $this->assertInstanceOf(Response::class, $actual);
   36:         $this->assertEquals($status, $actual->getStatusCode());
   47:         $this->assertEquals($headerList, $actual->getHeaders());
   62:         $this->assertIsArray($actualHeader);
   63:         $this->assertCount(1, $actualHeader);
   64:         $this->assertEquals($headerValue, reset($actualHeader));
   78:         $this->assertEquals($headerValue, $actual->getHeaderLine($headerKey));
   87:         $this->assertEquals($body, $actual->getBody());
   96:         $this->assertEquals($body, $actual->getBody()->getContents());
  105:         $this->assertEquals($protocol, $actual->getProtocolVersion());
  114:         $this->assertEquals($reason, $actual->getReason());

DiscountOfficeItems • src/DealExpress/ExtrasBundle/Tests/GuzzleHttp/ResponseTest.php:
   30:         $this->assertInstanceOf(ResponseInterface::class, $fixture->getResponse());
   38:         $this->assertEquals($status, $fixture->getStatusCode());
   49:         $this->assertEquals($headerList, $fixture->getHeaders());
   64:         $this->assertIsArray($actual);
   65:         $this->assertCount(1, $actual);
   66:         $this->assertEquals($headerValue, reset($actual));
   80:         $this->assertEquals($headerValue, $fixture->getHeaderLine($headerKey));
   88:         $this->assertEquals($body, $fixture->getBody());
   96:         $this->assertEquals($body, $fixture->getBody()->getContents());
  104:         $this->assertEquals(json_decode($body, true), $fixture->getJson());
  111:         $this->assertEquals([], $fixture->getJson());
  129:         $this->assertEquals($protocol, $fixture->getProtocolVersion());
  137:         $this->assertEquals($reason, $fixture->getReason());
  147:         $this->assertEquals(new \SimpleXMLElement($xml), $fixture->getXml());
  166:         $this->assertEmpty((string) $fixture->getXml());
  186:         $this->assertInstanceOf(\SimpleXMLElement::class, $fixture->getXml());
  194:         $this->assertTrue($fixture->isRedirect());
  202:         $this->assertFalse($fixture->isRedirect());
  210:         $this->assertFalse($fixture->isRedirect());

DiscountOfficeItems • src/DealExpress/ExtrasBundle/Tests/HttpFoundation/CsvResponseTest.php:
   19:         $this->assertInstanceOf(Response::class, $fixture);
   29:         $this->assertSame('', $fixture->getContent());
   30:         $this->assertSame(200, $fixture->getStatusCode());
   31:         $this->assertSame('text/csv', $fixture->headers->get('Content-Type'));
   32:         $this->assertSame($disposition, $fixture->headers->get('Content-Disposition'));
   42:         $this->assertSame($disposition, $fixture->headers->get('Content-Disposition'));
   52:         $this->assertFalse($fixture->setData($lineList));
   53:         $this->assertSame('', $fixture->getContent());
   70:         $this->assertSame($statusCode, $fixture->getStatusCode());
   79:         $this->assertSame('text/csv', $fixture->headers->get('Content-Type'));
   80:         $this->assertSame($header, $fixture->headers->get($headerName));
   89:         $this->assertSame($contentType, $fixture->headers->get('Content-Type'));
  123:         $this->assertEquals($expectedContent, $fixture->getContent());

DiscountOfficeItems • src/DealExpress/ExtrasBundle/Tests/HttpFoundation/JsonResponseTest.php:
  19:         $this->assertInstanceOf(BaseJsonResponse::class, $this->fixture);
  32:         $this->assertEquals($value, $preexisting);
  33:         $this->assertEquals('noindex', $added);
  44:         $this->assertEquals($value, $actual);

DiscountOfficeItems • src/DealExpress/ExtrasBundle/Tests/HttpFoundation/RawCsvResponseTest.php:
  15:         $this->assertInstanceOf(CsvResponse::class, $fixture);
  32:         $this->assertEquals($expected, $fixture->getContent());

DiscountOfficeItems • src/DealExpress/ExtrasBundle/Tests/Listener/CacheControlListenerTest.php:
  35:         $this->assertNull($actual);

DiscountOfficeItems • src/DealExpress/ExtrasBundle/Tests/Listener/ProcessSignalListenerTest.php:
   89:                         $test->assertEquals((string) $expectedSignal, (string) $actualSignal);
  132:                         $test->assertEquals((string) $expectedSignal, (string) $actualSignal);
  213:                         $test->assertEquals((string) $expectedSignal, (string) $actualSignal);
  253:                         $test->assertEquals((string) $expectedSignal, (string) $actualSignal);
  289:                         $test->assertEquals((string) $expectedSignal, (string) $actualSignal);

DiscountOfficeItems • src/DealExpress/ExtrasBundle/Tests/Lock/ProcessSharedLockTest.php:
   43:         $this->assertTrue($this->fixture->acquire($name));
   45:         $this->assertLocked($name);
   69:         $this->assertTrue($fixture->acquire($name, true));
   79:         $this->assertFalse($this->fixture->acquire($name));
   83:         $this->assertUnlocked($name);
   98:         $this->assertTrue($this->fixture->acquire($name));
   99:         $this->assertTrue($this->fixture->acquire($name));
  100:         $this->assertTrue($this->fixture->acquire($name));
  101:         $this->assertLocked($name);
  103:         $this->assertLocked($name);
  105:         $this->assertLocked($name);
  108:         $this->assertUnlocked($name);
  120:                 $this->assertLocked($name);
  126:         $this->assertEquals($expected, $actual);
  127:         $this->assertUnlocked($name);
  139:                 $this->assertLocked($name);
  147:         $this->assertEquals($expected, $actual);
  148:         $this->assertUnlocked($name);

DiscountOfficeItems • src/DealExpress/ExtrasBundle/Tests/Logger/AccessLoggingArrayTest.php:
  23:         $this->assertEquals($expected['offsetGet'], $fixture[uniqid()]);
  24:         $this->assertEquals($expected['offsetExists'], isset($fixture[uniqid()]));
  34:         $this->assertEquals($value, $fixture[$key]);
  35:         $this->assertTrue(isset($fixture[$key]));
  36:         $this->assertFalse(isset($fixture[uniqid()]));
  48:         $this->assertEquals($value, $base[$key]);
  52:         $this->assertFalse(isset($base[$key]));
  74:         $this->assertEquals($checkList, $checked);
  96:         $this->assertEquals($useList, $used);

DiscountOfficeItems • src/DealExpress/ExtrasBundle/Tests/Logger/SeverityTrackingLoggerTest.php:
  33:         $this->assertInstanceOf(LoggerInterface::class, $this->fixture);
  66:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/ExtrasBundle/Tests/Logger/User/ArrayLoggerTest.php:
   23:         $this->assertInstanceOf(AbstractLogger::class, $this->fixture);
   52:         $this->assertEquals($expected, $actual);
   66:         $this->assertEquals($expected, $actual);
  118:         $this->assertEquals([], $actual);

DiscountOfficeItems • src/DealExpress/ExtrasBundle/Tests/Logger/User/FlashLoggerAdapterTest.php:
  39:         $this->assertInstanceOf(AbstractLogger::class, $this->fixture);

DiscountOfficeItems • src/DealExpress/ExtrasBundle/Tests/Mime/MimeTypeGuesserTest.php:
  28:         $this->assertEquals($mimeType, $actual);
  41:         $this->assertEquals($mimeType, $actual);
  66:         $this->assertEquals($mimeType, $actual);

DiscountOfficeItems • src/DealExpress/ExtrasBundle/Tests/Paginator/DefaultWhitelistSubscriberTest.php:
   42:         $this->assertInstanceOf(EventSubscriberInterface::class, $this->fixture);
   51:         $this->assertNull($event->options);
   61:         $this->assertEquals($this->sortWhitelist, $event->options['sortFieldWhitelist']);
   72:         $this->assertEquals($value, $event->options['sortFieldWhitelist']);
   82:         $this->assertEquals($this->filterWhitelist, $event->options['filterFieldWhitelist']);
   93:         $this->assertEquals($value, $event->options['filterFieldWhitelist']);
  100:         $this->assertEquals(['knp_pager.items' => ['items', 5]], $actual);

DiscountOfficeItems • src/DealExpress/ExtrasBundle/Tests/Parser/LexerTest.php:
  110:         $this->assertArraySubset($expected, $actual);
  171:         $this->assertSame($tokenList, $actual);

DiscountOfficeItems • src/DealExpress/ExtrasBundle/Tests/Parser/SyntaxAnalyzerTest.php:
  103:         $this->assertSame($tree, $actual);

DiscountOfficeItems • src/DealExpress/ExtrasBundle/Tests/Parser/Lexer/LexerContextTest.php:
  24:         $this->assertEquals($expected, $this->fixture->getRegex());
  35:         $this->assertEquals($expected, $this->fixture->getRegex());
  46:         $this->assertEquals($type, $actual);

DiscountOfficeItems • src/DealExpress/ExtrasBundle/Tests/Parser/Lexer/TokenListFactoryTest.php:
   29:         $this->assertInstanceOf(TokenList::class, $actual);
   36:         $this->assertInstanceOf(\Iterator::class, $actual);
   46:         $this->assertTrue($actual->valid());
   48:         $this->assertFalse($actual->valid());
   59:         $this->assertInstanceOf(NullInterface::class, $token);
   60:         $this->assertEquals($expected, $normalizedToken);
   76:         $this->assertSame($tokenA, $tokenB);
   91:         $this->assertNotEquals($keyA, $keyB);
  106:         $this->assertEquals($offset, $actual->key());
  126:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/ExtrasBundle/Tests/Parser/SyntaxAnalyzer/RuleCollectionTest.php:
   79:         $this->assertSame($rule, $actual);
  115:         $this->assertSame($rule, $actual);
  218:         $this->assertSame($ruleB, $actual);

DiscountOfficeItems • src/DealExpress/ExtrasBundle/Tests/Parser/SyntaxAnalyzer/RuleFactoryTest.php:
  33:         $this->assertInstanceOf(SimpleRule::class, $actual);
  42:         $this->assertInstanceOf(LogicalAndRule::class, $actual);
  51:         $this->assertInstanceOf(LogicalOrRule::class, $actual);
  72:         $this->assertInstanceOf(OneOrManyRule::class, $actual);
  82:         $this->assertInstanceOf(ZeroOrManyRule::class, $actual);
  92:         $this->assertInstanceOf(ZeroOrOneRule::class, $actual);

DiscountOfficeItems • src/DealExpress/ExtrasBundle/Tests/Parser/SyntaxAnalyzer/SynxtaxContextTest.php:
  188:         $this->assertSame($rule, $actual);
  204:         $this->assertSame($expected, $actual);

DiscountOfficeItems • src/DealExpress/ExtrasBundle/Tests/Parser/SyntaxAnalyzer/Rule/LogicalAndRuleTest.php:
   46:         $this->assertInstanceOf(RuleInterface::class, $this->fixture);
   55:         $this->assertEquals($this->name, $actual->getName());
   64:         $this->assertEquals('', $actual->getValue());
   99:         $this->assertEquals([], $actual->getBranchList());
  100:         $this->assertTrue($actual->isLeaf());
  114:         $this->assertEquals([$node], $actual->getBranchList());
  115:         $this->assertFalse($actual->isLeaf());
  129:         $this->assertSame([$nodeA, $nodeB], $actual->getBranchList());
  130:         $this->assertFalse($actual->isLeaf());

DiscountOfficeItems • src/DealExpress/ExtrasBundle/Tests/Parser/SyntaxAnalyzer/Rule/LogicalOrRuleTest.php:
   48:         $this->assertInstanceOf(RuleInterface::class, $this->fixture);
   57:         $this->assertEquals($this->name, $actual->getName());
   66:         $this->assertEquals('', $actual->getValue());
  103:         $this->assertEquals([], $actual->getBranchList());
  104:         $this->assertTrue($actual->isLeaf());
  116:         $this->assertEquals([$node], $actual->getBranchList());
  117:         $this->assertFalse($actual->isLeaf());
  132:         $this->assertEquals([$node], $actual->getBranchList());
  133:         $this->assertFalse($actual->isLeaf());

DiscountOfficeItems • src/DealExpress/ExtrasBundle/Tests/Parser/SyntaxAnalyzer/Rule/OneOrManyRuleTest.php:
   44:         $this->assertInstanceOf(RuleInterface::class, $this->fixture);
   64:         $this->assertEquals($this->name, $actual->getName());
   73:         $this->assertEquals('', $actual->getValue());
   98:         $this->assertEquals([], $actual->getBranchList());
   99:         $this->assertTrue($actual->isLeaf());
  111:         $this->assertEquals([$node], $actual->getBranchList());
  112:         $this->assertFalse($actual->isLeaf());
  125:         $this->assertEquals([$nodeA, $nodeB], $actual->getBranchList());
  126:         $this->assertFalse($actual->isLeaf());
  186:         $this->assertEquals([$node], $actual->getBranchList());

DiscountOfficeItems • src/DealExpress/ExtrasBundle/Tests/Parser/SyntaxAnalyzer/Rule/SimpleRuleTest.php:
  36:         $this->assertInstanceOf(RuleInterface::class, $this->fixture);
  56:         $this->assertEquals($this->name, $actual->getName());
  68:         $this->assertEquals($value, $actual->getValue());
  80:         $this->assertInstanceOf(NullInterface::class, $actual);
  81:         $this->assertEquals('', $actual->getName(), 'Name should be blank.');
  82:         $this->assertEquals('', $actual->getValue(), 'Value should be blank.');
  83:         $this->assertEquals([], $actual->getBranchList(), 'Branch list should be empty.');
  84:         $this->assertTrue($actual->isLeaf(), 'Should be a leaf.');

DiscountOfficeItems • src/DealExpress/ExtrasBundle/Tests/Parser/SyntaxAnalyzer/Rule/ZeroOrManyRuleTest.php:
   43:         $this->assertInstanceOf(RuleInterface::class, $this->fixture);
   63:         $this->assertEquals($this->name, $actual->getName());
   72:         $this->assertEquals('', $actual->getValue());
   97:         $this->assertEquals([], $actual->getBranchList());
   98:         $this->assertTrue($actual->isLeaf());
  110:         $this->assertEquals([$node], $actual->getBranchList());
  111:         $this->assertFalse($actual->isLeaf());
  124:         $this->assertEquals([$nodeA, $nodeB], $actual->getBranchList());
  125:         $this->assertFalse($actual->isLeaf());
  143:         $this->assertEquals([], $actual->getBranchList());
  144:         $this->assertTrue($actual->isLeaf());
  166:         $this->assertEquals([$node], $actual->getBranchList());
  181:         $this->assertEquals([], $actual->getBranchList());
  182:         $this->assertTrue($actual->isLeaf());

DiscountOfficeItems • src/DealExpress/ExtrasBundle/Tests/Parser/SyntaxAnalyzer/Rule/ZeroOrOneRuleTest.php:
   43:         $this->assertInstanceOf(RuleInterface::class, $this->fixture);
   63:         $this->assertEquals($this->name, $actual->getName());
   72:         $this->assertEquals('', $actual->getValue());
   84:         $this->assertEquals([], $actual->getBranchList());
   85:         $this->assertTrue($actual->isLeaf());
   97:         $this->assertEquals([$node], $actual->getBranchList());
   98:         $this->assertFalse($actual->isLeaf());
  116:         $this->assertEquals([], $actual->getBranchList());
  117:         $this->assertTrue($actual->isLeaf());

DiscountOfficeItems • src/DealExpress/ExtrasBundle/Tests/Pivotal/ApiTest.php:
  168:         $this->assertEquals(json_encode($expected), $actual);
  228:         $this->assertEquals($response, $actual);

DiscountOfficeItems • src/DealExpress/ExtrasBundle/Tests/Pivotal/JsonRequestFormatterTest.php:
  31:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/ExtrasBundle/Tests/Pivotal/ResponseFormatterTest.php:
  29:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/ExtrasBundle/Tests/Pivotal/StoryCreateConsumerTest.php:
   41:         $this->assertInstanceOf(TaskConsumerInterface::class, $this->fixture);
   93:         $this->assertEquals(ConsumerResponseInterface::MSG_REQUEUE, $actual);
  126:         $this->assertEquals(ConsumerResponseInterface::MSG_ACK, $actual);

DiscountOfficeItems • src/DealExpress/ExtrasBundle/Tests/Pivotal/StoryFileParserTest.php:
  32:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/ExtrasBundle/Tests/Process/ProcessFactoryTest.php:
  28:         $this->assertEquals($command, $actual->getCommandLine());
  40:         $this->assertEquals("'{$partA}' '{$partB}' '{$partC}'", $actual->getCommandLine());

DiscountOfficeItems • src/DealExpress/ExtrasBundle/Tests/Repository/ProcessSignalRepositoryTest.php:
   43:         $this->assertInstanceOf(ProcessSignalRepository::class, $this->fixture);
   66:         $this->assertProcessListData([$processSignalEvent], $actual);
   67:         $this->assertEquals(ProcessSignalInterface::STATUS_START, $actual[0]['status']);
   90:         $this->assertProcessListData([$processSignalEvent], $actual);
   91:         $this->assertEquals(ProcessSignalInterface::STATUS_STOP, $actual[0]['status']);
  114:         $this->assertProcessListData([$processSignalEvent], $actual);
  115:         $this->assertEquals(ProcessSignalInterface::STATUS_ERROR, $actual[0]['status']);
  169:         $this->assertEquals($arrayValue['expected'], $arrayValue['actual']);

DiscountOfficeItems • src/DealExpress/ExtrasBundle/Tests/Request/UrlCorrectorTest.php:
  39:         $this->assertEquals($url, $actual);
  50:         $this->assertEquals($url, $actual);
  63:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/ExtrasBundle/Tests/Request/UrlLookupTest.php:
  116:         $this->assertNull($actual);
  127:         $this->assertEquals($url, $actual);
  200:         $this->assertNull($actual);
  221:         $this->assertEquals($url, $actual);
  307:         $this->assertEquals($correctUrl, $actual);
  331:         $this->assertEquals($correctUrl.$fragment, $actual);
  449:         $this->assertEquals($appendedUrl, $actual);
  479:         $this->assertEquals($appendedUrl.$fragment, $actual);
  511:         $this->assertEquals($appendedUrl, $actual);
  544:         $this->assertEquals($appendedUrl.$fragment, $actual);

DiscountOfficeItems • src/DealExpress/ExtrasBundle/Tests/Request/UrlQueryUpdaterTest.php:
   29:         $this->assertEquals($expected, $actual);
   75:         $this->assertEquals($expected, $actual);
  119:         $this->assertEquals($expected, $actual);
  171:         $this->assertEquals($expected, $actual);
  238:         $this->assertEquals($expected, $actual);
  298:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/ExtrasBundle/Tests/Request/UrlValidatorTest.php:
   75:         $this->assertFalse($actual);
   95:         $this->assertEquals($this->isRestrictionBlacklist, $actual);
  108:         $this->assertNotEquals($this->isRestrictionBlacklist, $actual);
  120:         $this->assertFalse($actual);
  131:         $this->assertEquals($this->isRestrictionBlacklist, $actual);
  148:         $this->assertFalse($actual);

DiscountOfficeItems • src/DealExpress/ExtrasBundle/Tests/Request/ParamConverter/LoggerParamConverterTest.php:
  45:         $this->assertTrue($actual);
  59:         $this->assertInstanceOf(FlashLoggerAdapter::class, $actual);
  72:         $this->assertTrue($actual);

DiscountOfficeItems • src/DealExpress/ExtrasBundle/Tests/Security/ArrayTokenStorageTest.php:
  25:         $this->assertInstanceOf(TokenStorageInterface::class, $this->fixture);
  30:         $this->assertEquals('', $this->fixture->getTokenKey(uniqid('a')));
  39:         $this->assertEquals($value, $this->fixture->getTokenKey($id));
  49:         $this->assertEquals($value, $this->fixture->getTokenKey($id));
  59:         $this->assertEquals($value, $this->fixture->getTokenKey($id));
  67:         $this->assertEquals('', $this->fixture->getTokenKey($id));
  76:         $this->assertEquals('', $this->fixture->getTokenKey($id));

DiscountOfficeItems • src/DealExpress/ExtrasBundle/Tests/Security/DualTokenStorageTest.php:
  38:         $this->assertInstanceOf(TokenStorageInterface::class, $this->fixture);
  69:         $this->assertSame($key, $actual);
  84:         $this->assertSame($key, $actual);

DiscountOfficeItems • src/DealExpress/ExtrasBundle/Tests/Security/FakeApiKeyAuthenticatorTest.php:
   48:         $this->assertInstanceOf(SimplePreAuthenticatorInterface::class, $this->fixture);
   53:         $this->assertInstanceOf(AuthenticationSuccessHandlerInterface::class, $this->fixture);
  127:         $this->assertInstanceOf(PreAuthenticatedToken::class, $actual);
  141:         $this->assertTrue($actual);
  151:         $this->assertFalse($actual);
  162:         $this->assertFalse($actual);
  195:         $this->assertInstanceOf(PreAuthenticatedToken::class, $actual);
  252:         $this->assertEquals($response, $actual);

DiscountOfficeItems • src/DealExpress/ExtrasBundle/Tests/Security/HmacTokenGeneratorTest.php:
   33:         $this->assertInstanceOf(TokenGeneratorInterface::class, $this->fixture);
   45:         $this->assertNotEmpty($this->fixture->createToken($id, $data));
   60:         $this->assertNotEquals($tokenA, $tokenB, 'Created the same signature');
   80:         $this->assertTrue($this->fixture->validateToken($id, $data, $token));
   89:         $this->assertFalse($this->fixture->validateToken($id, $data, $wrong));
  100:         $this->assertFalse($this->fixture->validateToken($id, $data, $wrong));

DiscountOfficeItems • src/DealExpress/ExtrasBundle/Tests/Security/LazyWriteStorageDecoratorTest.php:
  32:         $this->assertInstanceOf(TokenStorageInterface::class, $this->fixture);
  57:         $this->assertEquals($data, $this->fixture->getTokenKey($id));
  74:         $this->assertEquals($data, $this->fixture->getTokenKey($id));

DiscountOfficeItems • src/DealExpress/ExtrasBundle/Tests/Security/MysqlTokenStorageTest.php:
   71:         $this->assertInstanceOf(TokenStorageInterface::class, $this->fixture);
   83:         $this->assertSame($key, $actual);
   97:         $this->assertSame($keyB, $actual);
  104:         $this->assertNull($actual);
  119:         $this->assertNull($actual);
  134:         $this->assertNull($actual);
  142:         $this->assertEquals($empty, $fixture->getTokenKey(uniqid()));
  158:         $this->assertEquals($empty, $fixture->getTokenKey($id));

DiscountOfficeItems • src/DealExpress/ExtrasBundle/Tests/Security/PasswordGeneratorTest.php:
  28:         $this->assertSame($maxLength, strlen($actual));

DiscountOfficeItems • src/DealExpress/ExtrasBundle/Tests/Security/RenderEntryPointTest.php:
  49:         $this->assertInstanceOf(Response::class, $actual);
  50:         $this->assertEquals($body, $actual->getContent());

DiscountOfficeItems • src/DealExpress/ExtrasBundle/Tests/Security/StringObfuscatorTest.php:
  33:         $this->assertEquals($expectedCrc, $actualCrc, 'invalid CRC');
  34:         $this->assertEquals($expected, substr($actual, 16, -8), 'invalid obfuscated value');
  44:         $this->assertEquals($value, $actual);
  54:         $this->assertFalse($actual);

DiscountOfficeItems • src/DealExpress/ExtrasBundle/Tests/Service/ColumnSorterTest.php:
   18:         $this->assertEquals($expected, $actual);
   39:         $this->assertEquals($expected, $actual);
  128:         $this->assertEquals($expected, $actual);
  150:         $this->assertEquals($expected, $actual);
  172:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/ExtrasBundle/Tests/Session/AutoMergeSessionHandlerTest.php:
   69:         $this->assertEquals($sessionData, $this->fixture->read($sessionId));
   83:         $this->assertTrue($this->fixture->write($sessionId, $sessionData));
   84:         $this->assertNotEquals($sessionData, $this->wrappedHandler->read($sessionId));
   96:         $this->assertTrue($this->fixture->write($sessionId, $sessionData));
   97:         $this->assertEquals($sessionData, $this->wrappedHandler->read($sessionId));
  122:         $this->assertTrue($this->fixture->write($sessionId, session_encode()));
  128:         $this->assertEquals($expectedSet, $_SESSION);

DiscountOfficeItems • src/DealExpress/ExtrasBundle/Tests/Session/FlashTrackerTest.php:
  39:         $this->assertInstanceOf(FlashTrackerInterface::class, $this->fixture);
  99:         $this->assertEquals($data, $actual);

DiscountOfficeItems • src/DealExpress/ExtrasBundle/Tests/Session/LimitTrackerTest.php:
  120:         $this->assertSame($expected, $actual);

DiscountOfficeItems • src/DealExpress/ExtrasBundle/Tests/Session/MigrationSessionHandlerTest.php:
  111:         $this->assertEquals($return, $fixture->read($sessionId));
  134:         $this->assertEquals('', $fixture->read($sessionId));
  159:         $this->assertEquals($return, $fixture->write($sessionId, $data));
  189:         $this->assertEquals($return, $fixture->write($sessionId, $data));

DiscountOfficeItems • src/DealExpress/ExtrasBundle/Tests/Session/ReferrerUpdaterTest.php:
   75:         $this->assertEquals('get', $invocationList[0]->getMethodName());
   76:         $this->assertEquals('remove', $invocationList[1]->getMethodName());
  100:         $this->assertEquals($referrer, $actual);
  112:         $this->assertSame('', $actual);
  171:         $this->assertEquals($referrer, $actual);
  182:         $this->assertSame('', $actual);

DiscountOfficeItems • src/DealExpress/ExtrasBundle/Tests/Session/WriteGuardSessionIdHandlerTest.php:
   34:         $this->assertEquals($return, $this->fixture->close());
   45:         $this->assertEquals($return, $this->fixture->destroy($sessionId));
   58:         $this->assertEquals($return, $this->fixture->destroy($sessionId));
   69:         $this->assertEquals($return, $this->fixture->gc($maxLifetime));
   81:         $this->assertEquals($return, $this->fixture->open($savePath, $sessionName));
   92:         $this->assertEquals($return, $this->fixture->read($sessionId));
  105:         $this->assertEquals($return, $this->fixture->read($sessionId));
  117:         $this->assertEquals($return, $this->fixture->write($sessionId, $sessionData));
  131:         $this->assertEquals($return, $this->fixture->write($sessionId, $sessionData));

DiscountOfficeItems • src/DealExpress/ExtrasBundle/Tests/Session/AutoMerge/ResolveDifferenceTest.php:
  47:         $this->assertEquals(

DiscountOfficeItems • src/DealExpress/ExtrasBundle/Tests/Session/Tracking/KernelListenerTest.php:
   70:         $this->assertInstanceOf(AttributeBagInterface::class, $this->fixture->read());
   82:         $this->assertInstanceOf(AttributeBagInterface::class, $newBag);
   83:         $this->assertSame($value['test'], $newBag->get('test'));
   96:         $this->assertEquals($value, $foundBag->all());
  109:         $this->assertEquals($value, $newBag->all());
  132:         $this->assertNotEquals($idA, $idB);
  158:         $this->assertTrue(true);
  181:         $this->assertEmpty($event->getResponse()->headers->getCookies());
  196:         $this->assertNotEmpty($id, 'Did not find the cookie in the response');
  199:         $this->assertEquals($value, $loaded->all());
  211:         $this->assertEmpty($id, 'Did find the cookie in the response');
  222:         $this->assertEmpty($id, 'Set a cookie in response without seeing request');
  234:         $this->assertEmpty($id, 'Did find the cookie in the response');
  270:         $this->assertEmpty($orig->all());
  271:         $this->assertEquals($value, $loaded->all());
  289:         $this->assertNotEquals(
  294:         $this->assertNotEmpty(
  298:         $this->assertNotFalse(
  346:         $this->assertEquals(
  392:         $this->assertEquals($requestId, $sessionTracking);

DiscountOfficeItems • src/DealExpress/ExtrasBundle/Tests/Session/Tracking/StorageTest.php:
  48:         $this->assertEquals($original, $reload->all());
  62:         $this->assertEquals($original, $reload->all());
  79:         $this->assertNotEquals($original, $reload->all());

DiscountOfficeItems • src/DealExpress/ExtrasBundle/Tests/String/UsdTest.php:
  29:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/ExtrasBundle/Tests/Task/TaskConsumerRegistryTest.php:
  43:         $this->assertFalse($fixture->hasTaskConsumer($name));
  47:         $this->assertTrue($fixture->hasTaskConsumer($name));

DiscountOfficeItems • src/DealExpress/ExtrasBundle/Tests/Twig/Extension/BreadcrumbTest.php:
   53:         $this->assertInstanceOf(AbstractExtension::class, $this->fixture);
  115:             $this->assertInstanceOf(TwigFunction::class, $simpleFunction);
  132:             $this->assertContains($simpleFunction->getName(), $simpleFunctionNames);
  143:         $this->assertEquals(0, $this->fixture->length());
  276:         $this->assertEquals($renderAs, $actual);
  290:         $this->assertEquals($renderAs, $actual);
  304:         $this->assertEquals($times, $actual);

DiscountOfficeItems • src/DealExpress/ExtrasBundle/Tests/Twig/Extension/CdnLinkTest.php:
   37:         $this->assertInstanceOf(AbstractExtension::class, $this->fixture);
   44:         $this->assertCount(1, $actual);
   45:         $this->assertArrayHasKey(0, $actual);
   46:         $this->assertInstanceOf(TwigFunction::class, $actual[0]);
   47:         $this->assertEquals([$this->fixture, 'getLink'], $actual[0]->getCallable());
   59:         $this->assertEquals($link, $actual);
  130:         $this->assertNull($actual);

DiscountOfficeItems • src/DealExpress/ExtrasBundle/Tests/Twig/Extension/DateIntervalTest.php:
  26:         $this->assertInstanceOf(AbstractExtension::class, $this->fixture);
  33:         $this->assertCount(2, $actual);
  34:         $this->assertContainsOnlyInstancesOf(TwigFilter::class, $actual);
  46:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/ExtrasBundle/Tests/Twig/Extension/PhoneNumberTest.php:
  26:         $this->assertInstanceOf(AbstractExtension::class, $this->fixture);
  33:         $this->assertCount(1, $actual);
  34:         $this->assertContainsOnlyInstancesOf(TwigFilter::class, $actual);
  44:         $this->assertSame($expected, $actual);

DiscountOfficeItems • src/DealExpress/ExtrasBundle/Tests/Twig/Extension/ReviewFacetTest.php:
   27:         $this->assertInstanceOf(AbstractExtension::class, $this->fixture);
   34:         $this->assertCount(1, $filterList);
   35:         $this->assertFilter($filterList, 'sortReviewRefinements');
   42:         $this->assertEquals([], $actual);
   51:         $this->assertEquals([$refinement], $actual);
   61:         $this->assertSame([$refinementB, $refinementA], $actual);
   71:         $this->assertSame([$refinementA, $refinementB], $actual);
   99:         $this->assertInstanceOf(TwigFilter::class, $filter);
  100:         $this->assertEquals($filterName, $filter->getName());
  101:         $this->assertEquals([$this->fixture, $filterName], $filter->getCallable());

DiscountOfficeItems • src/DealExpress/ExtrasBundle/Tests/Twig/Extension/SvgTest.php:
   34:         $this->assertInstanceOf(AbstractExtension::class, $this->fixture);
   56:         $this->assertEquals($expected, $actual);
  206:         $this->assertEquals($expected, $actual);
  214:             $this->assertInstanceOf(TwigFunction::class, $simpleFunction);
  227:             $this->assertContains($simpleFunction->getName(), $simpleFunctionNames);

DiscountOfficeItems • src/DealExpress/GeonamesBundle/Tests/Controller/JsonControllerTest.php:
  49:         $this->assertInstanceOf(JsonResponse::class, $result);
  53:         $this->assertEquals($expected, $content);

DiscountOfficeItems • src/DealExpress/GeonamesBundle/Tests/Entity/GeoPostalCodeTest.php:
  23:         $this->assertEqualsWithDelta($expected, $orig->getMilesTo($dest), 0.5);
  40:         $this->assertEqualsWithDelta($expected * 1.609344, $orig->getKmTo($dest), 0.5);

DiscountOfficeItems • src/DealExpress/GeonamesBundle/Tests/Repository/GeoPostalCodeRepositoryTest.php:
  53:         $this->assertNull($actual);
  65:         $this->assertEquals($expected, $actual->getPostalCode());

DiscountOfficeItems • src/DealExpress/MfgDirectBundle/Tests/Command/DataImportCommandTest.php:
  147:         $this->assertStringContainsString($expected, $actual);
  302:         $this->assertEquals('', $actual);

DiscountOfficeItems • src/DealExpress/MfgDirectBundle/Tests/Command/FakeInventoryCommandTest.php:
  136:         $this->assertDatasource(
  165:         $this->assertEquals($expected, $this->actualDatasource);

DiscountOfficeItems • src/DealExpress/MfgDirectBundle/Tests/Command/FlatInventoryCommandTest.php:
  145:         $this->assertEquals(
  195:         $this->assertEquals(

DiscountOfficeItems • src/DealExpress/MfgDirectBundle/Tests/Consumer/FlashFurnitureConsumerTest.php:
   65:         $this->assertInstanceOf(S3ConsumerInterface::class, $this->fixture);
  104:         $this->assertEquals(S3ConsumerInterface::MSG_ACK, $actual);

DiscountOfficeItems • src/DealExpress/MfgDirectBundle/Tests/FileParser/InventoryTest.php:
  230:         $this->assertEquals($productList, $actual);

DiscountOfficeItems • src/DealExpress/MfgDirectBundle/Tests/FileParser/ProductDatasourceTest.php:
  46:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/MfgDirectBundle/Tests/FileParser/Filter/ConditionalColumnMapTest.php:
  54:         $this->assertEquals($output, ($this->fixture)($input));

DiscountOfficeItems • src/DealExpress/MfgDirectBundle/Tests/Image/BossImageMapperTest.php:
  101:         $this->assertEquals(['primary' => [], 'alternate' => []], $actual);
  134:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/MfgDirectBundle/Tests/Inventory/InventoryProcessorTest.php:
  99:         $this->assertInstanceOf(ProcessorInterface::class, $this->fixture);

DiscountOfficeItems • src/DealExpress/MfgDirectBundle/Tests/Inventory/SafcoInventoryUpdateConsumerTest.php:
   57:         $this->assertInstanceOf(S3ConsumerInterface::class, $this->fixture);
   70:         $this->logger->assertMessageLogged('info', 'Downloading the inventory report');
   71:         $this->logger->assertLogsContainsRegex('/Processing the inventory report /');
  114:         $this->assertEquals(S3ConsumerInterface::MSG_ACK, $actual);

DiscountOfficeItems • src/DealExpress/NotionsMarketingBundle/Tests/Command/CostUpdateCommandTest.php:
   81:         $this->assertEquals($content, $actual);
  121:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/NotionsMarketingBundle/Tests/Consumer/InactiveItemsConsumerTest.php:
   67:                         $test->assertTrue(is_string($stream), 'Requires a filename');
   69:                         $test->assertEquals($content, $actual, 'Stream content not equal');
  106:         $this->assertEquals(S3ConsumerInterface::MSG_ACK, $actual);
  116:         $this->assertEquals(S3ConsumerInterface::MSG_ACK, $actual);

DiscountOfficeItems • src/DealExpress/NotionsMarketingBundle/Tests/Consumer/InventoryConsumerTest.php:
   93:         $this->assertInstanceOf(S3ConsumerInterface::class, $this->fixture);
  115:         $this->logger->assertMessageLogged('info', 'Downloading the inventory file');
  116:         $this->logger->assertLogsContainsRegex('/Processing the inventory file /');
  162:         $this->assertEquals(S3ConsumerInterface::MSG_ACK, $actual);

DiscountOfficeItems • src/DealExpress/NotionsMarketingBundle/Tests/Consumer/InvoiceConsumerTest.php:
  60:                         $test->assertTrue(is_string($stream), 'Requires a filename');
  62:                         $test->assertEquals($content, $actual, 'Stream content not equal');
  92:         $this->assertEquals(S3ConsumerInterface::MSG_ACK, $actual);

DiscountOfficeItems • src/DealExpress/NotionsMarketingBundle/Tests/Consumer/TrackingConsumerTest.php:
  48:         $this->assertInstanceOf(S3ConsumerInterface::class, $this->fixture);
  58:         $this->logger->assertMessageLogged('info', 'Downloading the tracking file');
  59:         $this->logger->assertLogsContainsRegex('/Processing the tracking file /');
  79:         $this->assertEquals(S3ConsumerInterface::MSG_ACK, $actual);

DiscountOfficeItems • src/DealExpress/NotionsMarketingBundle/Tests/FileParser/TrackingImportParserTest.php:
  157:         $this->assertEquals($expectedCalls, $actualData);
  237:             $this->assertEquals($expectedCalls, $actualData);

DiscountOfficeItems • src/DealExpress/NotionsMarketingBundle/Tests/Invoice/CancellationEmailerTest.php:
   62:         $this->assertInstanceOf(Message::class, $actual);
   69:         $this->assertEquals('Canceled or Shorted Notions Marketing Invoice Lines', $actual->getSubject());
   70:         $this->assertEquals(['cron@officesupply.com' => 'OfficeSupply.com'], $actual->getFrom());
   71:         $this->assertEquals(['hdettmann@officesupply.com' => 'Heidi Dettmann'], $actual->getTo());
  215:         $this->assertEquals(implode(PHP_EOL, $expectedLines), $actual->getText());

DiscountOfficeItems • src/DealExpress/NotionsMarketingBundle/Tests/Service/Po/RequestTest.php:
  26:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/NotionsMarketingBundle/Tests/Service/Po/ResponseTest.php:
  55:         $this->assertEquals([], $actual);
  94:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/NotionsMarketingBundle/Tests/Service/Product/SkuDecoderTest.php:
  44:         $this->assertEquals($expected, ($this->fixture)($rawData));

DiscountOfficeItems • src/DealExpress/ReportBundle/Tests/Cost/CostUpdateConsumerTest.php:
   75:         $this->assertInstanceOf(S3ConsumerInterface::class, $this->fixture);
  116:         $this->assertEquals(S3ConsumerInterface::MSG_REJECT, $actual);
  182:         $this->assertEquals($expected, $actual);
  235:         $this->assertInstanceOf(Message::class, $actual);
  236:         $this->assertEquals($toList, $actual->getTo());
  237:         $this->assertEquals($fromList, $actual->getFrom());
  238:         $this->assertEquals($subject, $actual->getSubject());
  239:         $this->assertEquals($text, $actual->getText());
  249:         $this->assertEquals(S3ConsumerInterface::MSG_ACK, $actual);

DiscountOfficeItems • src/DealExpress/ReportBundle/Tests/Cost/CostUpdateParserTest.php:
  103:         $this->assertFalse($actual);
  251:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/ReportBundle/Tests/Cost/CostUpdateSummarizerTest.php:
  29:         $this->assertEquals($expected, $actual);
  40:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/ReportBundle/Tests/Price/CostLookupTest.php:
   50:         $this->assertArrayHasKey($productId, $actual);
   73:         $this->assertArrayHasKey($productId, $actual);
  102:         $this->assertEquals([$productId], array_keys($actual));
  128:         $this->assertEquals($expected, $actual);
  167:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/ReportBundle/Tests/Price/PriceLookupTest.php:
   77:         $this->assertEquals(array_fill(0, $count, 'Loss Leader'), $typeList);
   79:         $this->assertArraySubset($priceList, $actual);
   95:         $this->assertEquals(array_fill(0, $count, 'Manual'), $typeList);
   97:         $this->assertArraySubset($priceList, $actual);
  138:         $this->assertEquals($expected, $actual);
  161:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/ReportBundle/Tests/Price/Feed/LowMarkupPartitionerTest.php:
   52:         $this->assertInstanceOf(PartitionerInterface::class, $this->fixture);
   93:         $this->assertCorrectPartition(
  110:         $this->assertCorrectPartition(
  144:         $this->assertCorrectPartition(
  178:         $this->assertCorrectPartition(
  216:         $this->assertCorrectPartition(
  235:         $this->assertEquals(
  241:         $this->assertEquals(

DiscountOfficeItems • src/DealExpress/ReportBundle/Tests/Price/Feed/SilentPriceEncoderTest.php:
   72:         $this->assertEquals(null, $actual);
  314:             $this->assertNull($dataResponse);
  319:         $this->assertEquals($expected, stream_get_contents($dataResponse), $message);

DiscountOfficeItems • src/DealExpress/ReportBundle/Tests/Repository/ResultRepositoryTest.php:
   55:         $this->assertEquals(
   72:         $this->assertEquals(
  115:         $this->assertEquals(
  127:         $this->assertEquals(
  147:         $this->assertFalse($this->fixture->freshenResult($task));
  173:         $this->assertTrue($this->fixture->freshenResult($task));
  203:         $this->assertEquals($data, $this->fixture->getResult($task));
  204:         $this->assertEquals($data, $this->fixture->getResult($task, true));
  208:         $this->assertEquals($start, $end, 'Clock drifted');
  217:         $this->assertNull($this->fixture->getResult($task));
  222:         $this->assertEquals($start, $end, 'Clock drifted');
  231:         $this->assertNull($this->fixture->getResult($task, true));
  236:         $this->assertTrue($start < $end, 'Did not wait / block');
  266:         $this->assertEquals($data, $fixture->getResult($task, true));
  271:         $this->assertTrue($start < $end, 'Did not wait / block');

DiscountOfficeItems • src/DealExpress/ReportBundle/Tests/Request/SqsConsumerTest.php:
   46:         $this->assertInstanceOf(SqsConsumerInterface::class, $this->fixture);
   98:         $this->assertEquals(
  104:         $this->logger->assertEmptyLogs();
  124:         $this->logger->assertEmptyLogs();
  138:         $this->assertEquals(
  143:         $this->logger->assertLogsContains(SqsConsumer::INVALID_REQUEST);
  158:         $this->assertEquals(
  164:         $this->logger->assertLogsContains(SqsConsumer::INVALID_REQUEST);
  181:         $this->assertEquals(
  187:         $this->logger->assertLogsContains(SqsConsumer::UNKNOWN_TYPE.$reportType);

DiscountOfficeItems • src/DealExpress/ScraperBundle/Tests/Feed/EncoderTest.php:
  252:         $this->assertEquals(UrlGeneratorInterface::ABSOLUTE_URL, $absolute, 'Absolute url not generated');
  253:         $this->assertEquals([], $params, 'unexpected tracking url was added');

DiscountOfficeItems • src/DealExpress/ScraperBundle/Tests/Import/StrikeAPriceParserTest.php:
   33:         $this->assertInstanceOf(\Traversable::class, $actual);
   57:         $this->assertArrayHasKey('productId', $actual);
   58:         $this->assertArrayHasKey('source', $actual);
   59:         $this->assertArrayHasKey('name', $actual);
   60:         $this->assertArrayHasKey('price', $actual);
   61:         $this->assertArrayHasKey('lastSeen', $actual);
   63:         $this->assertEquals('StrikeAP', $actual['source']);
   79:         $this->assertEquals($expected, array_values($actual));
  118:         $this->assertSame($expected, array_values($actual));
  591:         $this->assertCount(count($expected), $actual);
  592:         $this->assertEquals($expected['productId'], $actual['productId']);
  593:         $this->assertEquals($expected['source'], $actual['source']);
  594:         $this->assertEquals($expected['name'], $actual['name']);
  595:         $this->assertEquals($expected['price'], $actual['price']);
  596:         $this->assertEquals($expected['lastSeen'], $actual['lastSeen']);

DiscountOfficeItems • src/DealExpress/SPRBundle/Tests/Command/InventoryRequestCommandTest.php:
  161:             $this->logger->assertLogsContains($line);
  177:             $this->logger->assertLogsContains($line);

DiscountOfficeItems • src/DealExpress/SPRBundle/Tests/Consumer/BufferPickupConsumerTest.php:
  54:         $this->assertEquals(ConsumerResponseInterface::MSG_ACK, $actual);

DiscountOfficeItems • src/DealExpress/SPRBundle/Tests/Consumer/CostConsumerTest.php:
   75:         $this->assertInstanceOf(S3ConsumerInterface::class, $this->fixture);
   99:         $this->assertEquals(S3ConsumerInterface::MSG_REJECT, $actual);
  159:         $this->assertStringStartsWith($prefix, $actual);
  160:         $this->assertStringEndsWith($append, $actual);
  179:         $this->assertStringStartsWith($prefix, $actual);
  180:         $this->assertStringEndsWith($append, $actual);
  199:         $this->assertStringStartsWith($prefix, $actual);
  200:         $this->assertStringEndsWith($append, $actual);
  219:         $this->assertStringStartsWith($prefix, $actual);
  220:         $this->assertStringEndsWith($append, $actual);
  263:         $this->assertInstanceOf(JoinIterator::class, $actual);
  303:         $this->assertEquals(S3ConsumerInterface::MSG_ACK, $actual);

DiscountOfficeItems • src/DealExpress/SPRBundle/Tests/Consumer/GspInventoryConsumerTest.php:
   93:                         $test->assertTrue(is_string($stream), 'Requires a filename');
   95:                         $test->assertEquals($content, $actual, 'Stream content not equal');
  114:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/SPRBundle/Tests/Consumer/InventoryUpdateConsumerTest.php:
  98:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/SPRBundle/Tests/Consumer/PickupSprConsumerTest.php:
   77:         $this->assertEquals(S3ConsumerInterface::MSG_ACK, $actual);
   86:         $this->assertEquals(S3ConsumerInterface::MSG_REJECT, $actual);
  108:         $this->assertEquals(S3ConsumerInterface::MSG_ACK, $actual);

DiscountOfficeItems • src/DealExpress/SPRBundle/Tests/Consumer/Prop65ConsumerTest.php:
   55:         $this->assertInstanceOf(S3ConsumerInterface::class, $this->fixture);
   65:         $this->assertEquals(S3ConsumerInterface::MSG_REJECT, $actual);
   78:         $this->assertEquals(S3ConsumerInterface::MSG_ACK, $actual);
  130:         $this->assertEquals($expected, $this->getInvocations($spy)[0]->getParameters()[0]['data']);

DiscountOfficeItems • src/DealExpress/SPRBundle/Tests/FileParser/CostTest.php:
  108:         $this->assertEquals($this->fixture, $this->fixture->process());
  156:         $this->assertEquals(2, $db->fetchColumn('select count(*) from costs'));
  162:         $this->assertEquals($this->fixture, $this->fixture->process());
  164:         $this->assertEquals(1, $db->fetchColumn('select count(*) from costs'));
  165:         $this->assertEquals('3009-01-01 01:01:01', $db->fetchColumn('select last_updated from costs'));
  221:         $this->assertEquals($productId, $actualProductList[0]);
  277:         $this->assertNotContains($productId, $actualProductList);
  302:         $this->assertEquals($expected, $results);
  314:         $this->assertEquals($expected, $results);
  481:         $this->assertEquals(0, $db->fetchColumn('select count(*) from costs'));

DiscountOfficeItems • src/DealExpress/SPRBundle/Tests/FileParser/InventoryTest.php:
  127:         $this->assertEquals(
  265:         $this->assertEquals(

DiscountOfficeItems • src/DealExpress/SynnexBundle/Tests/Command/ImportCommandTest.php:
  27:         $this->assertEquals('', $tester->getDisplay());

DiscountOfficeItems • src/DealExpress/SynnexBundle/Tests/Consumer/ImportConsumerTest.php:
  107:         $this->assertInstanceOf(S3ConsumerInterface::class, $this->fixture);
  230:         $this->assertEquals(S3ConsumerInterface::MSG_ACK, $actual);

DiscountOfficeItems • src/DealExpress/SynnexBundle/Tests/FileParser/CostTest.php:
   70:         $this->assertEquals($this->fixture, $actual);
  114:         $this->assertEquals(2, $db->fetchColumn('select count(*) from costs'));
  121:         $this->assertEquals($this->fixture, $actual);
  123:         $this->assertEquals(1, $db->fetchColumn('select count(*) from costs'));
  124:         $this->assertEquals('3009-01-01 01:01:01', $db->fetchColumn('select last_updated from costs'));
  146:         $this->assertEquals($expected, $resultsA);
  158:         $this->assertEquals($expected, $resultsB);
  283:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/TrimegaBundle/Tests/Parser/QuarterlySheetTest.php:
  152:         $this->assertEquals($skuList, $actualSkuList);
  156:                 $this->assertEquals($prefix, $entry['prefix']);
  157:                 $this->assertSame($accountList[$prefix], $entry['account']);
  185:         $this->assertEmpty($actual);
  186:         $this->assertStringContainsString('No Trimega Account', $messageList[0]);

DiscountOfficeItems • src/DealExpress/TrimegaBundle/Tests/Processor/CostImportProcessorTest.php:
   72:                     $this->assertEquals($content, $actual);
  134:         $this->assertInstanceOf(Message::class, $message);
  135:         $this->assertEquals($this->sendToList, array_keys($message->getTo()));
  136:         $this->assertStringContainsString($filename, $message->getSubject());
  137:         $this->assertStringNotContainsString($pathname, $message->getSubject());
  138:         $this->assertStringContainsString($chunkMessage, $message->getText());
  139:         $this->assertStringContainsString(array_keys($chunkList)[0], $message->getText());

DiscountOfficeItems • src/DealExpress/TrimegaBundle/Tests/Processor/InvoiceProcessorTest.php:
   99:         $this->assertInstanceOf(AbstractProcessor::class, $this->fixture);
  115:         $this->assertFalse($this->fixture->sendInvoice($invoice));
  117:         $this->testLogs->assertLogsContains(InvoiceProcessor::ERROR_NO_ESTIMATOR);
  138:         $this->assertFalse($this->fixture->sendInvoice($invoice));
  140:         $this->testLogs->assertLogsContains(InvoiceProcessor::ERROR_NO_EDICAP);
  211:         $this->assertTrue($this->fixture->sendInvoice($invoice));
  254:         $this->assertFalse($this->fixture->sendInvoice($invoice));

DiscountOfficeItems • src/DealExpress/TrimegaBundle/Tests/Processor/ProcessorTest.php:
   71:         $this->assertInstanceOf(AbstractProcessor::class, $this->fixture);
   92:         $otherLogger->assertLogsContains(Processor::ERROR_NO_ESTIMATOR);
  108:         $this->assertFalse($this->fixture->sendInvoice($invoice));
  110:         $this->testLogs->assertLogsContains(Processor::ERROR_NO_ESTIMATOR);
  138:         $this->assertEquals($result, $this->fixture->sendInvoice($invoice));
  168:         $this->assertEquals($result, $this->fixture->sendInvoice($invoice));

DiscountOfficeItems • src/DealExpress/USCBundle/Tests/Command/InventoryUpdateCommandTest.php:
  27:         $this->assertEquals('', $tester->getDisplay());
  40:         $this->assertEquals(

DiscountOfficeItems • src/DealExpress/USCBundle/Tests/Consumer/CostConsumerTest.php:
   97:         $this->assertInstanceOf(S3ConsumerInterface::class, $this->fixture);
  133:         $this->assertEquals(S3ConsumerInterface::MSG_REJECT, $actual);
  198:         $this->assertEquals($append, substr($actual, -strlen($append)));
  199:         $this->assertEquals($prefix, substr($actual, 0, strlen($prefix)));
  230:         $this->assertEquals(S3ConsumerInterface::MSG_REJECT, $actual);
  301:         $this->assertEquals(S3ConsumerInterface::MSG_ACK, $actual);

DiscountOfficeItems • src/DealExpress/USCBundle/Tests/Consumer/InventoryConsumerTest.php:
   61:         $this->assertInstanceOf(S3ConsumerInterface::class, $this->fixture);
   76:         $this->assertEquals(S3ConsumerInterface::MSG_ACK, $response);
   77:         $this->logs->assertEmptyLogs();
   92:         $this->assertEquals(S3ConsumerInterface::MSG_REJECT, $response);
   93:         $this->logs->assertEmptyLogs();
  108:         $this->assertEquals(S3ConsumerInterface::MSG_REQUEUE, $response);
  109:         $this->logs->assertLogsContains(InventoryConsumer::MSG_MISSING_FACILITY);
  156:         $this->assertEquals(
  164:         $this->assertEquals(
  188:         $this->assertEquals('processFacility', $this->getInvocations($spy)[0]->getMethodName());
  189:         $this->assertEquals('processInventory', $this->getInvocations($spy)[1]->getMethodName());
  202:         $this->logs->assertLogsContains(InventoryConsumer::MSG_FACILITY_START);
  203:         $this->logs->assertLogsContains(InventoryConsumer::MSG_FACILITY_END);
  204:         $this->logs->assertLogsContains(InventoryConsumer::MSG_INVENTORY_START);
  205:         $this->logs->assertLogsContains(InventoryConsumer::MSG_INVENTORY_END);
  217:         $this->assertEquals(S3ConsumerInterface::MSG_ACK, $actual);

DiscountOfficeItems • src/DealExpress/USCBundle/Tests/Consumer/TrackingConsumerTest.php:
  45:         $this->assertInstanceOf(S3ConsumerInterface::class, $this->fixture);
  54:         $this->assertEquals(S3ConsumerInterface::MSG_REJECT, $actual);
  56:         $this->logger->assertLogsContains(TrackingConsumer::ERROR_INVALID_DATA);
  73:         $this->assertEquals(S3ConsumerInterface::MSG_ACK, $actual);
  84:         $this->assertEquals($sampleExpected, $sampledActual);
  87:             $this->logger->assertLogsContains($message);
  90:             $this->logger->assertEmptyLogs();

DiscountOfficeItems • src/DealExpress/USCBundle/Tests/FileParser/CostTest.php:
   83:         $this->assertEquals($this->fixture, $this->fixture->process());
  128:         $this->assertEquals(2, $db->fetchColumn('select count(*) from costs'));
  134:         $this->assertEquals($this->fixture, $this->fixture->process());
  136:         $this->assertEquals(1, $db->fetchColumn('select count(*) from costs'));
  137:         $this->assertEquals('3009-01-01 01:01:01', $db->fetchColumn('select last_updated from costs'));
  160:         $this->assertEquals($expected, $results);
  172:         $this->assertEquals($expected, $results);

DiscountOfficeItems • src/DealExpress/USCBundle/Tests/FileParser/InventoryTest.php:
   75:         $this->assertEquals(
   96:         $this->assertEquals(
  176:         $this->assertNotEmpty($invocationList);
  188:         $this->assertTrue($setFlushed, 'Unflushed changes');
  192:         $this->assertEquals('markStart', $invocationList[0]);
  193:         $this->assertEquals('clearOldSupplierData', $lastCall);
  284:         $this->assertArraySubset($expected, $setZero);

DiscountOfficeItems • src/DealExpress/USCBundle/Tests/FileParser/TrackingTest.php:
  24:         $this->assertIsCallable($this->fixture);
  34:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/USCBundle/Tests/FileParser/TrackingXMLTest.php:
  27:         $this->assertEquals($expected, $this->fixture->parse($data));

DiscountOfficeItems • src/DealExpress/USCBundle/Tests/Import/AttributeNameIdMapCallbackTest.php:
   45:         $this->assertIsCallable($this->fixture);
   55:         $this->assertIsArray($actual);
   81:         $this->assertEquals($idList, $actual);
   92:         $this->assertGreaterThan($id, $resultA[0]);
   93:         $this->assertGreaterThan($resultA[0], $resultB[0]);
  102:         $this->assertEquals([DealExpressUSCBundle::PREFIX_ID.$id], $invocationA);
  105:         $this->assertEquals([DealExpressUSCBundle::PREFIX_ID.$id + 1], $invocationB);
  130:         $this->assertCount(3, $this->attributeRepo->findAll());
  133:         $this->assertEquals($expectedAttributeA, $actualAttributeA);
  136:         $this->assertEquals($expectedAttributeB, $actualAttributeB);

DiscountOfficeItems • src/DealExpress/USCBundle/Tests/Import/BrandDataSourceTest.php:
   32:         $this->assertEquals(
   53:         $this->assertEquals('1919', $valueList[1]['id']);
   54:         $this->assertEquals('3M™', $valueList[1]['name']);
   55:         $this->assertEquals('800-328-6276', $valueList[1]['phone']);
   56:         $this->assertEquals(
   63:                 $this->assertEquals(
   81:         $this->assertEquals($item, $this->fixture->getByVendorId($vendorId));
   88:         $this->assertNull($this->fixture->getByVendorId(uniqid()));
   95:         $this->assertCount(46, $this->fixture);
  102:         $this->assertEquals($start, $this->fixture->getStartPosition());
  106:         $this->assertCount(46 - $start, iterator_to_array($this->fixture));

DiscountOfficeItems • src/DealExpress/USCBundle/Tests/Import/CategoryDataSourceTest.php:
   42:         $this->assertEquals(
   63:         $this->assertEquals(
   75:         $this->assertEquals(
  114:         $this->assertEquals($item, $this->fixture->getByVendorId($vendorId));
  122:         $this->assertNull($this->fixture->getByVendorId(rand()));
  129:         $this->assertCount(14, $this->fixture);
  136:         $this->assertEquals($start, $this->fixture->getStartPosition());
  141:         $this->assertCount(14 - $start, iterator_to_array($this->fixture));

DiscountOfficeItems • src/DealExpress/USCBundle/Tests/Import/CategoryIdMapCallbackTest.php:
  37:         $this->assertIsCallable($this->fixture);
  46:         $this->assertIsArray($actual);
  75:         $this->assertEquals(

DiscountOfficeItems • src/DealExpress/USCBundle/Tests/Import/FetchDataTest.php:
   52:         $this->assertTrue($newFileset->isFinilized());
   53:         $this->assertNotSame($newFileset, $fileset);
   64:         $this->assertEmpty($newFileset->getFileList());
   75:         $this->assertEquals($fileset->getFileList(), $this->fixture->getDiscontinuedFileList());
  107:         $this->assertEquals($newFileSet->getUri($fileType), $storageName);
  185:         $this->assertNotEmpty($this->fixture->getNewFileList());
  186:         $this->assertEquals($newFileset->getFileList(), $this->fixture->getNewFileList());

DiscountOfficeItems • src/DealExpress/USCBundle/Tests/Import/ManufacturerDataSourceTest.php:
   54:         $this->assertEquals(
   73:         $this->assertEquals('82', $valueList[1]['id']);
   74:         $this->assertEquals('ACCO BRANDS, INC.', $valueList[1]['name']);
   75:         $this->assertEquals('https://www.accobrands.com', $valueList[1]['url']);
   88:         $this->assertEquals($item, $this->fixture->getByVendorId($vendorId));
   95:         $this->assertNull($this->fixture->getByVendorId(uniqid()));
  102:         $this->assertCount(3, $this->fixture);
  109:         $this->assertEquals($start, $this->fixture->getStartPosition());
  113:         $this->assertCount(3 - $start, iterator_to_array($this->fixture));

DiscountOfficeItems • src/DealExpress/USCBundle/Tests/Import/PrefixSeriesTest.php:
  29:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • src/DealExpress/USCBundle/Tests/Import/ProductDataSourceTest.php:
   59:         $this->assertEquals(
   94:         $this->assertEquals(['806222', '8090213'], $valueList[1]['Categories']);
   96:         $this->assertEquals(['No'], $valueList[0]['Attributes'][3211114053]);
   97:         $this->assertEquals(['No'], $valueList[0]['Attributes'][3311114053]);
   99:         $this->assertEquals(1, $valueList[1]['status']);
  101:         $this->assertEquals(0, $valueList[3]['status']);
  103:         $this->assertEquals(
  125:         $this->assertEquals(array_fill_keys(array_keys($actualList), $flagList), $actualList);
  140:         $this->assertEquals(['AVE5160'], $actualList);
  155:         $this->assertEquals($item, $this->fixture->getByVendorId($vendorId));
  164:         $this->assertNull($this->fixture->getByVendorId(rand()));
  171:         $this->assertCount(5, $this->fixture);
  178:         $this->assertEquals($start, $this->fixture->getStartPosition());
  182:         $this->assertEmpty(iterator_to_array($this->fixture));
  204:         $this->assertEquals($expectedList, $actualList);

DiscountOfficeItems • src/DealExpress/USCBundle/Tests/Import/RelationshipDataSourceTest.php:
  32:         $this->assertEquals(
  50:         $this->assertEquals(
  74:         $this->assertEquals($item, $this->fixture->getByVendorId($vendorId));
  81:         $this->assertNull($this->fixture->getByVendorId(uniqid()));
  88:         $this->assertCount(6, $this->fixture);
  95:         $this->assertEquals($start, $this->fixture->getStartPosition());
  99:         $this->assertCount(6 - $start, iterator_to_array($this->fixture));

DiscountOfficeItems • tests/library/Admin/OrderTestCase.php:
  46:         $this->assertInstanceOf(ScreeningInterface::class, $this->fixture);

DiscountOfficeItems • tests/library/Admin/Datastructures/HeapTest.php:
  17:         $this->assertInstanceOf(\SplHeap::class, $fixture);
  35:         $this->assertTrue($called, 'callback was not triggered');
  49:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • tests/library/Admin/DxBundle/Helper/ToolTipHelperTest.php:
  25:         $this->assertInstanceOf(Helper::class, $this->fixture);
  32:         $this->assertEquals('toolTip', $actual);
  42:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • tests/library/Admin/Edi/InventoryRefresh/NullRefreshTest.php:
  26:         $this->assertInstanceOf(AbstractInventoryRefresh::class, $this->fixture);
  35:         $this->assertNull($actual);
  42:         $this->assertNull($actual);

DiscountOfficeItems • tests/library/Admin/Edi/InventoryRefresh/RequestListenerTest.php:
  35:         $this->assertInstanceOf(EventSubscriberInterface::class, $this->fixture);
  44:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • tests/library/Admin/Edi/Order/Screening/AdditionalSecurityScreenerTest.php:
   42:         $this->logger->assertEmptyLogs();
  108:         $this->logger->assertMessageLogged($logLevel, $logMessage);
  163:         $this->logger->assertMessageLogged($logLevel, $logMessage);
  212:         $this->logger->assertMessageNotLogged(
  229:         $this->logger->assertMessageLogged(
  246:         $this->logger->assertMessageNotLogged(
  268:         $this->logger->assertMessageLogged($logLevel, $logMessage);
  311:         $this->logger->assertMessagesLogged(
  337:         $this->logger->assertEmptyLogs();
  443:         $this->logger->assertEmptyLogs();
  464:         $this->logger->assertEmptyLogs();
  502:         $this->logger->assertEmptyLogs();

DiscountOfficeItems • tests/library/Admin/Edi/Order/Screening/AutoLimitsScreenerTest.php:
   38:         $this->logger->assertEmptyLogs();
   52:         $this->logger->assertMessageLogged(
  101:         $this->logger->assertMessageLogged($level, $message);
  121:         $this->logger->assertEmptyLogs();
  130:         $this->logger->assertEmptyLogs();
  141:         $this->logger->assertMessageLogged(
  155:         $this->logger->assertEmptyLogs();
  170:         $this->logger->assertMessageLogged(
  188:         $this->logger->assertEmptyLogs();
  205:         $this->logger->assertEmptyLogs();
  217:         $this->logger->assertMessageLogged(
  252:         $this->logger->assertMessageLogged(

DiscountOfficeItems • tests/library/Admin/Edi/Order/Screening/AvsScreenerTest.php:
   36:         $this->logger->assertEmptyLogs();
   62:         $this->logger->assertMessageLogged(
   80:         $this->logger->assertMessageLogged(LogLevel::WARNING, $message);
  113:         $this->logger->assertEmptyLogs();

DiscountOfficeItems • tests/library/Admin/Edi/Order/Screening/CategoryPriceLimitScreenerTest.php:
   42:         $this->logger->assertEmptyLogs();
   78:         $this->logger->assertEmptyLogs();
  120:         $this->logger->assertMessageLogged(
  152:         $this->logger->assertMessageLogged(
  178:         $this->logger->assertEmptyLogs();
  212:         $this->logger->assertEmptyLogs();

DiscountOfficeItems • tests/library/Admin/Edi/Order/Screening/CollectionTest.php:
  39:         $this->assertInstanceOf(AbstractScreening::class, $this->fixture);

DiscountOfficeItems • tests/library/Admin/Edi/Order/Screening/KeywordScreenerTest.php:
  25:         $this->logger->assertEmptyLogs();
  37:         $this->logger->assertMessageLogged($logLevel, $logMessage);
  98:         $this->logger->assertMessagesLogged(

DiscountOfficeItems • tests/library/Admin/Edi/Order/Screening/NearFreeFreightScreenerTest.php:
   97:         $this->logger->assertMessageLogged(LogLevel::WARNING, $expected);
  127:         $this->logger->assertEmptyLogs();
  196:         $this->logger->assertEmptyLogs();
  233:         $this->logger->assertMessageLogged(LogLevel::WARNING, $expected);

DiscountOfficeItems • tests/library/Admin/Edi/Order/Screening/RestrictedSalesScreenerTest.php:
   46:         $this->assertInstanceOf(AbstractScreening::class, $this->fixture);
   97:         $this->logFactory->assertEmptyLogs();
  112:         $this->logFactory->assertEmptyLogs();
  164:         $this->logFactory->assertMessagesLogged($expectedResponse);
  201:         $this->logFactory->assertMessageLogged(LogLevel::WARNING, $expectedResponse);

DiscountOfficeItems • tests/library/Admin/Edi/Order/Screening/SimpleScreenerTest.php:
   53:         $this->logger->assertEmptyLogs();
   73:         $this->logger->assertMessageLogged($logLevel, $logMessage);
  146:         $this->logger->assertMessagesLogged(
  158:         $this->logger->assertEmptyLogs();
  187:         $this->logger->assertEmptyLogs();
  213:         $this->logger->assertMessageLogged(
  234:         $this->logger->assertEmptyLogs();
  264:         $this->logger->assertMessageLogged(
  301:         $this->logger->assertMessageLogged(
  407:         $this->logger->assertEmptyLogs();
  478:         $this->logger->assertMessageLogged(
  519:         $this->logger->assertLogsEqual($expected);
  685:         $this->logger->assertEmptyLogs();

DiscountOfficeItems • tests/library/Admin/Edi/Order/Screening/SlowExpressProcessingScreenerTest.php:
  126:         $this->logger->assertMessageLogged(LogLevel::WARNING, $message);

DiscountOfficeItems • tests/library/Admin/Edi/Order/Screening/WatchlistScreenerTest.php:
   50:         $this->logger->assertEmptyLogs();
   66:         $this->logger->assertEmptyLogs();
   79:         $this->logger->assertEmptyLogs();
  104:         $this->logger->assertMessagesLogged($expected);
  118:         $this->logger->assertEmptyLogs();

DiscountOfficeItems • tests/library/Admin/Edi/Order/Screening/WhitelistAwareCollectionTest.php:
  58:         $this->assertInstanceOf(Collection::class, $this->fixture);

DiscountOfficeItems • tests/library/Admin/Edi/Processor/AbstractProcessorTest.php:
  26:         $this->assertInstanceOf(ProcessorInterface::class, $this->fixture);
  35:         $this->assertSame($this->fixture, $actual);
  46:         $this->assertSame($logger, $actual);
  53:         $this->assertNull($actual);

DiscountOfficeItems • tests/library/Admin/Edi/Processor/CollectionTest.php:
   54:         $this->assertNull($actual);
   65:         $this->assertSame($logger, $actual);
   74:         $this->assertSame($this->fixture, $actual);
  106:         $this->assertSame($this->fixture, $actual);
  140:         $this->assertSame($processorB, $actual);
  156:         $this->assertSame($processorB, $actual);
  168:         $this->assertNull($actual);
  175:         $this->assertNull($actual);
  202:         $this->assertTrue($actual);
  226:         $this->assertFalse($actual);
  254:         $this->assertTrue($actual);
  266:         $this->assertTrue($actual);
  276:         $this->assertTrue($actual);
  295:         $this->assertFalse($actual);
  296:         $this->logger->assertMessageLogged(LogLevel::CRITICAL, 'Missing processor for method ['.$methodB.']');
  435:         $this->assertEquals($response, $actual);
  436:         $this->logger->assertMessagesLogged($expectedLog);
  675:         $this->assertFalse($actual);
  676:         $this->logger->assertMessagesLogged(

DiscountOfficeItems • tests/library/Admin/Edi/Processor/FixedProcessorTest.php:
   27:         $this->assertInstanceOf(AbstractProcessor::class, $this->fixture);
   34:         $this->assertSame($this->fixture, $actual);
   41:         $this->assertSame($this->fixture, $actual);
  116:         $this->assertTrue($actual);

DiscountOfficeItems • tests/library/Admin/Edi/Processor/NullSendOnlyProcessorTest.php:
  26:         $this->assertInstanceOf(AbstractProcessor::class, $this->fixture);
  46:         $this->assertTrue($actual);

DiscountOfficeItems • tests/library/Admin/Edi/Processor/PdfToEmailTest.php:
  44:         $this->assertInstanceOf(ProcessorInterface::class, $this->fixture);
  78:         $this->assertInstanceOf(Message::class, $actual);
  79:         $this->assertEquals("Invoice: {$orderId}-{$invoiceId} via {$supplierMethod}", $actual->getSubject());
  80:         $this->assertEquals("Invoice: {$orderId}-{$invoiceId} via {$supplierMethod}", $actual->getText());
  81:         $this->assertEquals(['cron@officesupply.com' => 'System'], $actual->getFrom());
  82:         $this->assertEquals(['orders@officesupply.com' => 'Orders'], $actual->getTo());
  84:         $this->assertCount(1, $actual->getAttachmentList());
  85:         $this->assertInstanceOf(Attachment::class, $actual->getAttachmentList()[0]);
  86:         $this->assertEquals($fileName, $actual->getAttachmentList()[0]->getName());
  87:         $this->assertEquals($request, $actual->getAttachmentList()[0]->getContent());
  88:         $this->assertEquals('application/pdf', $actual->getAttachmentList()[0]->getContentType());

DiscountOfficeItems • tests/library/Admin/Edi/Processor/PdfToPrinterTest.php:
   88:         $this->assertFalse($actual);
  104:         $this->assertTrue($actual);

DiscountOfficeItems • tests/library/Admin/Edi/Processor/RequireVerificationProcessorTest.php:
   35:         $this->assertInstanceOf(ProcessorInterface::class, $this->fixture);
   48:         $this->assertSame($logger, $actual);
   61:         $this->assertSame($this->fixture, $actual);
   96:         $this->assertTrue($hasFlags);
  122:         $this->assertTrue($line->hasFlags($flags));
  140:         $this->assertFalse($hasFlags);
  157:         $this->assertEquals($response, $actual);

DiscountOfficeItems • tests/library/Admin/Edi/Processor/TaskTest.php:
   35:         $this->assertInstanceOf(\Dx_Message_Task::class, $this->fixture);
   47:         $this->assertEquals('Send invoices for '.$orderId, $actual);
   59:         $this->assertEquals($orderId, $actual);
   70:         $this->assertEquals($tagList, $actual);
   77:         $this->assertEquals($this->suggestion, $actual);
   89:         $this->assertEquals($data, $actual);
  114:         $this->assertEquals($expected, $actual);
  123:         $this->assertFalse($actual);
  133:         $this->assertFalse($actual);
  140:         $this->assertTrue($actual);

DiscountOfficeItems • tests/library/Admin/Edi/Request/MfgDirectPdfTest.php:
   71:         $this->assertInstanceOf(Pdf::class, $this->fixture);
  122:         $this->assertEquals(['details' => $expected], $params);
  153:         $this->assertEquals(['details' => $expected], $params);
  215:         $this->assertEquals(['details' => $expected], $params);
  251:         $this->assertEquals(['details' => $expected], $params);

DiscountOfficeItems • tests/library/Admin/Edi/Request/PdfTest.php:
   91:         $this->assertEquals(['details' => $expected], $params);
  120:         $this->assertEquals(['details' => $expected], $params);
  218:         $this->assertEquals($response, $actual);
  240:         // Not using $this->assertContains since $content is long, unreadable, and relativealy useless
  241:         // and it is output when the test fails via $this->assertContains
  242:         $this->assertTrue(strpos($content, $expectedText) !== false, 'Missing expected text');
  247:         $this->assertSame($invoiceObject, $actualDetails->invoice);
  248:         $this->assertEquals($invoiceObject->getInvoiceLines(), $actualDetails->lines);

DiscountOfficeItems • tests/library/Admin/Edi/Request/TrimegaPdfTest.php:
   71:         $this->assertInstanceOf(Pdf::class, $this->fixture);
  119:         $this->assertEquals(['details' => $expected], $params);
  149:         $this->assertEquals(['details' => $expected], $params);
  205:         $this->assertEquals(['details' => $expected], $params);
  238:         $this->assertEquals(['details' => $expected], $params);

DiscountOfficeItems • tests/library/Admin/Order/PdfTest.php:
  272:         $this->assertEquals($expected, $actual);
  556:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • tests/library/Admin/Order/Filter/EmailTest.php:
  31:         $this->assertEquals($email, $actual);
  42:         $this->assertEquals($email, $actual);
  53:         $this->assertEquals($email, $actual);

DiscountOfficeItems • tests/library/Admin/Order/Filter/NewOrderTest.php:
   69:         $this->assertEquals(' ', $output['OrderNumber']);
   70:         $this->assertEquals(' ', $output['BillingName']);
   71:         $this->assertEquals(' ', $output['ShippingName']);
   89:         $this->assertEquals($orderId, $output['OrderNumber']);
   90:         $this->assertEquals($billingName, $output['BillingName']);
   91:         $this->assertEquals($shippingName, $output['ShippingName']);
   99:         $this->assertEquals([], $output['order_confirmation_data']['order_line_list']);
  113:         $this->assertEquals($expected, $actualList);
  202:         $this->assertEquals([], $output['order_confirmation_data']['subtotal_list']);
  240:         $this->assertEquals($expectedList, $actualList);
  278:         $this->assertEquals($expectedList, $actualList);
  312:         $this->assertEquals($expectedList, $actualList);
  313:         $this->assertEquals($totalValue, $output['order_confirmation_data']['total']);

DiscountOfficeItems • tests/library/Admin/Order/Filter/OrderCancellationTest.php:
  44:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • tests/library/Admin/Order/Filter/OrderConfirmationTest.php:
  144:         $this->assertEquals(3, count($productList));
  173:         $this->assertCorrectFieldList([], $actual);
  185:         $this->assertCorrectFieldList(['orderNumber' => $orderId], $actual);
  200:         $this->assertCorrectFieldList(['isSubscription' => $isSubscription], $actual);
  211:         $this->assertCorrectFieldList(['firstName' => $value], $actual);
  222:         $this->assertCorrectFieldList(['billingAddress' => $value], $actual);
  233:         $this->assertCorrectFieldList(['billingPhone' => $value], $actual);
  244:         $this->assertCorrectFieldList(['shippingAddress' => $value], $actual);
  255:         $this->assertCorrectFieldList(['shippingPhone' => $value], $actual);
  339:         $this->assertCorrectFieldList(['suggestedProducts' => [$productListing]], $actual);
  361:         $this->assertCorrectFieldList($expected, $actual);
  548:         $this->assertCorrectFieldList($expected, $actual);
  579:         $this->assertEquals(array_merge($defaultFieldList, $expected), $actual);

DiscountOfficeItems • tests/library/Admin/Order/Filter/OrderReshippedTest.php:
  120:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • tests/library/Admin/Order/Filter/OrderShippedTest.php:
  136:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • tests/library/Admin/Order/Filter/SuggestionToEmailTest.php:
   44:         $this->assertEquals($email, $actual);
   72:         $this->assertEquals($email, $actual);
  102:         $this->assertEquals($email, $actual);

DiscountOfficeItems • tests/library/Admin/Order/Listener/WorkflowOnNewOrderTest.php:
  47:         $this->assertInstanceOf(EventSubscriberInterface::class, $this->fixture);
  54:         $this->assertEquals(['onNewOrder' => 'onNewOrder'], $actual);

DiscountOfficeItems • tests/library/Admin/Service/StatusManagerTest.php:
   63:         $this->assertTrue($actual);
   84:         $this->assertTrue($actual);
  148:         $this->assertTrue($actual);
  170:         $this->assertFalse($actual);
  185:         $this->assertFalse($actualA);
  188:         $this->assertTrue($actualB);
  212:         $this->assertTrue($actual);
  264:         $this->assertTrue($actual);

DiscountOfficeItems • tests/library/Admin/Spr/Po/HardCodeDcRequestTest.php:
  43:         $this->assertEquals($expected, $request->invoiceToRequest($invoiceObject));

DiscountOfficeItems • tests/library/Admin/Spr/Po/ProcessTest.php:
  118:                     $this->assertNotEmpty($lock);
  156:                     $this->assertStringStartsWith('/in/ftpdoi.', $filename);
  159:                     $this->assertEquals($expected, $actual);
  167:         $this->assertEquals('Invoiced', $invoice->getState('state'), 'Invoice state was not updated');
  228:         $this->assertTrue(is_object($invoice), 'Processor failed');
  231:         $this->assertGreaterThan(0, count($invoiceLines), 'Failed to reload results');
  233:             $this->assertEquals(
  319:         $this->assertTrue(is_object($invoice), 'Processor failed');
  322:         $this->assertGreaterThan(0, count($invoiceLines), 'Failed to reload results');
  325:                 $this->assertEquals(
  331:                 $this->assertEquals(
  418:         $this->assertTrue(is_object($invoice), 'Processor failed');
  421:         $this->assertGreaterThan(0, count($invoiceLines), 'Failed to reload results');
  429:         $this->assertEquals(
  500:         $this->assertTrue(is_object($invoice), 'Processor failed');
  503:         $this->assertGreaterThan(0, count($invoiceLines), 'Failed to reload results');
  506:                 $this->assertEquals(
  512:                 $this->assertEquals(
  561:         $this->assertTrue(is_object($invoice), 'Processor failed');
  564:         $this->assertGreaterThan(0, count($invoiceLines), 'Failed to reload results');
  567:             $this->assertEquals(
  603:         $this->assertTrue(is_object($invoice), 'Processor failed to return invoice');
  605:         $this->mockLogger->assertEmptyLogs();
  636:         $this->assertNull($actual, 'Processor did not fail gracefully');
  638:         $this->mockLogger->assertLogsContains($logMessage);
  671:             $this->mockLogger->assertLogsContains($logMessage);
  674:             $this->mockLogger->assertEmptyLogs();
  707:         $this->assertTrue(is_object($invoice), 'Processor failed to return invoice');
  709:         $this->assertEquals('Failed', $invoice->getState());

DiscountOfficeItems • tests/library/Admin/Spr/Po/RequestTest.php:
  44:         $this->assertEquals($expected, $request->invoiceToRequest($invoiceObject));

DiscountOfficeItems • tests/library/Admin/Spr/Po/ResponseTest.php:
   38:             $this->assertEquals($value, $actual[$field]);
   47:         $this->assertEquals('698807-1107-01', $this->fixture->getFullInvoiceId());
   67:         $this->assertEquals('698807', $this->fixture->getOrderId());
   97:         $this->assertEquals(16, $this->fixture->getDcCode());
  105:         $this->assertEquals('16767058', $this->fixture->getPickTicket());
  177:         $this->assertEquals(count($expected), count($actual));
  216:         $this->assertEquals(count($expected), count($actual));
  227:         $this->assertTrue($this->fixture->isSuccess());
  228:         $this->assertEquals('ACCEPTED', trim($this->fixture->getConfirmationMessage()));
  236:         $this->assertFalse($this->fixture->isSuccess());
  237:         $this->assertEquals('DUPLICATE TRANSMISSION DETECTED', trim($this->fixture->getConfirmationMessage()));
  243:         $this->assertFalse($this->fixture->isSuccess());
  249:         $this->assertEquals('No data in response', $this->fixture->getConfirmationMessage());
  257:         $this->assertEquals('', $this->fixture->getConfirmationMessage());

DiscountOfficeItems • tests/library/Admin/Supplier/Estimator/AbstractEstimator2Test.php:
  247:                 $this->assertEquals(

DiscountOfficeItems • tests/library/Admin/Supplier/Estimator/AbstractEstimatorTest.php:
  328:         $this->assertEquals([1 => 100], $summary);
  349:         $this->assertEquals(0, count($actual), 'Too much');
  382:         $this->assertEquals($cost, $this->fixture->getProductCostObj($line));
  383:         $this->assertEquals($originalCost, $this->fixture->getProductCost($line), 'Original Cost is not matching');
  386:         $this->assertEquals($newCost, $this->fixture->getProductCost($line), 'New Cost is not matching');
  404:         $this->assertInstanceOf(
  408:         $this->assertEquals(INF, $this->fixture->getProductCost($line));
  435:         $this->assertNotInstanceOf(
  441:         $this->assertEquals($cost, $this->fixture->getProductCostObj($line));
  442:         $this->assertEquals(500000, $this->fixture->getProductCost($line));
  449:         $this->assertEquals(0, $this->fixture->getProductRebate($mock));
  456:         $this->assertEquals(0, $this->fixture->getProductPenalty($mock));
  463:         $this->assertEquals(0, $this->fixture->getInvoicePenalty($mock));
  471:         $this->assertEquals(1, $this->fixture->getBoxCount($mock));
  523:         $this->assertEquals(80005, $this->fixture->getInvoiceShippingTime($invoice));
  544:         $this->assertEquals(INF, $this->fixture->getShippingTime($dc, $address));
  568:         $this->assertEquals($expected, $this->fixture->getShippingTime($dc, $address));

DiscountOfficeItems • tests/library/Admin/Supplier/Estimator/AbstractSprTest.php:
  268:                 $this->assertEquals(
  284:                 $this->assertEquals(

DiscountOfficeItems • tests/library/Admin/Supplier/Estimator/CollectionCollectionTest.php:
  51:         $this->assertEquals($testA, $this->collection->getEstimator('Test - A'));
  52:         $this->assertEquals($testB, $this->collection->getEstimator('Test - B'));
  53:         $this->assertEquals(null, $this->collection->getEstimator('Test - C'));

DiscountOfficeItems • tests/library/Admin/Supplier/Estimator/CollectionTest.php:
  102:         $this->assertEquals($expected, $actual);
  191:         $this->assertEquals($expected, $actual);
  205:         $this->assertEquals($testA, $this->collection->getEstimator('Test - A'));
  206:         $this->assertEquals($testB, $this->collection->getEstimator('Test - B'));
  207:         $this->assertEquals(null, $this->collection->getEstimator('Test - C'));
  240:         $this->assertEquals($expected, $actual);
  388:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • tests/library/Admin/Supplier/Estimator/CostInventoryReporterTest.php:
   87:         $this->assertInstanceOf(NullCost::class, $actual);
  107:         $this->assertInstanceOf(NullCost::class, $actual);
  136:         $this->assertInstanceOf(NullCost::class, $actual);
  182:         $this->assertInstanceOf(NullCost::class, $actual);
  226:         $this->assertInstanceOf(NullCost::class, $actual);
  268:         $this->assertSame($cost, $actual);
  310:         $this->assertSame($cost, $actual);
  322:         $this->assertEquals($expectedSku, $actual->getSku(), 'Did not get expected cost');
  559:         $this->assertEquals([], $actual);
  575:             $this->assertInstanceOf(Dx_Supplier_DC::class, $actual[$key]['dc']);
  579:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • tests/library/Admin/Supplier/Estimator/DynamicBulkCollectionTest.php:
  138:         $this->assertEquals([], $actual);
  163:         $this->assertEquals([], $actual);
  196:         $this->assertEquals([$accountIdA => $estimatorA], $actual);
  232:         $this->assertEquals([$accountIdA => $estimatorA], $actual);
  268:         $this->assertEquals([], $actual);
  304:         $this->assertEquals([], $actual);
  340:         $this->assertEquals([], $actual);
  406:         $this->assertEquals([], $actual);
  431:         $this->assertEquals([], $actual);
  464:         $this->assertEquals([$accountIdA => $estimatorA], $actual);
  500:         $this->assertEquals([$accountIdA => $estimatorA], $actual);
  536:         $this->assertEquals([], $actual);
  572:         $this->assertEquals([], $actual);
  608:         $this->assertEquals([], $actual);

DiscountOfficeItems • tests/library/Admin/Supplier/Estimator/IngramTest.php:
   55:         $this->assertEquals('Ingram', $actual);
   77:         $this->assertEquals(0, $actual);
  101:         $this->assertEquals($quantity * $costValue * 10, $actual);

DiscountOfficeItems • tests/library/Admin/Supplier/Estimator/MfgDirectTest.php:
   90:         $this->assertEquals('/^MfgDirect - \\(([0-9]+)\\)/', $regex);
  112:         $this->assertEquals($expectedLabel, $actualLabel);
  142:         $this->assertEquals($expectedShippingCost, $cost, 'Cost not of expected class type');
  210:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • tests/library/Admin/Supplier/Estimator/NotionsMarketingTest.php:
  57:         $this->assertEquals('Notions Marketing', $label);
  90:         $this->assertEquals($expectedCost, $cost);

DiscountOfficeItems • tests/library/Admin/Supplier/Estimator/OfficeDepotTest.php:
  105:         $this->assertInstanceOf(AbstractEstimator::class, $this->fixture);
  112:         $this->assertEquals('Office Depot', $actual);
  254:         $this->assertCount(1, $actual);
  255:         $this->assertEquals($qty, $actual[$dc]);
  268:         $this->assertCount(1, $actual);
  269:         $this->assertEquals(OfficeDepot::EXCLUSIVE_FAKE_INVENTORY, $actual[$dc]);
  294:         $this->assertInstanceOf(NullCost::class, $actual);
  306:         $this->assertInstanceOf(NullCost::class, $actual);
  320:         $this->assertInstanceOf(NullCost::class, $actual);
  334:         $this->assertSame($cost, $actual);
  364:         $this->assertInstanceOf(NullCost::class, $actual);
  379:         $this->assertSame($cost, $actual);
  393:         $this->assertSame($cost, $actual);
  425:         $this->assertEquals($expected, $compare);
  458:         $this->assertEquals($expected, $compare);
  490:         $this->assertEquals($expected, $compare);
  557:         $this->assertEquals($expected, $actual);
  614:         $this->assertIsArray($actual);
  615:         $this->assertEquals($expected, $actual);
  696:         $this->assertEquals(0, $actual[$dc]);

DiscountOfficeItems • tests/library/Admin/Supplier/Estimator/RequireRelatedTest.php:
   72:         $this->assertEstimatorSet($expected, $this->fixture->getEstimatorsForInvoice($invoice));
  104:         $this->assertEstimatorSet($expected, $this->fixture->getEstimatorsForInvoiceIgnoreMinimum($invoice));
  163:         $this->assertEquals($est, $this->fixture->getEstimator($label));
  178:         $this->assertEquals($this->fixture, $this->fixture->addEstimator($est));
  213:         $this->assertEquals(
  251:         $this->assertEquals(
  272:         $this->assertEquals($expected, $actualLabel, $message);

DiscountOfficeItems • tests/library/Admin/Supplier/Estimator/SprCartonTest.php:
   74:         $this->assertEquals('SPR - Carton Program', $this->estimator->getMethodLabel());
  129:         $this->assertEquals($cost, $actual);
  130:         $this->assertEquals($unitCost, $actual->getCost());

DiscountOfficeItems • tests/library/Admin/Supplier/Estimator/SprGspTest.php:
  37:         $this->assertEquals('SPR GSP', $this->fixture->getMethodLabel());

DiscountOfficeItems • tests/library/Admin/Supplier/Estimator/SprHeavyTest.php:
  36:         $this->assertEquals('SPR', $this->fixture->getMethodLabel());

DiscountOfficeItems • tests/library/Admin/Supplier/Estimator/StoreSpecificCollectionTest.php:
   44:         $this->assertEquals([], $actual);
   57:         $this->assertEquals([], $actual);
   79:         $this->assertSame([$estimator], $actual);
   94:         $this->assertEquals([], $actual);
  107:         $this->assertEquals([], $actual);
  129:         $this->assertSame([$estimator], $actual);
  149:         $this->assertEquals($expected, $actual);
  158:         $this->assertNull($actual);
  189:         $this->assertEquals([], $actual);
  215:         $this->assertEquals($expected, $actual);
  229:         $this->assertEquals([], $actual);
  250:         $this->assertEquals([], $actual);
  276:         $this->assertEquals($expected, $actual);
  290:         $this->assertEquals([], $actual);

DiscountOfficeItems • tests/library/Admin/Supplier/Estimator/SynnexTest.php:
  52:         $this->assertEquals('Synnex', $actual);
  74:         $this->assertEquals(0, $actual);
  98:         $this->assertEquals($quantity * $costValue * 10, $actual);

DiscountOfficeItems • tests/library/Admin/Supplier/Estimator/TrimegaTest.php:
   96:         $this->assertEquals('/^Trimega - \\(([0-9]+)\\)/', $regex);
  118:         $this->assertEquals($expectedLabel, $actualLabel);
  144:         $this->assertEquals($expectedShippingCost, $cost, 'Cost not of expected class type');
  210:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • tests/library/Admin/Supplier/Estimator/UscTest.php:
  56:         $this->assertEquals($this->label, $actual);

DiscountOfficeItems • tests/library/Admin/Supplier/Estimator/WarehouseTest.php:
  35:         $this->assertEquals('Warehouse', $this->fixture->getMethodLabel());

DiscountOfficeItems • tests/library/Admin/Supplier/Estimator/BoxStrategy/PackSizeTest.php:
  52:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • tests/library/Admin/Supplier/Suggester/AbstractProxyDecoratorTest.php:
  33:         $this->assertInstanceOf(SuggesterInterface::class, $this->fixture);
  62:         $this->assertSame($result, $this->fixture->createSuggestion($invoice));
  75:         $this->assertSame($result, $this->fixture->getAvailableEstimators($invoice));

DiscountOfficeItems • tests/library/Admin/Supplier/Suggester/AbstractSuggesterTest.php:
  248:         $this->assertEquals($expected, $actual);
  284:         $this->assertEquals($expected, $actual);
  293:         $this->assertInstanceOf(Suggestion::class, $actual);
  336:         $this->assertEquals($expectedList, $actual);
  387:         $this->assertEquals($estimatorList, $actual);

DiscountOfficeItems • tests/library/Admin/Supplier/Suggester/CheapestTest.php:
  372:                 $this->assertEquals($count, count($invoices), 'Invoice count does not match');
  388:                 $this->assertTrue(isset($invoices[$method]), "Method [{$method}] was not used");
  393:                 $this->assertEquals($summary, $actual);

DiscountOfficeItems • tests/library/Admin/Supplier/Suggester/DeltaOverlap2Test.php:
  17:         $this->assertEquals($expected, DeltaOverlap::heapSort($a, $b));

DiscountOfficeItems • tests/library/Admin/Supplier/Suggester/DeltaOverlapTest.php:
  644:                 $this->assertEquals($count, count($invoices), 'Invoice count does not match');
  660:                 $this->assertTrue(isset($invoices[$method]), "Method [{$method}] was not used");
  665:                 $this->assertEquals($summary, $actual);

DiscountOfficeItems • tests/library/Admin/Supplier/Suggester/FreightFulfillmentDecoratorTest.php:
   43:         $this->assertInstanceOf(SuggesterInterface::class, $this->fixture);
   87:         $this->assertSame($suggestion, $actualSuggestion);
   88:         $this->assertSame($invoiceMethod, $suggestedInvoice->getSupplierMethod());
  181:         $this->assertSame($expectedSuggestion, $actualSuggestion);

DiscountOfficeItems • tests/library/Admin/Supplier/Suggester/FullestTest.php:
  366:                 $this->assertEquals($count, count($invoices), 'Invoice count does not match');
  382:                 $this->assertContains($method, array_keys($invoices), "Method [{$method}] was not used");
  387:                 $this->assertEquals($summary, $actual);

DiscountOfficeItems • tests/library/Admin/Supplier/Suggester/FuzzyLogicBulkOrdersTest.php:
  355:         $this->assertEquals(['Essendant'], $supplierList);

DiscountOfficeItems • tests/library/Admin/Supplier/Suggester/FuzzyLogicFreightTest.php:
  341:                 $this->assertEquals($count, count($invoices), 'Invoice count does not match');
  357:                 $this->assertTrue(isset($invoices[$method]), "Method [{$method}] was not used");
  362:                 $this->assertEquals($summary, $actual);

DiscountOfficeItems • tests/library/Admin/Supplier/Suggester/FuzzyLogicTest.php:
  1363:                 $this->assertEquals($count, count($invoices), 'Invoice count does not match');
  1379:                 $this->assertTrue(isset($invoices[$method]), "Method [{$method}] was not used");
  1384:                 $this->assertEquals($summary, $actual);

DiscountOfficeItems • tests/library/Admin/Supplier/Suggester/SimpleOnlyDecoratorTest.php:
  34:         $this->assertInstanceOf(SuggesterInterface::class, $this->fixture);
  47:         $this->assertSame($result, $this->fixture->createSuggestion($invoice));
  63:         $this->assertSame($result, $this->fixture->createSuggestion($invoice));
  77:         $this->assertNull($this->fixture->createSuggestion($invoice));
  94:         $this->assertSame($result, $this->fixture->createSuggestion($invoice));

DiscountOfficeItems • tests/library/Admin/Supplier/Suggester/SuggesterCollectionTest.php:
   45:         $this->assertSame($suggester, $actual);
   86:         $this->assertSame($estimatorList, $actual);
  298:         $this->assertSame($suggestionA, $actual);
  312:         $this->assertNull($actual);

DiscountOfficeItems • tests/library/Admin/Supplier/Suggester/Compare/CompareClosureTest.php:
  33:         $this->assertInstanceOf(CompareInterface::class, $this->fixture);
  59:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • tests/library/Admin/Supplier/Suggester/Compare/CompareScoreClosureTest.php:
  33:         $this->assertInstanceOf(CompareInterface::class, $this->fixture);
  63:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • tests/library/Admin/Supplier/Suggester/Compare/ScoreFactorsTest.php:
   38:         $this->assertInstanceOf(CompareInterface::class, $this->fixture);
   60:         $this->assertEquals($expected, $actual);
  109:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • tests/library/Admin/Usc/Po/ProcessTest.php:
  108:                     $this->assertNotEmpty($lock);
  183:                     $this->assertEquals($invoice, $param);
  239:         $this->assertGreaterThan(0, count($invoiceLines), 'Failed to reload results');
  241:             $this->assertEquals(
  247:         $this->assertEquals('Invoiced', $invoice->getState(), 'Invoice state was not updated');
  313:             $this->assertEquals($expected[$idx]['sku'], $line->getSku());
  314:             $this->assertEquals($expected[$idx]['cost'], $line->getCost());
  315:             $this->assertEquals($expected[$idx]['dc'], $line->getDcCode());
  316:             $this->assertEquals($expected[$idx]['unit'], $line->getUnit());
  340:         $this->assertNull($actual);
  341:         $this->logger->assertMessageLogged(LogLevel::ERROR, $message);
  368:             $this->assertNull($actual);
  370:             $this->assertInvoiceLines($expected, $actual);
  373:         $this->logger->assertEmptyLogs();
  711:         $this->assertNull($actual);
  712:         $this->logger->assertMessageLogged(LogLevel::ERROR, 'Invoice not found for id: ['.$invoiceId.']');
  864:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • tests/library/Admin/Usc/Po/RecordTest.php:
   58:         $this->assertEquals($remainder, $actual);
   61:             $this->assertEquals($value, $this->object[$field]);
  123:         $this->assertEquals($expected, $this->object->offsetExists($field));
  159:         $this->assertEquals($expectedDefault, $this->object[$field]);
  162:         $this->assertEquals($expectedValue, $this->object[$field]);
  165:         $this->assertEquals($expectedUnset, $this->object[$field]);
  190:         $this->assertEquals($expected, $actual);
  203:         $this->assertEquals($expected, ''.$this->object);

DiscountOfficeItems • tests/library/Admin/Usc/Po/RequestTest.php:
  38:         $this->assertEquals($expected, $request->invoiceToRequest($invoiceObject));

DiscountOfficeItems • tests/library/Admin/Usc/Po/ResponseTest.php:
   38:             $this->assertEquals($value, $actual[$field]);
   47:         $this->assertEquals('695402-110721-01', $this->fixture->getFullInvoiceId());
   55:         $this->assertEquals('695402', $this->fixture->getOrderId());
   63:         $this->assertEquals(51, $this->fixture->getDcCode());
   71:         $this->assertEquals('517DZCR', $this->fixture->getPickTicket());
   93:         $this->assertEquals(count($expected), count($actual));
  105:         $this->assertEquals('1444347-01', $this->fixture->getFullInvoiceId());
  106:         $this->assertEquals('1444347', $this->fixture->getOrderId());
  107:         $this->assertEquals('23', $this->fixture->getDcCode());
  108:         $this->assertEquals(null, $this->fixture->getPickTicket());
  109:         $this->assertTrue($this->fixture->isSuccess());
  110:         $this->assertEquals('ACCEPTED         09:08', $this->fixture->getConfirmationMessage());
  159:         $this->assertEquals(count($expected), count($actual));

DiscountOfficeItems • tests/library/Admin/Usc/Po/Record/FieldTest.php:
   27:         $this->assertEquals($expectedDefault, $field->getValue(), 'Default value incorrect');
   29:         $this->assertEquals($expectedValue, $field->getValue(), 'Set value incorrect');
   30:         $this->assertEquals($expectedTrimmed, $field->getTrimmedValue(), 'Set value incorrect');
   50:         $this->assertEquals($expectedDefault, ''.$field, 'Default value incorrect');
   52:         $this->assertEquals($expectedValue, ''.$field, 'Set value incorrect');
  128:         $this->assertEquals($expected, $field->getLength(), 'incorrect length');
  129:         $this->assertEquals($expected, strlen($field->getValue()), 'value incorrect length');

DiscountOfficeItems • tests/library/Admin/Usc/Po/Record/RepositoryTest.php:
   45:             $this->assertEquals($value, $actual[$field]);
  103:         $this->assertEquals($unsetType, $actual['TYPE']);

DiscountOfficeItems • tests/library/Admin/Workflow/Execution/DbRepositoryTest.php:
   49:         $this->assertNotNull($id);
   50:         $this->assertFalse($execution->hasEnded());
   51:         $this->assertFalse($execution->isCancelled());
   52:         $this->assertFalse($execution->isResumed());
   53:         $this->assertTrue($execution->isSuspended());
   56:         $this->assertEquals([$id], $ids, 'unable to find execution by WF object');
   59:         $this->assertEquals(
   66:         $this->assertEquals(
   78:         $this->assertEquals(
   95:         $this->assertNotNull($id);
   96:         $this->assertFalse($execution->hasEnded());
   97:         $this->assertFalse($execution->isCancelled());
   98:         $this->assertFalse($execution->isResumed());
   99:         $this->assertTrue($execution->isSuspended());
  109:         $this->assertEquals([$id], $ids);
  119:         $this->assertEquals([$id], $ids);
  132:         $this->assertEquals([$id], $ids);
  149:         $this->assertNotNull($id);
  150:         $this->assertFalse($execution->hasEnded());
  151:         $this->assertFalse($execution->isCancelled());
  152:         $this->assertFalse($execution->isResumed());
  153:         $this->assertTrue($execution->isSuspended());
  156:         $this->assertEquals([$id], $ids, 'unable to find execution by WF object');
  159:         $this->assertEquals(
  166:         $this->assertEquals(
  179:         $this->assertEquals(
  189:         $this->assertEquals(
  206:         $this->assertNotNull($id);
  207:         $this->assertFalse($execution->hasEnded());
  208:         $this->assertFalse($execution->isCancelled());
  209:         $this->assertFalse($execution->isResumed());
  210:         $this->assertTrue($execution->isSuspended());
  213:         $this->assertEquals($id, $exec->id, 'unable to find execution by id');
  216:         $this->assertEquals($id, $exec->id, 'unable to find execution by id');
  232:         $this->assertNotNull($id);
  233:         $this->assertFalse($execution->hasEnded());
  234:         $this->assertFalse($execution->isCancelled());
  235:         $this->assertFalse($execution->isResumed());
  236:         $this->assertTrue($execution->isSuspended());
  239:         $this->assertEquals($id, $exec->id, 'unable to find execution by id');
  242:         $this->assertEquals($id, $exec->id, 'unable to find execution by id');
  245:         $this->assertEquals($id, $exec->id, 'unable to find execution by id');
  248:         $this->assertEquals($id, $exec->id, 'unable to find execution by id');
  261:         $this->assertNotNull($id);
  262:         $this->assertFalse($execution->hasEnded());
  263:         $this->assertFalse($execution->isCancelled());
  264:         $this->assertFalse($execution->isResumed());
  265:         $this->assertTrue($execution->isSuspended());
  268:         $this->assertEquals([$id], $ids, 'unable to find active executions by');
  271:         $this->assertEquals([], $ids, 'found paused executions');
  285:         $this->assertNotNull($id);
  286:         $this->assertFalse($execution->hasEnded());
  287:         $this->assertFalse($execution->isCancelled());
  288:         $this->assertFalse($execution->isResumed());
  289:         $this->assertTrue($execution->isSuspended());
  292:         $this->assertEquals([$id], $ids, 'unable to find paused executions by');
  295:         $this->assertEquals([], $ids, 'found active executions');

DiscountOfficeItems • tests/library/Admin/Workflow/Execution/DbTest.php:
   36:         $this->assertNotNull($id);
   37:         $this->assertFalse($execution->hasEnded());
   38:         $this->assertFalse($execution->isCancelled());
   39:         $this->assertFalse($execution->isResumed());
   40:         $this->assertTrue($execution->isSuspended());
   44:         $this->assertFalse($execution->hasEnded());
   45:         $this->assertFalse($execution->isCancelled());
   46:         $this->assertFalse($execution->isResumed());
   47:         $this->assertTrue($execution->isSuspended());
   51:         $this->assertTrue($execution->hasEnded());
   52:         $this->assertFalse($execution->isCancelled());
   53:         $this->assertFalse($execution->isResumed());
   54:         $this->assertFalse($execution->isSuspended());
   67:         $this->assertNotNull($id);
   68:         $this->assertFalse($execution->hasEnded());
   69:         $this->assertFalse($execution->isCancelled());
   70:         $this->assertFalse($execution->isResumed());
   71:         $this->assertTrue($execution->isSuspended());
   75:         $this->assertFalse($execution->hasEnded());
   76:         $this->assertFalse($execution->isCancelled());
   77:         $this->assertFalse($execution->isResumed());
   78:         $this->assertTrue($execution->isSuspended());
   82:         $this->assertTrue($execution->hasEnded());
   83:         $this->assertFalse($execution->isCancelled());
   84:         $this->assertFalse($execution->isResumed());
   85:         $this->assertFalse($execution->isSuspended());
   93:         $this->assertNotNull($id);
   94:         $this->assertFalse($execution->hasEnded());
   95:         $this->assertFalse($execution->isCancelled());
   96:         $this->assertFalse($execution->isResumed());
   97:         $this->assertTrue($execution->isSuspended());
  101:         $this->assertFalse($execution->hasEnded());
  102:         $this->assertFalse($execution->isCancelled());
  103:         $this->assertFalse($execution->isResumed());
  104:         $this->assertTrue($execution->isSuspended());
  108:         $this->assertTrue($execution->hasEnded());
  109:         $this->assertFalse($execution->isCancelled());
  110:         $this->assertFalse($execution->isResumed());
  111:         $this->assertFalse($execution->isSuspended());
  124:         $this->assertNotNull($id);
  125:         $this->assertFalse($execution->hasEnded());
  126:         $this->assertFalse($execution->isCancelled());
  127:         $this->assertFalse($execution->isResumed());
  128:         $this->assertTrue($execution->isSuspended());
  132:         $this->assertFalse($execution->hasEnded());
  133:         $this->assertFalse($execution->isCancelled());
  134:         $this->assertFalse($execution->isResumed());
  135:         $this->assertTrue($execution->isSuspended());
  139:         $this->assertFalse($execution->hasEnded());
  140:         $this->assertFalse($execution->isCancelled());
  141:         $this->assertFalse($execution->isResumed());
  142:         $this->assertTrue($execution->isSuspended());
  146:         $this->assertFalse($execution->hasEnded());
  147:         $this->assertFalse($execution->isCancelled());
  148:         $this->assertFalse($execution->isResumed());
  149:         $this->assertTrue($execution->isSuspended());
  153:         $this->assertTrue($execution->hasEnded());
  154:         $this->assertFalse($execution->isCancelled());
  155:         $this->assertFalse($execution->isResumed());
  156:         $this->assertFalse($execution->isSuspended());
  172:         $this->assertNull($id);
  173:         $this->assertTrue($execution->hasEnded());
  174:         $this->assertFalse($execution->isCancelled());
  175:         $this->assertFalse($execution->isResumed());
  176:         $this->assertFalse($execution->isSuspended());
  192:         $this->assertNotNull($id);
  193:         $this->assertFalse($execution->hasEnded());
  194:         $this->assertFalse($execution->isCancelled());
  195:         $this->assertFalse($execution->isResumed());
  196:         $this->assertTrue($execution->isSuspended());
  200:         $this->assertFalse($execution->hasEnded());
  201:         $this->assertFalse($execution->isCancelled());
  202:         $this->assertFalse($execution->isResumed());
  203:         $this->assertTrue($execution->isSuspended());
  207:         $this->assertTrue($execution->hasEnded());
  208:         $this->assertFalse($execution->isCancelled());
  209:         $this->assertFalse($execution->isResumed());
  210:         $this->assertFalse($execution->isSuspended());
  226:         $this->assertNotNull($id);
  227:         $this->assertFalse($execution->hasEnded());
  228:         $this->assertFalse($execution->isCancelled());
  229:         $this->assertFalse($execution->isResumed());
  230:         $this->assertTrue($execution->isSuspended());
  238:         $this->assertFalse($execution->hasEnded());
  239:         $this->assertFalse($execution->isCancelled());
  240:         $this->assertFalse($execution->isResumed());
  241:         $this->assertTrue($execution->isSuspended());
  242:         $this->assertTrue($execution->isPaused());
  246:         $this->assertFalse($execution->hasEnded());
  247:         $this->assertFalse($execution->isCancelled());
  248:         $this->assertFalse($execution->isResumed());
  249:         $this->assertTrue($execution->isSuspended());
  250:         $this->assertTrue($execution->isPaused());
  259:         $this->assertTrue($execution->hasEnded());
  260:         $this->assertFalse($execution->isCancelled());
  261:         $this->assertFalse($execution->isResumed());
  262:         $this->assertFalse($execution->isSuspended());
  263:         $this->assertFalse($execution->isPaused());
  271:             $this->assertEquals('$executionId must be an integer.', $e->getMessage());
  284:             $this->assertEquals('Could not load execution state.', $e->getMessage());
  296:         $this->assertTrue(isset($execution->definitionStorage));
  297:         $this->assertTrue(isset($execution->workflow));
  298:         $this->assertFalse(isset($execution->foo));
  308:             $this->assertEquals(
  327:             $this->assertEquals('No such property name \'foo\'.', $e->getMessage());
  344:             $this->assertEquals('No such property name \'foo\'.', $e->getMessage());
  359:             $this->assertEquals(
  376:         $this->assertEquals('myPrefix', $execution->prefix);
  381:             $this->assertEquals(

DiscountOfficeItems • tests/library/Admin/Workflow/Execution/Listener/LoggerTest.php:
   42:         $this->assertLogs('StartEnd');
   52:         $this->assertLogs('StartEndVariableHandler');
   64:         $this->assertLogs('StartInputEnd');
   74:         $this->assertLogs('StartSetUnsetEnd');
   84:         $this->assertLogs('IncrementingLoop');
   94:         $this->assertLogs('DecrementingLoop');
  104:         $this->assertLogs('SetAddSubMulDiv');
  114:         $this->assertLogs('AddVariables');
  124:         $this->assertLogs('ParallelSplitSynchronization');
  136:         $this->assertLogs('ParallelSplitSynchronization2');
  147:         $this->assertLogs('ExclusiveChoiceSimpleMerge');
  158:         $this->assertLogs('ExclusiveChoiceSimpleMerge2');
  169:         $this->assertLogs('ExclusiveChoiceWithUnconditionalOutNodeSimpleMerge');
  180:         $this->assertLogs('ExclusiveChoiceWithUnconditionalOutNodeSimpleMerge2');
  190:         $this->assertLogs('NestedExclusiveChoiceSimpleMerge');
  200:         $this->assertLogs('NestedExclusiveChoiceSimpleMerge2');
  210:         $this->assertLogs('NestedExclusiveChoiceSimpleMerge3');
  220:         $this->assertLogs('MultiChoiceSynchronizingMerge');
  230:         $this->assertLogs('MultiChoiceDiscriminator');
  242:         $this->assertLogs('NonInteractiveSubWorkflow');
  256:         $this->assertLogs('InteractiveSubWorkflow');
  269:         $this->assertLogs('WorkflowWithSubWorkflowAndVariablePassing');
  281:         $this->assertLogs('WorkflowWithCancelCaseSubWorkflow');
  291:         $this->assertLogs('NestedLoops');
  301:         $this->assertLogs('ParallelSplitCancelCaseActionActionSynchronization');
  311:         $this->assertLogs('ParallelSplitActionActionCancelCaseSynchronization');
  329:             $this->log->assertMessageLogged($log[1], $log[2]);

DiscountOfficeItems • tests/library/Admin/Workflow/Execution/Plugin/EventDispatcherTest.php:
   69:         $this->assertEquals(1, $this->receiver->stack['afterExecutionStarted']);
   70:         $this->assertEquals(0, $this->receiver->stack['afterExecutionSuspended']);
   71:         $this->assertEquals(0, $this->receiver->stack['afterExecutionResumed']);
   72:         $this->assertEquals(0, $this->receiver->stack['afterExecutionCancelled']);
   73:         $this->assertEquals(1, $this->receiver->stack['afterExecutionEnded']);
   74:         $this->assertEquals(2, $this->receiver->stack['beforeNodeActivated']);
   75:         $this->assertEquals(2, $this->receiver->stack['afterNodeActivated']);
   76:         $this->assertEquals(2, $this->receiver->stack['afterNodeExecuted']);
   77:         $this->assertEquals(1, $this->receiver->stack['afterThreadStarted']);
   78:         $this->assertEquals(1, $this->receiver->stack['afterThreadEnded']);
   79:         $this->assertEquals(0, $this->receiver->stack['beforeVariableSet']);
   80:         $this->assertEquals(0, $this->receiver->stack['afterVariableSet']);
   81:         $this->assertEquals(0, $this->receiver->stack['beforeVariableUnset']);
   82:         $this->assertEquals(0, $this->receiver->stack['afterVariableUnset']);
   91:         $this->assertEquals(1, $this->receiver->stack['afterExecutionStarted']);
   92:         $this->assertEquals(0, $this->receiver->stack['afterExecutionSuspended']);
   93:         $this->assertEquals(0, $this->receiver->stack['afterExecutionResumed']);
   94:         $this->assertEquals(0, $this->receiver->stack['afterExecutionCancelled']);
   95:         $this->assertEquals(1, $this->receiver->stack['afterExecutionEnded']);
   96:         $this->assertEquals(2, $this->receiver->stack['beforeNodeActivated']);
   97:         $this->assertEquals(2, $this->receiver->stack['afterNodeActivated']);
   98:         $this->assertEquals(2, $this->receiver->stack['afterNodeExecuted']);
   99:         $this->assertEquals(1, $this->receiver->stack['afterThreadStarted']);
  100:         $this->assertEquals(1, $this->receiver->stack['afterThreadEnded']);
  101:         $this->assertEquals(1, $this->receiver->stack['beforeVariableSet']);
  102:         $this->assertEquals(1, $this->receiver->stack['afterVariableSet']);
  103:         $this->assertEquals(0, $this->receiver->stack['beforeVariableUnset']);
  104:         $this->assertEquals(0, $this->receiver->stack['afterVariableUnset']);
  114:         $this->assertEquals(1, $this->receiver->stack['afterExecutionStarted']);
  115:         $this->assertEquals(1, $this->receiver->stack['afterExecutionSuspended']);
  116:         $this->assertEquals(1, $this->receiver->stack['afterExecutionResumed']);
  117:         $this->assertEquals(0, $this->receiver->stack['afterExecutionCancelled']);
  118:         $this->assertEquals(1, $this->receiver->stack['afterExecutionEnded']);
  119:         $this->assertEquals(3, $this->receiver->stack['beforeNodeActivated']);
  120:         $this->assertEquals(3, $this->receiver->stack['afterNodeActivated']);
  121:         $this->assertEquals(3, $this->receiver->stack['afterNodeExecuted']);
  122:         $this->assertEquals(1, $this->receiver->stack['afterThreadStarted']);
  123:         $this->assertEquals(1, $this->receiver->stack['afterThreadEnded']);
  124:         $this->assertEquals(3, $this->receiver->stack['beforeVariableSet']);
  125:         $this->assertEquals(3, $this->receiver->stack['afterVariableSet']);
  126:         $this->assertEquals(0, $this->receiver->stack['beforeVariableUnset']);
  127:         $this->assertEquals(0, $this->receiver->stack['afterVariableUnset']);
  136:         $this->assertEquals(1, $this->receiver->stack['afterExecutionStarted']);
  137:         $this->assertEquals(0, $this->receiver->stack['afterExecutionSuspended']);
  138:         $this->assertEquals(0, $this->receiver->stack['afterExecutionResumed']);
  139:         $this->assertEquals(0, $this->receiver->stack['afterExecutionCancelled']);
  140:         $this->assertEquals(1, $this->receiver->stack['afterExecutionEnded']);
  141:         $this->assertEquals(4, $this->receiver->stack['beforeNodeActivated']);
  142:         $this->assertEquals(4, $this->receiver->stack['afterNodeActivated']);
  143:         $this->assertEquals(4, $this->receiver->stack['afterNodeExecuted']);
  144:         $this->assertEquals(1, $this->receiver->stack['afterThreadStarted']);
  145:         $this->assertEquals(1, $this->receiver->stack['afterThreadEnded']);
  146:         $this->assertEquals(1, $this->receiver->stack['beforeVariableSet']);
  147:         $this->assertEquals(1, $this->receiver->stack['afterVariableSet']);
  148:         $this->assertEquals(1, $this->receiver->stack['beforeVariableUnset']);
  149:         $this->assertEquals(1, $this->receiver->stack['afterVariableUnset']);
  158:         $this->assertEquals(1, $this->receiver->stack['afterExecutionStarted']);
  159:         $this->assertEquals(0, $this->receiver->stack['afterExecutionSuspended']);
  160:         $this->assertEquals(0, $this->receiver->stack['afterExecutionResumed']);
  161:         $this->assertEquals(0, $this->receiver->stack['afterExecutionCancelled']);
  162:         $this->assertEquals(1, $this->receiver->stack['afterExecutionEnded']);
  163:         $this->assertEquals(22, $this->receiver->stack['beforeNodeActivated']);
  164:         $this->assertEquals(22, $this->receiver->stack['afterNodeActivated']);
  165:         $this->assertEquals(22, $this->receiver->stack['afterNodeExecuted']);
  166:         $this->assertEquals(1, $this->receiver->stack['afterThreadStarted']);
  167:         $this->assertEquals(1, $this->receiver->stack['afterThreadEnded']);
  168:         $this->assertEquals(10, $this->receiver->stack['beforeVariableSet']);
  169:         $this->assertEquals(10, $this->receiver->stack['afterVariableSet']);
  170:         $this->assertEquals(0, $this->receiver->stack['beforeVariableUnset']);
  171:         $this->assertEquals(0, $this->receiver->stack['afterVariableUnset']);
  180:         $this->assertEquals(1, $this->receiver->stack['afterExecutionStarted']);
  181:         $this->assertEquals(0, $this->receiver->stack['afterExecutionSuspended']);
  182:         $this->assertEquals(0, $this->receiver->stack['afterExecutionResumed']);
  183:         $this->assertEquals(0, $this->receiver->stack['afterExecutionCancelled']);
  184:         $this->assertEquals(1, $this->receiver->stack['afterExecutionEnded']);
  185:         $this->assertEquals(22, $this->receiver->stack['beforeNodeActivated']);
  186:         $this->assertEquals(22, $this->receiver->stack['afterNodeActivated']);
  187:         $this->assertEquals(22, $this->receiver->stack['afterNodeExecuted']);
  188:         $this->assertEquals(1, $this->receiver->stack['afterThreadStarted']);
  189:         $this->assertEquals(1, $this->receiver->stack['afterThreadEnded']);
  190:         $this->assertEquals(10, $this->receiver->stack['beforeVariableSet']);
  191:         $this->assertEquals(10, $this->receiver->stack['afterVariableSet']);
  192:         $this->assertEquals(0, $this->receiver->stack['beforeVariableUnset']);
  193:         $this->assertEquals(0, $this->receiver->stack['afterVariableUnset']);
  202:         $this->assertEquals(1, $this->receiver->stack['afterExecutionStarted']);
  203:         $this->assertEquals(0, $this->receiver->stack['afterExecutionSuspended']);
  204:         $this->assertEquals(0, $this->receiver->stack['afterExecutionResumed']);
  205:         $this->assertEquals(0, $this->receiver->stack['afterExecutionCancelled']);
  206:         $this->assertEquals(1, $this->receiver->stack['afterExecutionEnded']);
  207:         $this->assertEquals(7, $this->receiver->stack['beforeNodeActivated']);
  208:         $this->assertEquals(7, $this->receiver->stack['afterNodeActivated']);
  209:         $this->assertEquals(7, $this->receiver->stack['afterNodeExecuted']);
  210:         $this->assertEquals(1, $this->receiver->stack['afterThreadStarted']);
  211:         $this->assertEquals(1, $this->receiver->stack['afterThreadEnded']);
  212:         $this->assertEquals(5, $this->receiver->stack['beforeVariableSet']);
  213:         $this->assertEquals(5, $this->receiver->stack['afterVariableSet']);
  214:         $this->assertEquals(0, $this->receiver->stack['beforeVariableUnset']);
  215:         $this->assertEquals(0, $this->receiver->stack['afterVariableUnset']);
  224:         $this->assertEquals(1, $this->receiver->stack['afterExecutionStarted']);
  225:         $this->assertEquals(0, $this->receiver->stack['afterExecutionSuspended']);
  226:         $this->assertEquals(0, $this->receiver->stack['afterExecutionResumed']);
  227:         $this->assertEquals(0, $this->receiver->stack['afterExecutionCancelled']);
  228:         $this->assertEquals(1, $this->receiver->stack['afterExecutionEnded']);
  229:         $this->assertEquals(4, $this->receiver->stack['beforeNodeActivated']);
  230:         $this->assertEquals(4, $this->receiver->stack['afterNodeActivated']);
  231:         $this->assertEquals(4, $this->receiver->stack['afterNodeExecuted']);
  232:         $this->assertEquals(1, $this->receiver->stack['afterThreadStarted']);
  233:         $this->assertEquals(1, $this->receiver->stack['afterThreadEnded']);
  234:         $this->assertEquals(3, $this->receiver->stack['beforeVariableSet']);
  235:         $this->assertEquals(3, $this->receiver->stack['afterVariableSet']);
  236:         $this->assertEquals(0, $this->receiver->stack['beforeVariableUnset']);
  237:         $this->assertEquals(0, $this->receiver->stack['afterVariableUnset']);
  246:         $this->assertEquals(1, $this->receiver->stack['afterExecutionStarted']);
  247:         $this->assertEquals(0, $this->receiver->stack['afterExecutionSuspended']);
  248:         $this->assertEquals(0, $this->receiver->stack['afterExecutionResumed']);
  249:         $this->assertEquals(0, $this->receiver->stack['afterExecutionCancelled']);
  250:         $this->assertEquals(1, $this->receiver->stack['afterExecutionEnded']);
  251:         $this->assertEquals(6, $this->receiver->stack['beforeNodeActivated']);
  252:         $this->assertEquals(6, $this->receiver->stack['afterNodeActivated']);
  253:         $this->assertEquals(6, $this->receiver->stack['afterNodeExecuted']);
  254:         $this->assertEquals(2, $this->receiver->stack['afterThreadStarted']);
  255:         $this->assertEquals(2, $this->receiver->stack['afterThreadEnded']);
  256:         $this->assertEquals(3, $this->receiver->stack['beforeVariableSet']);
  257:         $this->assertEquals(3, $this->receiver->stack['afterVariableSet']);
  258:         $this->assertEquals(0, $this->receiver->stack['beforeVariableUnset']);
  259:         $this->assertEquals(0, $this->receiver->stack['afterVariableUnset']);
  268:         $this->assertEquals(1, $this->receiver->stack['afterExecutionStarted']);
  269:         $this->assertEquals(0, $this->receiver->stack['afterExecutionSuspended']);
  270:         $this->assertEquals(0, $this->receiver->stack['afterExecutionResumed']);
  271:         $this->assertEquals(0, $this->receiver->stack['afterExecutionCancelled']);
  272:         $this->assertEquals(1, $this->receiver->stack['afterExecutionEnded']);
  273:         $this->assertEquals(7, $this->receiver->stack['beforeNodeActivated']);
  274:         $this->assertEquals(7, $this->receiver->stack['afterNodeActivated']);
  275:         $this->assertEquals(7, $this->receiver->stack['afterNodeExecuted']);
  276:         $this->assertEquals(4, $this->receiver->stack['afterThreadStarted']);
  277:         $this->assertEquals(4, $this->receiver->stack['afterThreadEnded']);
  278:         $this->assertEquals(0, $this->receiver->stack['beforeVariableSet']);
  279:         $this->assertEquals(0, $this->receiver->stack['afterVariableSet']);
  280:         $this->assertEquals(0, $this->receiver->stack['beforeVariableUnset']);
  281:         $this->assertEquals(0, $this->receiver->stack['afterVariableUnset']);
  291:         $this->assertEquals(1, $this->receiver->stack['afterExecutionStarted']);
  292:         $this->assertEquals(0, $this->receiver->stack['afterExecutionSuspended']);
  293:         $this->assertEquals(0, $this->receiver->stack['afterExecutionResumed']);
  294:         $this->assertEquals(0, $this->receiver->stack['afterExecutionCancelled']);
  295:         $this->assertEquals(1, $this->receiver->stack['afterExecutionEnded']);
  296:         $this->assertEquals(6, $this->receiver->stack['beforeNodeActivated']);
  297:         $this->assertEquals(6, $this->receiver->stack['afterNodeActivated']);
  298:         $this->assertEquals(6, $this->receiver->stack['afterNodeExecuted']);
  299:         $this->assertEquals(3, $this->receiver->stack['afterThreadStarted']);
  300:         $this->assertEquals(3, $this->receiver->stack['afterThreadEnded']);
  301:         $this->assertEquals(2, $this->receiver->stack['beforeVariableSet']);
  302:         $this->assertEquals(2, $this->receiver->stack['afterVariableSet']);
  303:         $this->assertEquals(0, $this->receiver->stack['beforeVariableUnset']);
  304:         $this->assertEquals(0, $this->receiver->stack['afterVariableUnset']);
  314:         $this->assertEquals(1, $this->receiver->stack['afterExecutionStarted']);
  315:         $this->assertEquals(0, $this->receiver->stack['afterExecutionSuspended']);
  316:         $this->assertEquals(0, $this->receiver->stack['afterExecutionResumed']);
  317:         $this->assertEquals(0, $this->receiver->stack['afterExecutionCancelled']);
  318:         $this->assertEquals(1, $this->receiver->stack['afterExecutionEnded']);
  319:         $this->assertEquals(5, $this->receiver->stack['beforeNodeActivated']);
  320:         $this->assertEquals(5, $this->receiver->stack['afterNodeActivated']);
  321:         $this->assertEquals(5, $this->receiver->stack['afterNodeExecuted']);
  322:         $this->assertEquals(2, $this->receiver->stack['afterThreadStarted']);
  323:         $this->assertEquals(2, $this->receiver->stack['afterThreadEnded']);
  324:         $this->assertEquals(1, $this->receiver->stack['beforeVariableSet']);
  325:         $this->assertEquals(1, $this->receiver->stack['afterVariableSet']);
  326:         $this->assertEquals(0, $this->receiver->stack['beforeVariableUnset']);
  327:         $this->assertEquals(0, $this->receiver->stack['afterVariableUnset']);
  337:         $this->assertEquals(1, $this->receiver->stack['afterExecutionStarted']);
  338:         $this->assertEquals(0, $this->receiver->stack['afterExecutionSuspended']);
  339:         $this->assertEquals(0, $this->receiver->stack['afterExecutionResumed']);
  340:         $this->assertEquals(0, $this->receiver->stack['afterExecutionCancelled']);
  341:         $this->assertEquals(1, $this->receiver->stack['afterExecutionEnded']);
  342:         $this->assertEquals(5, $this->receiver->stack['beforeNodeActivated']);
  343:         $this->assertEquals(5, $this->receiver->stack['afterNodeActivated']);
  344:         $this->assertEquals(5, $this->receiver->stack['afterNodeExecuted']);
  345:         $this->assertEquals(2, $this->receiver->stack['afterThreadStarted']);
  346:         $this->assertEquals(2, $this->receiver->stack['afterThreadEnded']);
  347:         $this->assertEquals(2, $this->receiver->stack['beforeVariableSet']);
  348:         $this->assertEquals(2, $this->receiver->stack['afterVariableSet']);
  349:         $this->assertEquals(0, $this->receiver->stack['beforeVariableUnset']);
  350:         $this->assertEquals(0, $this->receiver->stack['afterVariableUnset']);
  360:         $this->assertEquals(1, $this->receiver->stack['afterExecutionStarted']);
  361:         $this->assertEquals(0, $this->receiver->stack['afterExecutionSuspended']);
  362:         $this->assertEquals(0, $this->receiver->stack['afterExecutionResumed']);
  363:         $this->assertEquals(0, $this->receiver->stack['afterExecutionCancelled']);
  364:         $this->assertEquals(1, $this->receiver->stack['afterExecutionEnded']);
  365:         $this->assertEquals(6, $this->receiver->stack['beforeNodeActivated']);
  366:         $this->assertEquals(6, $this->receiver->stack['afterNodeActivated']);
  367:         $this->assertEquals(6, $this->receiver->stack['afterNodeExecuted']);
  368:         $this->assertEquals(3, $this->receiver->stack['afterThreadStarted']);
  369:         $this->assertEquals(2, $this->receiver->stack['afterThreadEnded']);
  370:         $this->assertEquals(3, $this->receiver->stack['beforeVariableSet']);
  371:         $this->assertEquals(3, $this->receiver->stack['afterVariableSet']);
  372:         $this->assertEquals(0, $this->receiver->stack['beforeVariableUnset']);
  373:         $this->assertEquals(0, $this->receiver->stack['afterVariableUnset']);
  382:         $this->assertEquals(1, $this->receiver->stack['afterExecutionStarted']);
  383:         $this->assertEquals(0, $this->receiver->stack['afterExecutionSuspended']);
  384:         $this->assertEquals(0, $this->receiver->stack['afterExecutionResumed']);
  385:         $this->assertEquals(0, $this->receiver->stack['afterExecutionCancelled']);
  386:         $this->assertEquals(1, $this->receiver->stack['afterExecutionEnded']);
  387:         $this->assertEquals(9, $this->receiver->stack['beforeNodeActivated']);
  388:         $this->assertEquals(9, $this->receiver->stack['afterNodeActivated']);
  389:         $this->assertEquals(9, $this->receiver->stack['afterNodeExecuted']);
  390:         $this->assertEquals(3, $this->receiver->stack['afterThreadStarted']);
  391:         $this->assertEquals(3, $this->receiver->stack['afterThreadEnded']);
  392:         $this->assertEquals(3, $this->receiver->stack['beforeVariableSet']);
  393:         $this->assertEquals(3, $this->receiver->stack['afterVariableSet']);
  394:         $this->assertEquals(0, $this->receiver->stack['beforeVariableUnset']);
  395:         $this->assertEquals(0, $this->receiver->stack['afterVariableUnset']);
  404:         $this->assertEquals(1, $this->receiver->stack['afterExecutionStarted']);
  405:         $this->assertEquals(0, $this->receiver->stack['afterExecutionSuspended']);
  406:         $this->assertEquals(0, $this->receiver->stack['afterExecutionResumed']);
  407:         $this->assertEquals(0, $this->receiver->stack['afterExecutionCancelled']);
  408:         $this->assertEquals(1, $this->receiver->stack['afterExecutionEnded']);
  409:         $this->assertEquals(8, $this->receiver->stack['beforeNodeActivated']);
  410:         $this->assertEquals(8, $this->receiver->stack['afterNodeActivated']);
  411:         $this->assertEquals(8, $this->receiver->stack['afterNodeExecuted']);
  412:         $this->assertEquals(4, $this->receiver->stack['afterThreadStarted']);
  413:         $this->assertEquals(4, $this->receiver->stack['afterThreadEnded']);
  414:         $this->assertEquals(2, $this->receiver->stack['beforeVariableSet']);
  415:         $this->assertEquals(2, $this->receiver->stack['afterVariableSet']);
  416:         $this->assertEquals(0, $this->receiver->stack['beforeVariableUnset']);
  417:         $this->assertEquals(0, $this->receiver->stack['afterVariableUnset']);
  426:         $this->assertEquals(1, $this->receiver->stack['afterExecutionStarted']);
  427:         $this->assertEquals(0, $this->receiver->stack['afterExecutionSuspended']);
  428:         $this->assertEquals(0, $this->receiver->stack['afterExecutionResumed']);
  429:         $this->assertEquals(0, $this->receiver->stack['afterExecutionCancelled']);
  430:         $this->assertEquals(1, $this->receiver->stack['afterExecutionEnded']);
  431:         $this->assertEquals(8, $this->receiver->stack['beforeNodeActivated']);
  432:         $this->assertEquals(8, $this->receiver->stack['afterNodeActivated']);
  433:         $this->assertEquals(8, $this->receiver->stack['afterNodeExecuted']);
  434:         $this->assertEquals(4, $this->receiver->stack['afterThreadStarted']);
  435:         $this->assertEquals(4, $this->receiver->stack['afterThreadEnded']);
  436:         $this->assertEquals(2, $this->receiver->stack['beforeVariableSet']);
  437:         $this->assertEquals(2, $this->receiver->stack['afterVariableSet']);
  438:         $this->assertEquals(0, $this->receiver->stack['beforeVariableUnset']);
  439:         $this->assertEquals(0, $this->receiver->stack['afterVariableUnset']);
  449:         $this->assertEquals(2, $this->receiver->stack['afterExecutionStarted']);
  450:         $this->assertEquals(0, $this->receiver->stack['afterExecutionSuspended']);
  451:         $this->assertEquals(0, $this->receiver->stack['afterExecutionResumed']);
  452:         $this->assertEquals(0, $this->receiver->stack['afterExecutionCancelled']);
  453:         $this->assertEquals(2, $this->receiver->stack['afterExecutionEnded']);
  454:         $this->assertEquals(5, $this->receiver->stack['beforeNodeActivated']);
  455:         $this->assertEquals(5, $this->receiver->stack['afterNodeActivated']);
  456:         $this->assertEquals(5, $this->receiver->stack['afterNodeExecuted']);
  457:         $this->assertEquals(2, $this->receiver->stack['afterThreadStarted']);
  458:         $this->assertEquals(2, $this->receiver->stack['afterThreadEnded']);
  459:         $this->assertEquals(0, $this->receiver->stack['beforeVariableSet']);
  460:         $this->assertEquals(0, $this->receiver->stack['afterVariableSet']);
  461:         $this->assertEquals(0, $this->receiver->stack['beforeVariableUnset']);
  462:         $this->assertEquals(0, $this->receiver->stack['afterVariableUnset']);
  473:         $this->assertEquals(2, $this->receiver->stack['afterExecutionStarted']);
  474:         $this->assertEquals(1, $this->receiver->stack['afterExecutionSuspended']);
  475:         $this->assertEquals(1, $this->receiver->stack['afterExecutionResumed']);
  476:         $this->assertEquals(0, $this->receiver->stack['afterExecutionCancelled']);
  477:         $this->assertEquals(2, $this->receiver->stack['afterExecutionEnded']);
  478:         $this->assertEquals(6, $this->receiver->stack['beforeNodeActivated']);
  479:         $this->assertEquals(6, $this->receiver->stack['afterNodeActivated']);
  480:         $this->assertEquals(6, $this->receiver->stack['afterNodeExecuted']);
  481:         $this->assertEquals(2, $this->receiver->stack['afterThreadStarted']);
  482:         $this->assertEquals(2, $this->receiver->stack['afterThreadEnded']);
  483:         $this->assertEquals(3, $this->receiver->stack['beforeVariableSet']);
  484:         $this->assertEquals(3, $this->receiver->stack['afterVariableSet']);
  485:         $this->assertEquals(0, $this->receiver->stack['beforeVariableUnset']);
  486:         $this->assertEquals(0, $this->receiver->stack['afterVariableUnset']);
  496:         $this->assertEquals(2, $this->receiver->stack['afterExecutionStarted']);
  497:         $this->assertEquals(0, $this->receiver->stack['afterExecutionSuspended']);
  498:         $this->assertEquals(0, $this->receiver->stack['afterExecutionResumed']);
  499:         $this->assertEquals(2, $this->receiver->stack['afterExecutionCancelled']);
  500:         $this->assertEquals(0, $this->receiver->stack['afterExecutionEnded']);
  501:         $this->assertEquals(7, $this->receiver->stack['beforeNodeActivated']);
  502:         $this->assertEquals(7, $this->receiver->stack['afterNodeActivated']);
  503:         $this->assertEquals(5, $this->receiver->stack['afterNodeExecuted']);
  504:         $this->assertEquals(5, $this->receiver->stack['afterThreadStarted']);
  505:         $this->assertEquals(0, $this->receiver->stack['afterThreadEnded']);
  506:         $this->assertEquals(0, $this->receiver->stack['beforeVariableSet']);
  507:         $this->assertEquals(0, $this->receiver->stack['afterVariableSet']);
  508:         $this->assertEquals(0, $this->receiver->stack['beforeVariableUnset']);
  509:         $this->assertEquals(0, $this->receiver->stack['afterVariableUnset']);
  518:         $this->assertEquals(1, $this->receiver->stack['afterExecutionStarted']);
  519:         $this->assertEquals(0, $this->receiver->stack['afterExecutionSuspended']);
  520:         $this->assertEquals(0, $this->receiver->stack['afterExecutionResumed']);
  521:         $this->assertEquals(0, $this->receiver->stack['afterExecutionCancelled']);
  522:         $this->assertEquals(1, $this->receiver->stack['afterExecutionEnded']);
  523:         $this->assertEquals(10, $this->receiver->stack['beforeNodeActivated']);
  524:         $this->assertEquals(10, $this->receiver->stack['afterNodeActivated']);
  525:         $this->assertEquals(10, $this->receiver->stack['afterNodeExecuted']);
  526:         $this->assertEquals(1, $this->receiver->stack['afterThreadStarted']);
  527:         $this->assertEquals(1, $this->receiver->stack['afterThreadEnded']);
  528:         $this->assertEquals(4, $this->receiver->stack['beforeVariableSet']);
  529:         $this->assertEquals(4, $this->receiver->stack['afterVariableSet']);
  530:         $this->assertEquals(0, $this->receiver->stack['beforeVariableUnset']);
  531:         $this->assertEquals(0, $this->receiver->stack['afterVariableUnset']);
  541:         $this->assertEquals(2, $this->receiver->stack['afterExecutionStarted']);
  542:         $this->assertEquals(0, $this->receiver->stack['afterExecutionSuspended']);
  543:         $this->assertEquals(0, $this->receiver->stack['afterExecutionResumed']);
  544:         $this->assertEquals(0, $this->receiver->stack['afterExecutionCancelled']);
  545:         $this->assertEquals(2, $this->receiver->stack['afterExecutionEnded']);
  546:         $this->assertEquals(7, $this->receiver->stack['beforeNodeActivated']);
  547:         $this->assertEquals(7, $this->receiver->stack['afterNodeActivated']);
  548:         $this->assertEquals(7, $this->receiver->stack['afterNodeExecuted']);
  549:         $this->assertEquals(2, $this->receiver->stack['afterThreadStarted']);
  550:         $this->assertEquals(2, $this->receiver->stack['afterThreadEnded']);
  551:         $this->assertEquals(4, $this->receiver->stack['beforeVariableSet']);
  552:         $this->assertEquals(4, $this->receiver->stack['afterVariableSet']);
  553:         $this->assertEquals(0, $this->receiver->stack['beforeVariableUnset']);
  554:         $this->assertEquals(0, $this->receiver->stack['afterVariableUnset']);
  563:         $this->assertEquals(1, $this->receiver->stack['afterExecutionStarted']);
  564:         $this->assertEquals(0, $this->receiver->stack['afterExecutionSuspended']);
  565:         $this->assertEquals(0, $this->receiver->stack['afterExecutionResumed']);
  566:         $this->assertEquals(1, $this->receiver->stack['afterExecutionCancelled']);
  567:         $this->assertEquals(0, $this->receiver->stack['afterExecutionEnded']);
  568:         $this->assertEquals(3, $this->receiver->stack['beforeNodeActivated']);
  569:         $this->assertEquals(3, $this->receiver->stack['afterNodeActivated']);
  570:         $this->assertEquals(3, $this->receiver->stack['afterNodeExecuted']);
  571:         $this->assertEquals(2, $this->receiver->stack['afterThreadStarted']);
  572:         $this->assertEquals(0, $this->receiver->stack['afterThreadEnded']);
  573:         $this->assertEquals(0, $this->receiver->stack['beforeVariableSet']);
  574:         $this->assertEquals(0, $this->receiver->stack['afterVariableSet']);
  575:         $this->assertEquals(0, $this->receiver->stack['beforeVariableUnset']);
  576:         $this->assertEquals(0, $this->receiver->stack['afterVariableUnset']);
  585:         $this->assertEquals(1, $this->receiver->stack['afterExecutionStarted']);
  586:         $this->assertEquals(0, $this->receiver->stack['afterExecutionSuspended']);
  587:         $this->assertEquals(0, $this->receiver->stack['afterExecutionResumed']);
  588:         $this->assertEquals(1, $this->receiver->stack['afterExecutionCancelled']);
  589:         $this->assertEquals(0, $this->receiver->stack['afterExecutionEnded']);
  590:         $this->assertEquals(5, $this->receiver->stack['beforeNodeActivated']);
  591:         $this->assertEquals(5, $this->receiver->stack['afterNodeActivated']);
  592:         $this->assertEquals(3, $this->receiver->stack['afterNodeExecuted']);
  593:         $this->assertEquals(4, $this->receiver->stack['afterThreadStarted']);
  594:         $this->assertEquals(0, $this->receiver->stack['afterThreadEnded']);
  595:         $this->assertEquals(0, $this->receiver->stack['beforeVariableSet']);
  596:         $this->assertEquals(0, $this->receiver->stack['afterVariableSet']);
  597:         $this->assertEquals(0, $this->receiver->stack['beforeVariableUnset']);
  598:         $this->assertEquals(0, $this->receiver->stack['afterVariableUnset']);
  603:         $this->assertTrue(isset($this->plugin->options['afterExecutionStarted']));
  604:         $this->assertFalse(isset($this->plugin->foo));
  605:         $this->assertEquals('afterExecutionStarted', $this->plugin->options['afterExecutionStarted']);
  608:         $this->assertEquals('myAfterExecutionStarted', $this->plugin->options['afterExecutionStarted']);
  618:             $this->assertEquals($expected, $e->getMessage());
  631:         $this->assertSame($options, $this->plugin->options);
  641:             $this->assertEquals($expected, $e->getMessage());
  654:             $this->assertEquals('No such property name \'foo\'.', $e->getMessage());
  670:             $this->assertEquals($expected, $e->getMessage());
  683:         $this->assertSame($signals, $this->plugin->signals);
  691:             $this->assertEquals('No such property name \'foo\'.', $e->getMessage());
  704:             $this->assertEquals('No such property name \'foo\'.', $e->getMessage());

DiscountOfficeItems • tests/library/Admin/Workflow/ServiceObject/AddressCheckTest.php:
   60:         $this->assertInstanceOf(ezcWorkflowServiceObject::class, $this->fixture);
  121:         $this->assertFalse($actual);
  163:         $this->assertTrue($actual);
  214:         $this->assertTrue($actual);
  221:         $this->assertEquals('Address Check', $actual);

DiscountOfficeItems • tests/library/Admin/Workflow/ServiceObject/AdvanceSubscriptionDateTest.php:
   76:         $this->assertEquals($expected, $response);
  106:         $this->assertFalse($actual);
  134:         $this->assertFalse($actual);
  168:         $this->assertTrue($actual);
  202:         $this->assertTrue($actual);
  239:                         $test->assertInstanceOf(Event::class, $actualEvent);
  240:                         $test->assertEquals($expectedType, $actualEvent->getType());
  241:                         $test->assertEquals($expectedStatus, $actualEvent->getStatusId());
  242:                         $test->assertEquals($expectedMessage, $actualEvent->getMessage());
  251:         $this->assertTrue($actual);

DiscountOfficeItems • tests/library/Admin/Workflow/ServiceObject/CancellationCheckTest.php:
  37:         $this->assertInstanceOf(ezcWorkflowServiceObject::class, $this->fixture);
  42:         $this->assertEquals('Cancellation check', (string) $this->fixture);
  96:         $this->assertTrue($actual);
  97:         $this->assertEquals($expected, $execution->getVariable($this->orderVarName.'_has_fulfillment_canceled'));

DiscountOfficeItems • tests/library/Admin/Workflow/ServiceObject/ChangeOrderStatusTest.php:
   85:         $this->assertInstanceOf(ezcWorkflowServiceObject::class, $this->fixture);
   90:         $this->assertEquals('Change order status to '.$this->status, (string) $this->fixture);
  117:         $this->assertTrue($actual);
  154:         $this->assertTrue($actual);

DiscountOfficeItems • tests/library/Admin/Workflow/ServiceObject/CreateSubscriptionCartTest.php:
   59:         $this->assertInstanceOf(\ezcWorkflowServiceObject::class, $this->fixture);
   64:         $this->assertEquals('Create subscription cart', $this->fixture->__toString());
  121:         $this->assertTrue($actual);
  132:         $this->assertTrue($actual);
  150:         $this->assertTrue($actual);

DiscountOfficeItems • tests/library/Admin/Workflow/ServiceObject/CreateSubscriptionOrderTest.php:
   52:         $this->assertInstanceOf(\ezcWorkflowServiceObject::class, $this->fixture);
   57:         $this->assertEquals('Create subscription order', $this->fixture->__toString());
   99:         $this->assertTrue($actual);
  120:         $this->assertTrue($actual);
  141:         $this->assertTrue($actual);
  152:         $this->assertTrue($actual);
  163:         $this->assertTrue($actual);
  180:         $this->assertTrue($actual);

DiscountOfficeItems • tests/library/Admin/Workflow/ServiceObject/CreateTaxRecordTest.php:
   70:         $this->assertInstanceOf(ezcWorkflowServiceObject::class, $this->fixture);
   75:         $this->assertEquals('Create tax record', (string) $this->fixture);
  113:         $this->assertFalse($actual);
  176:         $this->assertTrue($actual);

DiscountOfficeItems • tests/library/Admin/Workflow/ServiceObject/DuplicateOrderCheckTest.php:
   47:         $this->assertEquals($expected, $actual);
  179:         $this->assertTrue($actual);

DiscountOfficeItems • tests/library/Admin/Workflow/ServiceObject/GenerateApprovalFlagsTest.php:
  27:         $this->assertInstanceOf(GenerateApprovalFlags::class, $this->fixture);

DiscountOfficeItems • tests/library/Admin/Workflow/ServiceObject/GenerateSuggestionTest.php:
   70:         $this->assertInstanceOf(ezcWorkflowServiceObject::class, $this->fixture);
   77:         $this->assertEquals('Generate Suggestion', $actual);
  211:         $this->assertSame($invoice, $actual->invoice);
  360:         $this->assertTrue($actual);
  545:         $this->assertTrue($actual);
  565:         $this->assertFalse($actual);
  584:         $this->assertTrue($actual);

DiscountOfficeItems • tests/library/Admin/Workflow/ServiceObject/HasTrackingTest.php:
  29:         $this->assertInstanceOf(ezcWorkflowServiceObject::class, $this->fixture);
  34:         $this->assertEquals('Has Tracking', (string) $this->fixture);

DiscountOfficeItems • tests/library/Admin/Workflow/ServiceObject/SendEmailServiceTest.php:
   58:         $this->assertEquals($expected, $response);
  106:         $this->assertTrue($response);
  118:         $this->assertTrue($response);

DiscountOfficeItems • tests/library/Admin/Workflow/ServiceObject/SendShippingLabelTest.php:
   62:         $this->assertEquals($expected, $actual);
  110:         $this->assertFalse($actual);
  145:         $this->assertEquals($invoice, $parameterList[0]);
  146:         $this->assertEquals([$lineB], $parameterList[1]);
  178:         $this->assertTrue($actual);

DiscountOfficeItems • tests/library/Admin/Workflow/ServiceObject/SendTemplateEmailServiceTest.php:
   49:         $this->assertEquals($expected, $response);
   75:         $this->assertTrue($response);
   99:         $logTester->assertLogsContains("Sent {$this->eventName}");
  125:         $this->assertFalse($response);
  156:         $logTester->assertLogsContains("RuntimeException: {$message}");
  168:         $this->assertTrue($response);
  195:         $this->assertTrue($response);
  207:         $this->assertTrue($response);
  219:         $this->assertTrue($response);

DiscountOfficeItems • tests/library/Admin/Workflow/ServiceObject/SubscriptionTemplateEmailServiceTest.php:
   54:         $this->assertEquals($expected, $response);
   85:         $this->assertTrue($response);
  115:         $logTester->assertLogsContains("Sent {$this->eventName}");
  153:                         $test->assertInstanceOf(Event::class, $actualEvent);
  154:                         $test->assertEquals($expectedType, $actualEvent->getType());
  155:                         $test->assertEquals($expectedStatus, $actualEvent->getStatusId());
  156:                         $test->assertEquals($expectedMessage, $actualEvent->getMessage());
  165:         $logTester->assertLogsContains("Sent {$this->eventName}");
  197:         $this->assertFalse($response);
  234:         $logTester->assertLogsContains("RuntimeException: {$message}");
  283:                         $test->assertInstanceOf(Event::class, $actualEvent);
  284:                         $test->assertEquals($expectedType, $actualEvent->getType());
  285:                         $test->assertEquals($expectedStatus, $actualEvent->getStatusId());
  286:                         $test->assertEquals($expectedMessage, $actualEvent->getMessage());
  287:                         $test->assertEquals($expectedLogDetails, $actualEvent->getLogDetails());
  296:         $logTester->assertLogsContains("RuntimeException: {$message}");
  308:         $this->assertTrue($response);

DiscountOfficeItems • tests/library/Admin/Workflow/ServiceObject/WaitForNextOrderDateTest.php:
  34:         $this->assertInstanceOf(\ezcWorkflowServiceObject::class, $this->fixture);
  39:         $this->assertEquals('Waiting for next order date', $this->fixture->__toString());
  55:         $this->assertEquals($expected, $actual);
  75:         $this->assertTrue($actual);
  95:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • tests/library/Admin/Workflow/ServiceObject/WaitForTrackingTest.php:
   42:         $this->assertInstanceOf(AbstractInvoicesWaiting::class, $this->fixture);
   47:         $this->assertEquals('Waiting for Tracking', (string) $this->fixture);
   63:         $this->assertEquals($expected, $actual);
  180:         $this->assertEquals($expected, $actual);
  243:         $this->assertFalse($actual);
  244:         $this->assertEquals('Ordered', $invoice->getState());
  276:         $this->assertFalse($actual);
  277:         $this->assertEquals('Ordered', $invoice->getState());
  291:         $this->assertFalse($actual);

DiscountOfficeItems • tests/library/Admin/Workflow/Storage/DbTest.php:
   36:         $this->assertEquals($xmlWorkflow, $dbWorkflow);
   44:             $this->assertEquals('Could not load workflow definition.', $e->getMessage());
   57:             $this->assertEquals('Could not load workflow definition.', $e->getMessage());
   73:             $this->assertEquals('Could not load workflow definition.', $e->getMessage());
  114:             $this->assertEquals('Could not load workflow definition.', $e->getMessage());

DiscountOfficeItems • tests/library/Admin/Workflow/Storage/XmlTest.php:
   43:         $this->assertEquals(
   48:         $this->assertEquals($numNodes, count($this->workflow));
   78:         $this->assertEquals($expected, $actual);
   83:         $this->assertTrue($document->relaxngValidate($this->schema));
   95:         $this->assertEquals(1, count($this->workflow));
   98:         $this->assertEquals(2, count($this->workflow));
  102:         $this->assertFileEquals(
  108:         $this->assertEquals(2, count($this->workflow));
  111:         $this->assertEquals(1, count($this->workflow));
  116:         $this->assertEquals(3, count($this->workflow));
  120:         $this->assertFileEquals(
  153:             $this->assertEquals('Could not load workflow definition.', $e->getMessage());
  188:         $this->assertEquals($expected, $actual);
  217:         $this->assertEquals(

DiscountOfficeItems • tests/library/Admin/Workflow/VariableHandler/CartIsEmptyTest.php:
  25:         $this->assertInstanceOf(\ezcWorkflowVariableHandler::class, $this->fixture);
  67:         $this->assertTrue($actual);
  76:         $this->assertFalse($actual);

DiscountOfficeItems • tests/library/Admin/Workflow/VariableHandler/OrderIsPaidTest.php:
  64:         $this->assertEquals($orderIsPaid, $actual);

DiscountOfficeItems • tests/library/Admin/Workflow/VariableHandler/OrderIsRefundedTest.php:
  64:         $this->assertEquals($orderIsRefunded, $actual);

DiscountOfficeItems • tests/library/Admin/Workflow/VariableHandler/OrderIsShippableTest.php:
  64:         $this->assertEquals($orderIsShippable, $actual);

DiscountOfficeItems • tests/library/Admin/Workflow/VariableHandler/SubscriptionIsEmptyTest.php:
   26:         $this->assertInstanceOf(\ezcWorkflowVariableHandler::class, $this->fixture);
   70:         $this->assertTrue($actual);
   81:         $this->assertFalse($actual);
   92:         $this->assertFalse($actual);
  102:         $this->assertTrue($actual);

DiscountOfficeItems • tests/library/Admin/Workflow/VariableHandler/SubscriptionTest.php:
  34:         $this->assertInstanceOf(\ezcWorkflowVariableHandler::class, $this->fixture);
  61:         $this->assertSame($subscription, $actual);

DiscountOfficeItems • tests/library/Doi/StoreTest.php:
   103:         $this->assertFalse($actual->getExpressProcessing());
   119:         $this->assertFalse($actual->getExpressProcessing());
   223:         $this->assertEquals(Doi_Store::STORE_ID, $actual);
   230:         $this->assertEquals(Doi_Store::DOMAIN, $actual);
   293:         $this->assertCount(1, $shippingRefundList);
   296:         $this->assertEquals(
   698:         $this->assertEquals(['updateGrandTotal', 'setTaxes', 'updateGrandTotal'], $actual);
   843:         $this->assertNotContains('total B', $totalTitles);
   844:         $this->assertNotContains('total C', $totalTitles);
   845:         $this->assertContains('total Custom', $totalTitles);
   954:         $this->assertNotContains('total B', $totalTitles);
   955:         $this->assertNotContains('total C', $totalTitles);
   956:         $this->assertContains('total Custom', $totalTitles);
  1063:         $this->assertEquals($success, $actual);

DiscountOfficeItems • tests/library/Doi/Store/OrderCancelListenerTest.php:
   55:         $this->assertInstanceOf(EventSubscriberInterface::class, $this->fixture);
   62:         $this->assertEquals(['onOrderCancel' => 'onOrderCancel'], $actual);
  187:         $this->assertTrue($event->success);
  222:         $this->assertFalse($event->success);
  260:         $this->assertFalse($event->success);
  284:         $this->assertTrue($event->success);
  314:         $this->assertFalse($event->success);

DiscountOfficeItems • tests/library/Doi/Store/PriceProviderTest.php:
   129:         $this->assertEquals($expectedChannelPricing, $actualChannelPricing);
   152:         $this->assertEquals($expected, $actual);
   165:         $this->assertEquals([], $behavior->get('channel_pricing', $channelList));
   186:         $this->assertPricePointsMatch($expected, $this->fixture->getAvailablePrices($product, $bulk));
   514:             $this->assertNull($result);
   518:         $this->assertPricePointsMatch([$expected], [$result]);
   767:         $this->assertPricePointsMatch($expected, $actual);
   833:             $this->assertNull($result);
   837:         $this->assertPricePointsMatch([$expected], [$result]);
  1069:         $this->assertCount(count($expected), $actual);
  1070:         $this->assertPricePointsMatch($expected, $actual);
  1390:             $this->assertInstanceOf(
  1404:         $this->assertEquals($expected, $trimmedActual, $message);

DiscountOfficeItems • tests/library/Dx/ArrayUtilityTest.php:
   25:         $this->assertEquals($expected, ArrayUtility::callMethodOnList($input, $method));
   43:         $this->assertEquals($expected, ArrayUtility::callMethodOnList(new \ArrayObject($input), $method));
   64:         $this->assertEquals($expected, ArrayUtility::getIdList(new \ArrayObject($input), $method));
   79:         $this->assertEquals($expected, ArrayUtility::getIdList($expected, $method));
   95:         $this->assertEquals($key, ArrayUtility::findCaseInsensitiveKey($input, $seek));
   96:         $this->assertEquals($expected, ArrayUtility::getByCaseInsensitiveKey($input, $seek));
  100:         $this->assertEquals($key, ArrayUtility::findCaseInsensitiveKey($input, $seek));
  101:         $this->assertEquals($expected, ArrayUtility::getByCaseInsensitiveKey($input, $seek));
  111:         $this->assertEquals($expected, $result);

DiscountOfficeItems • tests/library/Dx/DateIntervalsTest.php:
  19:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • tests/library/Dx/DelimitedFileReaderTest.php:
    25:         $this->assertFalse($result);
    41:         $this->assertFalse($result);
    62:         $this->assertEquals($test1, $test2);
    63:         $this->assertEquals($dfr->getRawLine(), $dfr2->getRawLine());
    84:         $this->assertEquals($test1, $test2);
    85:         $this->assertEquals($dfr->getRawLine(), $dfr2->getRawLine());
   145:         $this->assertNotEquals($test1, $test2);
   146:         $this->assertNotEquals($dfr->getRawLine(), $dfr2->getRawLine());
   173:         $this->assertEquals($position1, $position2);
   174:         $this->assertEquals($test1, $test2);
   175:         $this->assertEquals($dfr->getRawLine(), $dfr2->getRawLine());
   200:         $this->assertNotEquals($position1, $position2);
   201:         $this->assertEquals($test1, $test2);
   202:         $this->assertEquals($dfr->getRawLine(), $dfr2->getRawLine());
   247:         $this->assertEquals($test1, $test2);
   248:         $this->assertEquals($test4, $test3);
   270:         $this->assertNotEquals($test1, $test2);
   271:         $this->assertNotEquals($dfr->getRawLine(), $dfr2->getRawLine());
   296:         $this->assertEquals($test1, $test2);
   297:         $this->assertEquals($test4, $test3);
   319:         $this->assertNotEquals($test1, $test2);
   320:         $this->assertNotEquals($dfr->getRawLine(), $dfr2->getRawLine());
   336:         $this->assertFalse($dfr->pointerValid());
   357:         $this->assertNotEquals($dfr->getHeader(), $dfr2->getHeader());
   384:         $this->assertEquals($headers, $reader->getHeader());
   393:         $this->assertEquals($headers, $reader->getHeader());
   417:         $this->assertEquals($dfr->getHeader(), $dfr2->getHeader());
   445:         $this->assertNotEquals($dfr->getHeader(), $dfr2->getHeader());
   471:         $this->assertEquals($dfr->getHeader(), $dfr2->getHeader());
   497:         $this->assertEquals($dfr->getHeader(), $dfr2->getHeader());
   519:         $this->assertEquals($position+3, $dfr->getPosition());
   527:         $this->assertEquals($expected, $line);
   566:         $this->assertEquals($expected, $line);
   590:         $this->assertEquals(3, count($line));
   657:         $this->assertEquals($dfr->getHeader(), $dfr2->getHeader());
   680:         $this->assertEquals($expected, $line);
   710:         $this->assertEquals($expected, $line);
   712:         $this->assertNotEquals($test1, $test2);
   746:         $this->assertNotEquals($test1, $test2);
   747:         $this->assertEquals($header[0], $line[$header[0]]);
   748:         $this->assertEquals($header[2], $line[$header[2]]);
   749:         $this->assertEquals($expected1, $header);
   750:         $this->assertEquals($expected2, $line);
   793:         $this->assertEquals(['Category ID', 'Category Name', 'Parent ID'], $header);
   794:         $this->assertEquals(5, count($file));
   816:         $this->assertEquals(3, count($file));
   843:         $this->assertEquals(['Category ID', 'Category Name', 'Parent ID'], $header);
   844:         $this->assertEquals(5, count($file));
   870:             $this->assertEquals(3, count($line));
   875:         $this->assertEquals(20, $count);
   901:         $this->assertEquals(6, count($file));
   902:         $this->assertEquals($header, $actualHeader);
   931:         $this->assertEquals(5, count($file));
   960:         $this->assertEquals($header, $actualHeader);
   964:                 $this->assertEquals($expected[$x]['line'], $file[$x]['line']);
   966:                 $this->assertEquals($expected[$x]['Category ID'], $file[$x]['Category ID']);
   967:                 $this->assertEquals($expected[$x]['Category Name'], $file[$x]['Category Name']);
   968:                 $this->assertEquals($expected[$x]['Parent ID'], $file[$x]['Parent ID']);
   994:         $this->assertEquals($header, $actualHeader);
  1020:         $this->assertEquals($header, $actualHeader);
  1047:         $this->assertEquals($header, $actualHeader);
  1073:         $this->assertEquals($header, $actualHeader);
  1101:         $this->assertEquals($header, $actualHeader);
  1129:         $this->assertEquals($header, $actualHeader);
  1158:         $this->assertEquals($header, $actualHeader);
  1175:         $this->assertEquals(0, $fixture->getProcessedLineCount());
  1189:         $this->assertEquals(0, $fixture->getProcessedLineCount());
  1191:         $this->assertEquals(1, $fixture->getProcessedLineCount());
  1193:         $this->assertEquals(2, $fixture->getProcessedLineCount());
  1195:         $this->assertEquals(2, $fixture->getProcessedLineCount());
  1214:         $this->assertEquals(2, $fixture->getProcessedLineCount());

DiscountOfficeItems • tests/library/Dx/FileUtilityTest.php:
  17:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • tests/library/Dx/FloatsTest.php:
  32:         $this->assertEquals($expected, Floats::compare($floatA, $floatB, $epsilon));
  78:         $this->assertEquals($expected, Floats::compareUsd($floatA, $floatB));

DiscountOfficeItems • tests/library/Dx/GeographyTest.php:
  14:         $this->assertEquals('', $actual);
  23:         $this->assertEquals($code, $actual);
  33:         $this->assertEquals($code, $actual);
  43:         $this->assertEquals($code, $actual);
  60:         $this->assertEquals('', $actual);
  70:         $this->assertEquals($expected, $actual);
  87:         $this->assertFalse($actual);

DiscountOfficeItems • tests/library/Dx/StringsTest.php:
   13:         $this->assertEquals($expectedOutput, Dx_Strings::makeSeoSlug($input));
   21:         $this->assertEquals($expected, Dx_Strings::unaccent($string));
   44:         $this->assertEquals($expectedOutput, Dx_Strings::stripShortWords($input, $limit, $delim));
   51:         $this->assertLessThan(strlen($compressAble), strlen($compressed), 'The compression failed to actually shrink the data');
   54:         $this->assertEquals($compressAble, $uncompressed, 'The compression is not lossless');
   56:         $this->assertNotRegExp('/[\'"]/', $compressed, 'Compressed data contains problem characters');
   63:         $this->assertLessThan(strlen(serialize($compressAble)), strlen($compressed), 'The compression failed to actually shrink the data');
   66:         $this->assertEquals($compressAble, $uncompressed, 'The compression is not lossless');
   68:         $this->assertNotRegExp('/[\'"]/', $compressed, 'Compressed data contains problem characters');
   99:         $this->assertTrue(strlen($output) < strlen($sample), 'Compression did not shrink sample data');
  101:         $this->assertEquals($sample, $output, 'Uncompressed data does not match original input');
  107:         $this->assertTrue(strlen($output) < (strlen($sample)) * count($aSample), 'Compression did not shrink sample data');
  109:         $this->assertEquals($aSample, $output, 'Uncompressed data does not match original input');
  117:         $this->assertEquals($expectedOutput, Dx_Strings::ellipses($str, $length, $ellipsis, $soft));
  181:         $this->assertEquals($expected, $actual);
  246:         $this->assertEquals($expected, $actual);
  288:         $this->assertEquals($expected, $actual);
  298:         $this->assertEquals($expected, $actual);
  308:         $this->assertEquals($expected, $actual);
  324:         $this->assertSame($expected, Dx_Strings::startsWith($haystack, $needle));

DiscountOfficeItems • tests/library/Dx/SuppressErrorTest.php:
  22:         $this->assertFalse($this->fixture->hasError());
  23:         $this->assertEquals('', $this->fixture->getLastMessage());
  30:         $this->assertFalse($this->fixture->hasError());
  35:         $this->assertTrue($this->fixture->hasError());
  36:         $this->assertEquals($message, $this->fixture->getLastMessage());
  43:         $this->assertFalse($this->fixture->hasError());
  50:         $this->assertTrue($this->fixture->hasError());
  51:         $this->assertCount($count, $this->fixture->getErrorList());
  69:         $this->assertEquals($message, $this->fixture->getLastMessage());
  80:         $this->assertFalse($this->fixture->hasError());
  93:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • tests/library/Dx/TrackingTest.php:
   21:         $this->assertEquals($expected, $actual);
   57:         $this->assertEquals($error, $actual);
   70:         $this->assertEquals($expected, $actual);
   97:         $this->assertEquals($expected, $actual);
  128:         $this->assertEquals($expected, $actual);
  183:         $this->assertEquals($expected, $actual);
  216:         $this->assertNull($actual);
  228:         $this->assertEquals($when, $actual);
  246:         $this->assertEquals($expected, $actual);
  310:         $this->assertEquals($activityList, $actual);

DiscountOfficeItems • tests/library/Dx/XmlTest.php:
   13:         $this->assertTrue($results instanceof SimpleXMLElement, 'Unexpected return value');
   15:         $this->assertXmlStringEqualsXmlString($expectedOutput, $results->asXML());
   24:         $this->assertTrue($results instanceof DOMDocument, 'Unexpected return value');
   26:         $this->assertXmlStringEqualsXmlString($expectedOutput, $results->saveXML());
   32:         $this->assertTrue($results instanceof DOMDocument, 'Unexpected return value');
   34:         $this->assertXmlStringEqualsXmlString('<tag/>', $results->saveXML());
   57:         $this->assertEquals($expectedOutput, $results);
  231:         $this->assertEquals([$name => $value], $actual);
  246:         $this->assertEquals($value, $actual);
  262:         $this->assertEquals($value, $actual);
  271:         $this->assertNull($actual);
  311:         $this->assertEquals($value, $actual);
  322:         $this->assertNull($actual);
  339:         $this->assertEquals($value, $actual);
  354:         $this->assertNull($actual);
  366:         $this->assertEquals($expected, $actual);
  409:         $this->assertEquals($expected, $actual);
  427:         $this->assertEquals('', $actual);
  437:         $this->assertEquals($expected, $actual);
  449:         $this->assertEquals($expected, trim($actual));
  546:         $this->assertTrue($pass);
  598:         $this->assertFalse($pass);
  600:         $this->assertStringContainsString($expectedError, $errorMsg);

DiscountOfficeItems • tests/library/Dx/Cart/PricePointTest.php:
   17:         $this->assertEquals($price, $fixture->getPrice());
   26:         $this->assertEquals($minQty, $fixture->getMinQty());
   35:         $this->assertEquals($blockSize, $fixture->getBlockSize());
   44:         $this->assertEquals($minQty, $fixture->getBlockSize());
   53:         $this->assertEquals($flags, $fixture->getFlags());
   62:         $this->assertEquals($channel, $fixture->getChannel());
   74:         $this->assertEquals($expiresOn, $fixture->getExpiresOn());
   85:         $this->assertEquals($expiresOn, $fixture->getExpiresOn());
   94:         $this->assertEquals($maxQty, $fixture->getMaxQty());
  101:         $this->assertEquals(PHP_INT_MAX, $fixture->getMaxQty());
  108:         $this->assertEquals(PHP_INT_MAX, $fixture->getMaxQty());

DiscountOfficeItems • tests/library/Dx/Event/Logger/ContextListenerTest.php:
  46:         $this->assertEquals($agent, $this->logger->getAgent());
  47:         $this->assertEquals($reason, $this->logger->getReason());
  51:         $this->assertEquals($wasAgent, $this->logger->getAgent());
  52:         $this->assertEquals($wasReason, $this->logger->getReason());

DiscountOfficeItems • tests/library/Dx/Event/Logger/DbTest.php:
  33:         $this->assertTrue(!empty($origAgent));
  36:         $this->assertEquals('Tester', $this->fixture->getAgent());
  42:         $this->assertEquals('Unit testing', $this->fixture->getReason());
  48:         $this->assertEquals(123, $this->fixture->getEventGroupId());
  51:         $this->assertEquals(null, $this->fixture->getEventGroupId());
  59:         $this->assertEquals(null, $this->fixture->getEventGroupId());
  66:         $this->assertTrue(!empty($id));
  67:         $this->assertEquals($id, $this->fixture->getEventGroupId());
  81:         $this->assertEmpty($id);

DiscountOfficeItems • tests/library/Dx/FieldHandler/AbstractTest.php:
  28:         $this->assertInstanceOf(Dx_FieldHandler_Interface::class, $this->fixture);
  33:         $this->assertFalse($this->fixture->supportsSubfield());

DiscountOfficeItems • tests/library/Dx/FieldHandler/ArrayFieldTest.php:
  25:         $this->assertInstanceOf(Dx_FieldHandler_Abstract::class, $this->fixture);
  30:         $this->assertTrue($this->fixture->supportsSubfield());

DiscountOfficeItems • tests/library/Dx/FieldHandler/CollectionTest.php:
  104:         $this->assertEquals(
  114:         $this->assertEquals(array_keys($value), [$invocationList[0]->getParameters()[0]]);
  115:         $this->assertSame($object, $invocationList[1]->getParameters()[0]);
  116:         $this->assertEquals(reset($value), $invocationList[1]->getParameters()[1]);

DiscountOfficeItems • tests/library/Dx/FieldHandler/DoctrineReferenceTest.php:
  53:         $this->assertEquals($associationId, $this->fixture->getValue($object));
  63:         $this->assertEquals($associationId, $object->getParentId());
  64:         $this->assertInstanceOf(Categories::class, $object->getParent());

DiscountOfficeItems • tests/library/Dx/FieldHandler/FactoryTest.php:
  50:         $this->assertEquals(Product::OBJECT_TYPE, $actual->getObjectType());
  58:         $this->assertNotSame($first, $second);

DiscountOfficeItems • tests/library/Dx/FieldHandler/ManyToOneJoinTest.php:
  46:         $this->assertEquals($joined->getId(), $this->fixture->getValue($object));
  54:         $this->assertNull($this->fixture->getValue($object));

DiscountOfficeItems • tests/library/Dx/FieldHandler/SnapshotLoggerFactoryTest.php:
  37:         $this->assertInstanceOf(SnapshotLogger::class, $snapshot);

DiscountOfficeItems • tests/library/Dx/FieldHandler/ChangeEvent/DbLoggerTest.php:
   93:         $this->assertEquals($this->fieldHandler->getObjectType(), $row['object_type']);
   94:         $this->assertEquals($this->fieldHandler->getFieldName(), $row['field']);
   95:         $this->assertEquals($this->fieldHandler->getSubfield(), $row['subfield']);
   96:         $this->assertEquals('Add', $row['change_type']);
  114:         $this->assertEquals($this->fieldHandler->getObjectType(), $row['object_type']);
  115:         $this->assertEquals($this->fieldHandler->getFieldName(), $row['field']);
  116:         $this->assertEquals($this->fieldHandler->getSubfield(), $row['subfield']);
  117:         $this->assertEquals('Modify', $row['change_type']);
  135:         $this->assertEquals($this->fieldHandler->getObjectType(), $row['object_type']);
  136:         $this->assertEquals($this->fieldHandler->getFieldName(), $row['field']);
  137:         $this->assertEquals($this->fieldHandler->getSubfield(), $row['subfield']);
  138:         $this->assertEquals('Delete', $row['change_type']);
  154:         $this->assertEmpty($row);
  170:         $this->assertEmpty($row);
  193:         $this->assertEquals('a:1:{i:0;i:1;}', $row['object_id']);
  194:         $this->assertEquals($this->fieldHandler->getObjectType(), $row['object_type']);
  195:         $this->assertEquals($this->fieldHandler->getFieldName(), $row['field']);
  196:         $this->assertEquals($this->fieldHandler->getSubfield(), $row['subfield']);
  197:         $this->assertEquals('Add', $row['change_type']);

DiscountOfficeItems • tests/library/Dx/FieldHandler/Customer/FlagTest.php:
   37:         $this->assertInstanceOf(Dx_FieldHandler_Abstract::class, $this->fixture);
   44:         $this->assertNull($actual);
   67:         $this->assertNull($actual);
   86:         $this->assertEquals([$flagNameA, $flagNameB], $actual);
  122:         $this->assertSame($this->fixture, $actual);
  155:         $this->assertSame($this->fixture, $actual);
  218:         $this->assertSame($this->fixture, $actual);

DiscountOfficeItems • tests/library/Dx/FieldHandler/Customer/TaxCertTest.php:
   41:         $this->assertInstanceOf(Dx_FieldHandler_Abstract::class, $this->fixture);
   59:             $this->assertEquals(
   64:             $this->assertEquals(
   69:             $this->assertEquals(
   74:             $this->assertEquals(
  114:         $this->assertNull($this->fixture->getValue(null));
  115:         $this->assertEquals([], $this->fixture->getSubfieldsKeys(null));
  146:             $this->assertFalse($this->fixture->fieldsAreEqual($customerA, $customerB));
  148:             $this->assertTrue($this->fixture->fieldsAreEqual($customerA, $customerB));
  157:         $this->assertSame($this->fixture, $actual);
  165:         $this->assertNull($actual);
  171:         $this->assertNotEquals('::', $this->fixture->getSubfield());
  177:         $this->assertSame($this->fixture, $actual);
  178:         $this->assertEquals('::', $this->fixture->getSubfield());
  207:             $this->assertFalse($this->fixture->fieldsAreEqual($customerA, $customerB));
  209:             $this->assertTrue($this->fixture->fieldsAreEqual($customerA, $customerB));
  215:         $this->assertTrue($this->fixture->supportsSubfield());

DiscountOfficeItems • tests/library/Dx/FieldHandler/Product/AltIdTest.php:
   44:         $this->assertInstanceOf(\Dx_FieldHandler_Abstract::class, $this->fixture);
   59:         $this->assertEquals($expectedOutput, $keys);
  101:             $this->assertNull($value);
  103:             $this->assertEquals($expectedOutput, $value);
  174:         $this->assertEquivalentAltIds($expected, $productA->getAlternateIDList());
  176:         $this->assertTrue($this->fixture->fieldsAreEqual($productA, $productB));
  246:         $this->assertTrue($this->fixture->fieldsAreEqual($productA, $productB));
  267:         $this->assertEquivalentAltIds($expected, $productA->getAlternateIDList());
  269:         $this->assertTrue($this->fixture->fieldsAreEqual($productA, $productB));
  289:         $this->assertFalse($this->fixture->valuesAreEqual($valueA, $valueB));
  290:         $this->assertFalse($this->fixture->valuesAreEqual($valueB, $valueA));
  292:         $this->assertTrue($this->fixture->valuesAreEqual($valueA, $valueA));
  293:         $this->assertTrue($this->fixture->valuesAreEqual($valueB, $valueB));
  301:         $this->assertNull($this->fixture->getValue(null));
  302:         $this->assertEquals([], $this->fixture->getSubfieldsKeys(null));
  307:         $this->assertTrue($this->fixture->supportsSubfield());
  327:         $this->assertEquals($expected, $actualBits);

DiscountOfficeItems • tests/library/Dx/FieldHandler/Product/AttributeTest.php:
   71:         $this->assertInstanceOf(\Dx_FieldHandler_Interface::class, $this->fixture);
   83:         $this->assertNotEmpty($keyList);
   91:             $this->assertEquals($expectedOutput, $this->fixture->valuesAreEqual($aValue, $bValue));
   92:             $this->assertEquals($expectedOutput, $this->fixture->fieldsAreEqual($aProduct, $bProduct));
   93:             $this->assertEquals($expectedOutput, $this->fixture->valuesAreEqual($bValue, $aValue));
   94:             $this->assertEquals($expectedOutput, $this->fixture->fieldsAreEqual($bProduct, $aProduct));
  100:         $this->assertNull($this->fixture->getValue(null));
  101:         $this->assertEquals([], $this->fixture->getSubfieldsKeys(null));
  121:             $this->assertFalse($this->fixture->fieldsAreEqual($aProduct, $bProduct));
  124:             $this->assertTrue($this->fixture->fieldsAreEqual($aProduct, $bProduct));
  143:             $this->assertFalse($this->fixture->fieldsAreEqual($aProduct, $bProduct));
  145:             $this->assertTrue($this->fixture->fieldsAreEqual($aProduct, $bProduct));
  176:         $this->assertTrue($this->fixture->supportsSubfield());

DiscountOfficeItems • tests/library/Dx/FieldHandler/Product/CostTest.php:
   52:         $this->assertInstanceOf(Dx_FieldHandler_Abstract::class, $this->fixture);
   69:             $this->assertEquals(
   74:             $this->assertEquals(
   79:             $this->assertEquals(
   84:             $this->assertEquals(
   94:         $this->assertNull($this->fixture->getValue(null));
   95:         $this->assertEquals([], $this->fixture->getSubfieldsKeys(null));
  122:             $this->assertFalse($this->fixture->fieldsAreEqual($aProduct, $bProduct));
  124:             $this->assertTrue($this->fixture->fieldsAreEqual($aProduct, $bProduct));
  170:         $this->assertEquals(12.34, $actual);
  188:             $this->assertFalse($this->fixture->fieldsAreEqual($aProduct, $bProduct));
  190:             $this->assertTrue($this->fixture->fieldsAreEqual($aProduct, $bProduct));
  212:         $this->assertCount(2, $callList);
  213:         $this->assertSame($callList[0]->getParameters()[0], $callList[1]->getParameters()[0]);
  216:         $this->assertEquals($cost, $newCost->getCost());
  217:         $this->assertEquals($product->getId(), $newCost->getProductId());
  218:         $this->assertEquals($this->account, $newCost->getAccount());
  250:         $this->assertCount(2, $callList);
  251:         $this->assertSame($costs[0], $callList[0]->getParameters()[0]);
  252:         $this->assertNull($callList[1]->getParameters()[0]);
  257:         $this->assertTrue($this->fixture->supportsSubfield());
  274:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • tests/library/Dx/FieldHandler/Product/FlagTest.php:
   69:             $this->assertNull($value);
   71:             $this->assertEquals(
  129:         $this->assertFeedsFlags(['flags' => [0, 1]], $productA);
  131:         $this->assertTrue($this->fixture->fieldsAreEqual($productA, $productB));
  144:         $this->assertFeedsFlags($expected, $productA);
  146:         $this->assertTrue($this->fixture->fieldsAreEqual($productA, $productB));
  221:         $this->assertFalse($this->fixture->valuesAreEqual($valueA, $valueB));
  222:         $this->assertFalse($this->fixture->valuesAreEqual($valueB, $valueA));
  224:         $this->assertTrue($this->fixture->valuesAreEqual($valueA, $valueA));
  225:         $this->assertTrue($this->fixture->valuesAreEqual($valueB, $valueB));
  233:         $this->assertNull($this->fixture->getValue(null));
  280:         $this->assertEquals($expectedFlags, $actualFlagList, 'Flags did not match expected');

DiscountOfficeItems • tests/library/Dx/FieldHandler/Product/JoinCategoryTest.php:
   63:         $this->assertInstanceOf(\Dx_FieldHandler_Abstract::class, $this->fixture);
   75:             $this->assertIsArray($value);
   76:             $this->assertCount($expectedCount, $value);
   78:             $this->assertNull($value);
  102:         $this->assertFalse($this->fixture->fieldsAreEqual($productA, $productB), 'Initial values are the same');
  104:         $this->assertTrue($this->fixture->fieldsAreEqual($productA, $productB));
  118:         $this->assertFalse($this->fixture->valuesAreEqual($valueA, $valueB));
  119:         $this->assertFalse($this->fixture->valuesAreEqual($valueB, $valueA));
  120:         $this->assertTrue($this->fixture->valuesAreEqual($valueA, $valueA));
  121:         $this->assertTrue($this->fixture->valuesAreEqual($valueB, $valueB));
  126:         $this->assertNull($this->fixture->getValue(null));
  139:         $this->assertTrue($this->fixture->supportsSubfield());

DiscountOfficeItems • tests/library/Dx/FieldHandler/Product/JoinRelatedTest.php:
   27:         $this->assertInstanceOf(\Dx_FieldHandler_Abstract::class, $this->fixture);
   40:             $this->assertIsArray($value);
   42:             $this->assertNull($value);
   44:         $this->assertEquals($expected, $value);
  117:         $this->assertEquals($expected, $this->fixture->getValue($product));
  183:         $this->assertFalse($this->fixture->valuesAreEqual($valueA, $valueB));
  184:         $this->assertFalse($this->fixture->valuesAreEqual($valueB, $valueA));
  185:         $this->assertTrue($this->fixture->valuesAreEqual($valueA, $valueA));
  186:         $this->assertTrue($this->fixture->valuesAreEqual($valueB, $valueB));
  232:         $this->assertNull($this->fixture->getValue(null));
  245:         $this->assertTrue($this->fixture->supportsSubfield());

DiscountOfficeItems • tests/library/Dx/FieldHandler/SupplierAccount/StoreListTest.php:
   66:         $this->assertInstanceOf(\Dx_FieldHandler_Abstract::class, $this->fixture);
   78:         $this->assertEquals($storeIdList, $actual);
  102:         $this->assertEquals($newStoreIdList, $actual);
  107:         $this->assertEquals([], $this->fixture->getValue(null));
  116:         $this->assertEquals([], $supplierAccount->getStoreList()->toArray());

DiscountOfficeItems • tests/library/Dx/FileStore/AbstractProxyTest.php:
  34:         $this->assertEquals($return, $actual);
  54:         $this->assertEquals($return, $actual);

DiscountOfficeItems • tests/library/Dx/FileStore/CopyOnWriteTest.php:
   46:         $this->assertEquals($data, $cow->get($filename));
   68:         $this->assertEquals($expected, $cow->stat($filename));
   91:         $this->assertEquals($expected, $cow->stat($filename));
  111:         $this->assertEquals($data, $cow->get($filename));
  134:         $this->assertEquals($data, $cow->get($filename));
  156:         $this->assertEquals($url, $cow->getUrl($filename));
  178:         $this->assertEquals($url, $cow->getUrl($filename));

DiscountOfficeItems • tests/library/Dx/FileStore/DeleteWriteTest.php:
  42:         $this->assertEquals($return, $actual);
  68:         $this->assertEquals($return, $actual);

DiscountOfficeItems • tests/library/Dx/FileStore/LocalTest.php:
   51:         $this->assertEquals($data, $actual);
   64:         $this->assertEquals($data, $actual);
   75:         $this->assertEquals($data, $actual);
   90:         $this->assertFalse($actual);
  103:         $this->assertEquals($expected, $actual);
  110:         $this->assertFalse($actual);
  119:         $this->assertEquals($this->prefix.'/'.$path, $actual);
  130:         $this->assertTrue($actual);
  131:         $this->assertFalse(file_exists($path));
  146:         $this->assertFalse($actual);

DiscountOfficeItems • tests/library/Dx/FileStore/MimeAwareS3Test.php:
  126:         $this->assertFalse($actual);
  136:         $this->assertFalse($actual);
  187:         $this->assertTrue($actual);

DiscountOfficeItems • tests/library/Dx/FileStore/ModifyNameTest.php:
  47:         $this->assertEquals($return, $actual);
  70:         $this->assertEquals($return, $actual);

DiscountOfficeItems • tests/library/Dx/FileStore/ModifyTest.php:
  47:         $this->assertEquals($return, $actual);
  71:         $this->assertEquals($return, $actual);

DiscountOfficeItems • tests/library/Dx/FileStore/PrefixStorageRetrievalTest.php:
  48:         $this->assertEquals($return, $actual);
  69:         $this->assertEquals($return, $actual);
  90:         $this->assertEquals($return, $actual);

DiscountOfficeItems • tests/library/Dx/FileStore/PrefixTest.php:
  32:         $this->assertEquals($return, $actual);
  53:         $this->assertEquals($return, $actual);
  74:         $this->assertEquals($return, $actual);

DiscountOfficeItems • tests/library/Dx/FileStore/ReadUrlTest.php:
   76:         $this->assertEquals($contents, $actual);
   93:         $this->assertEquals($contents, $actual);
  113:         $this->assertSame('', $actual);
  123:         $this->assertSame('', $actual);
  135:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • tests/library/Dx/FileStore/S3Test.php:
   41:         $this->assertInstanceOf(FileStoreInterface::class, $this->fixture);
   62:         $this->assertTrue($actual);
   72:         $this->assertFalse($actual);
   81:         $this->assertFalse($actual);
   90:         $this->assertFalse($actual);
  124:         $this->assertEquals($body, $actual);
  134:         $this->assertEquals('', $actual);
  171:         $this->assertFalse($actual);
  200:         $this->assertEquals($expected, $actual);
  249:         $this->assertEquals($url, $actual);

DiscountOfficeItems • tests/library/Dx/Filter/ArrayAccessorMapTest.php:
   14:         $this->assertIsCallable($fixture);
   43:         $this->assertEquals(
   69:         $this->assertEquals(
  112:         $this->assertEquals(
  140:         $this->assertEquals(
  163:         $this->assertEquals(
  192:         $this->assertEquals(
  221:         $this->assertEquals(
  246:         $this->assertEquals(

DiscountOfficeItems • tests/library/Dx/Filter/ArrayApplyTest.php:
  13:         $this->assertIsCallable($fixture);
  22:         $this->assertEquals($expectedOutput, $fixture($input));

DiscountOfficeItems • tests/library/Dx/Filter/CharEncodingTest.php:
  16:         $this->assertEquals($expectedOutput, $filter($string));
  37:         $this->assertEquals($encoding, $filter->getFromEncoding());
  45:         $this->assertEquals($encoding, $filter->getToEncoding());

DiscountOfficeItems • tests/library/Dx/Filter/CleanKeysTest.php:
  19:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • tests/library/Dx/Filter/CoalesceTest.php:
  13:         $this->assertIsCallable($fixture);
  22:         $this->assertEquals($expectedOutput, $fixture($input));

DiscountOfficeItems • tests/library/Dx/Filter/LiToArrayTest.php:
  29:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • tests/library/Dx/Filter/MapEavTest.php:
  17:         $this->assertEquals($expectedOutput, $fixture($input));

DiscountOfficeItems • tests/library/Dx/Filter/ModifyArrayAccessorMapTest.php:
   14:         $this->assertIsCallable($fixture);
   43:         $this->assertEquals(
   86:         $this->assertEquals(
  114:         $this->assertEquals(
  137:         $this->assertEquals(
  166:         $this->assertEquals(
  195:         $this->assertEquals(
  220:         $this->assertEquals(

DiscountOfficeItems • tests/library/Dx/Filter/PregMatchTest.php:
  23:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • tests/library/Dx/Filter/PregReplaceTest.php:
  24:         $this->assertEquals($replaceAnchor.$filler, $filtered);

DiscountOfficeItems • tests/library/Dx/Filter/RoundTest.php:
  14:         $this->assertIsCallable($fixture);
  24:         $this->assertEquals(1, $actual);
  34:         $this->assertEquals(1.2, $actual);
  44:         $this->assertEquals(1.3, $actual);

DiscountOfficeItems • tests/library/Dx/Filter/ScaleTest.php:
  15:         $this->assertIsFloat($actual);
  16:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • tests/library/Dx/Filter/StaticValueTest.php:
  14:         $this->assertIsCallable($fixture);
  23:         $this->assertNull($actual);
  33:         $this->assertEquals($value, $actual);
  43:         $this->assertEquals($value, $actual);
  53:         $this->assertEquals($value, $actual);

DiscountOfficeItems • tests/library/Dx/Filter/TranslateValueTest.php:
  14:         $this->assertIsCallable($fixture);
  26:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • tests/library/Dx/Filter/Array/GetElementTest.php:
  30:         $this->assertIsCallable($this->fixture);
  35:         $this->assertEquals([], call_user_func($this->fixture, [rand()]));
  43:         $this->assertEquals([$this->key => $value], call_user_func($this->fixture, $input));

DiscountOfficeItems • tests/library/Dx/Filter/Array/MergeTest.php:
  24:         $this->assertIsCallable($this->fixture);
  29:         $this->assertEquals([], ($this->fixture)([]));
  42:         $this->assertEquals(['a', 'b', 'c' => 'e'], $actual);

DiscountOfficeItems • tests/library/Dx/Filter/Array/PiecesTest.php:
   24:         $this->assertIsCallable($this->fixture);
   29:         $this->assertEquals('', ($this->fixture)([]));
   34:         $this->assertEquals('', ($this->fixture)([uniqid(), uniqid(), uniqid()]));
   42:         $this->assertEquals('', $fixture([uniqid(), uniqid(), uniqid()]));
   71:         $this->assertEquals($expected, $fixture($valueList));
   98:         $this->assertEquals($expected, $fixture($valueList));
  124:         $this->assertEquals($expected, $fixture($valueList));
  147:         $this->assertEquals($expected, $fixture($valueList));

DiscountOfficeItems • tests/library/Dx/Filter/Array/To/CsvTest.php:
   23:         $this->assertEquals($value, $this->fixture->getFieldSeperator());
   30:         $this->assertEquals($value, $this->fixture->getFieldEnclose());
   37:         $this->assertEquals($value, $this->fixture->getFieldEncloseFor());
   44:         $this->assertEquals($value, $this->fixture->getEol());
   51:         $this->assertEquals($value, $this->fixture->getFieldTranslateEscape());
   58:         $this->assertEquals($value, $this->fixture->getFieldTranslateTrim());
   65:         $this->assertEquals($value, $this->fixture->getCharsetFrom());
   72:         $this->assertEquals($value, $this->fixture->getCharsetTo());
   80:         $this->assertEquals($expectedOutput, ($this->fixture)($input));
   96:         $this->assertEquals($expectedOutput, $this->fixture->filterField($input));
  100:         $this->assertEquals($expectedOutputBare, $this->fixture->filterField($input));

DiscountOfficeItems • tests/library/Dx/Filter/Array/To/TabTest.php:
   23:         $this->assertEquals($value, $this->fixture->getFieldSeperator());
   30:         $this->assertEquals($value, $this->fixture->getFieldEnclose());
   37:         $this->assertEquals($value, $this->fixture->getFieldEncloseFor());
   44:         $this->assertEquals($value, $this->fixture->getEol());
   51:         $this->assertEquals($value, $this->fixture->getFieldTranslateEscape());
   58:         $this->assertEquals($value, $this->fixture->getFieldTranslateTrim());
   65:         $this->assertEquals($value, $this->fixture->getCharsetFrom());
   72:         $this->assertEquals($value, $this->fixture->getCharsetTo());
   80:         $this->assertEquals($expectedOutput, ($this->fixture)($input));
   96:         $this->assertEquals($expectedOutput, $this->fixture->filterField($input));
  100:         $this->assertEquals($expectedOutputBare, $this->fixture->filterField($input));

DiscountOfficeItems • tests/library/Dx/Filter/Csv/To/ArrayTest.php:
  24:         $this->assertEquals($expectedOutput, ($this->fixture)($line));
  41:         $this->assertEquals($expectedOutput, ($this->fixture)($line));
  58:         $this->assertEquals($expectedOutput, ($this->fixture)($line));

DiscountOfficeItems • tests/library/Dx/Filter/Tab/To/ArrayTest.php:
  24:         $this->assertEquals($expectedOutput, ($this->fixture)($line));
  40:         $this->assertEquals($expectedOutput, ($this->fixture)($line));

DiscountOfficeItems • tests/library/Dx/Ftp/FtpTest.php:
  47:         $this->assertEquals(
  66:         $this->assertEquals(self::FILE_CONTENT, stream_get_contents($fh));
  79:         $this->assertEquals(self::FILE_CONTENT, file_get_contents($path));
  87:         $this->assertEquals(self::FILE_CONTENT, $this->ftp->get('a story.txt'));

DiscountOfficeItems • tests/library/Dx/Import/AbstractDataSourceFileReaderTest.php:
   46:         $this->assertEquals(
   61:         $this->assertEquals(
   78:         $this->assertEmpty($actual);
   94:         $this->assertEmpty($actual);
  111:         $this->assertEmpty($actual);
  130:         $this->assertEquals(
  147:         $this->assertCount(
  160:         $this->assertCount(
  176:         $this->assertEquals($input, $this->fixture->getProvidedFields());

DiscountOfficeItems • tests/library/Dx/Import/ArrayDifferenceHandlerTest.php:
   126:         $this->assertCount(count($fieldList), $this->fieldHandlerList);
   150:                     $this->assertEquals($start.'/'.$count, trim($output->fetch()));
   175:         $this->testLog->assertMessageLogged(LogLevel::ERROR, ArrayDifferenceHandler::ERROR_PARSE_NEW);
   201:         $this->testLog->assertLogsContainsRegex('/'.$message.'/');
   231:         $this->testLog->assertLogsContainsRegex('/'.$message.'/');
   299:         $this->testLog->assertLogsContains(ArrayDifferenceHandler::ERROR_MULTIPLE_ITEMS_MAPPED);
   532:             $this->testLog->assertLogsContainsRegex('/Adding failed/');
   533:             $this->testLog->assertLogsContainsRegex('/'.$message.'/');
   571:         $this->testLog->assertLogsContains('Added object');
   605:         $this->assertSame(
   611:         $this->assertEquals(
   656:         $this->assertSame(
   662:         $this->assertEquals(
   707:         $this->assertSame(
   713:         $this->assertEquals(
   769:         $this->assertSame(
   775:         $this->assertEquals(
   831:         $this->assertSame(
   837:         $this->assertEquals(
   893:         $this->assertSame(
   899:         $this->assertEquals(
  1039:         $this->assertEquals(
  1098:         $this->assertEquals(
  1156:         $this->assertEquals(
  1192:         $this->testLog->assertLogsContains('Saved object');
  1221:         $this->testLog->assertLogsContainsRegex('/'.$message.'/');
  1222:         $this->testLog->assertLogsContainsRegex('/Saving skipped/');
  1253:             $this->testLog->assertLogsContainsRegex('/'.$message.'/');
  1254:             $this->testLog->assertLogsContainsRegex('/Saving failed/');

DiscountOfficeItems • tests/library/Dx/Import/CostTest.php:
  57:         $this->assertSame(count($invocations), $actualCount);
  76:         $this->assertSame(count($invocations), $actualCount);
  79:             $this->assertEquals($parameters[$index], $invocation->getParameters());

DiscountOfficeItems • tests/library/Dx/Import/EmptyDataSourceTest.php:
  25:         $this->assertInstanceOf(\IteratorAggregate::class, $this->fixture);
  30:         $this->assertInstanceOf(DataSourceInterface::class, $this->fixture);
  35:         $this->assertSame(0, $this->fixture->getStartPosition());
  40:         $this->assertNull($this->fixture->setStartPosition($this->isType('int')));
  45:         $this->assertNull($this->fixture->getVendorId($this->isType('array')));
  50:         $this->assertNull($this->fixture->getByVendorId($this->isType('scalar')));
  55:         $this->assertSame([], $this->fixture->getProvidedFields());
  60:         $this->assertEquals(new \EmptyIterator(), $this->fixture->getIterator());
  65:         $this->assertEquals(0, $this->fixture->count());

DiscountOfficeItems • tests/library/Dx/Import/UpdateDataRepositoryTest.php:
  33:         $this->assertInstanceOf(DataRepositoryInterface::class, $this->fixture);
  52:         $this->assertSame($foundObject, $this->fixture->findById(rand()));
  71:         $this->assertSame($found, $this->fixture->findForValue([rand()]));
  90:         $this->assertSame($found, $this->fixture->getDeletedFieldList(rand()));
  98:         $this->assertSame($saved, $this->fixture->save(rand(), [rand()]));

DiscountOfficeItems • tests/library/Dx/Import/DataRepository/AbstractProxyTest.php:
   43:         $this->assertEquals($expected, $actual);
   55:         $this->assertEquals($expected, $actual);
   67:         $this->assertEquals($expected, $actual);
   80:         $this->assertEquals($expected, $actual);
   92:         $this->assertEquals($expected, $actual);
  104:         $this->assertEquals($expected, $actual);
  127:         $this->assertEquals($expected, $actual);
  149:         $this->assertSame($fixture, $actual);

DiscountOfficeItems • tests/library/Dx/Import/DataRepository/IgnoreDeleteTest.php:
  34:         $this->assertEquals([], $actual);

DiscountOfficeItems • tests/library/Dx/Import/DataSource/FileObjectTest.php:
   18:         $this->assertEquals(['line' => $expectedLine], $fixture->current());
   19:         $this->assertEquals($expectedLine, $fixture->getRawLine());
   57:         $this->assertEquals($secondLine, $fixture->current());
   78:         $this->assertEquals($bytePositionList, $pos);
   87:         $this->assertFalse($fixture->valid());
   92:         $this->assertTrue($fixture->valid());
   96:         $this->assertTrue($fixture->valid());
  100:         $this->assertFalse($fixture->valid());
  112:         $this->assertEquals(
  131:         $this->assertEquals(
  154:         $this->assertEquals(
  173:         $this->assertEquals(
  199:         $this->assertEquals($headers, $reader->getHeader());
  204:         $this->assertEquals($headers, $reader->getHeader());
  217:         $this->assertEquals(
  237:         $this->assertEquals(
  305:         $this->assertEquals($headers, $fixture->getHeader());
  307:         $this->assertEquals(
  330:         $this->assertEquals(
  339:         $this->assertCount(21, $actual);
  354:         $this->assertEquals(
  362:         $this->assertCount(5, $actual);

DiscountOfficeItems • tests/library/Dx/Import/DataSource/Fileset/CollectionsTest.php:
  106:         $this->assertEquals([], $fileset->getFileList());
  115:         $this->assertEquals([], $this->fileset->getFileList());
  122:         $this->assertEquals($filelist, $this->fileset->getFileList());
  139:             $this->assertEquals($this->md5sums[$dataFile], $md5);
  154:             $this->assertEquals($this->md5sums[$dataFile], $md5);
  177:             $this->assertEquals($this->md5sums[$dataFile], $md5);
  191:             $this->assertStringContainsString('not exist', $e->getMessage());
  198:             $this->assertStringContainsString('Unable to open', $e->getMessage());
  226:             $this->assertStringContainsString('Unable to open', $e->getMessage());
  244:             $this->assertStringContainsString('does not exist', $e->getMessage());
  253:         $this->assertFalse($this->fileset->isFinilized());
  255:         $this->assertTrue($this->fileset->isFinilized());
  321:         $this->assertTrue($this->fileset->isFinilized());
  322:         $this->assertFalse($fileset->isFinilized());
  337:         $this->assertEquals(null, $this->fileset->getUri($filename));
  341:         $this->assertEquals($uri, $this->fileset->getUri($filename));
  345:         $this->assertEquals(null, $this->fileset->getUri($filename));
  364:         $this->assertEquals($filelist, $this->fileset->getFileList());
  366:         $this->assertEqualsWithDelta(
  372:         $this->assertEquals([$filename], $this->fileset->getCollectionList());
  394:         $this->assertEquals($filelist, $this->fileset->getFileList());
  396:         $this->assertEqualsWithDelta(
  402:         $this->assertEquals([$prefix.$filename], $this->fileset->getCollectionList());
  441:         $this->assertEquals($filelist, $this->fileset->getFileList());
  463:         $this->assertEquals($this->filenames[$samples[1]], $this->fileset->getFileList());
  490:         $this->assertEquals($filelist, $this->fileset->getFileList());
  492:         $this->assertEqualsWithDelta(
  498:         $this->assertEquals([$filename], $this->fileset->getCollectionList());
  504:         $this->assertEquals(
  509:         $this->assertEquals([$filename], $fileset->getCollectionList());
  518:         $this->assertFalse($this->fileset->getTimestamp('missing file'));

DiscountOfficeItems • tests/library/Dx/Import/DifferenceHandler/ActionDeciderTest.php:
  27:         $this->assertInstanceOf(ActionDeciderInterface::class, $this->fixture);
  41:         $this->assertEquals($action, $this->fixture->chooseAction($fh, $new, $old, $live));

DiscountOfficeItems • tests/library/Dx/Import/DifferenceHandler/ApplyActionDeciderTest.php:
  27:         $this->assertInstanceOf(ActionDeciderInterface::class, $this->fixture);
  43:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • tests/library/Dx/Import/Etilize/AbstractDataSourceTest.php:
  54:         $this->assertEquals($start, $this->fixture->getStartPosition());
  68:         $this->assertCount($rowCount, iterator_to_array($this->fixture));

DiscountOfficeItems • tests/library/Dx/Import/Etilize/FetchRawDataTest.php:
  49:         $this->assertEquals($fileset, $this->fetcher->getFileset());
  50:         $this->assertTrue($this->fetcher->getFileset()->isFinilized());
  54:         $this->assertNotEquals($fileset, $this->fetcher->getFileset());
  55:         $this->assertTrue($this->fetcher->getFileset()->isFinilized());
  76:         $this->assertNotEquals($fileset->getFileList(), $newList);
  77:         $this->assertNotEquals($newFileset->getFileList(), $newList);
  89:         $this->assertEquals($newList, $discontinuedList);
  90:         $this->assertNotEquals($fileset->getFileList(), $newList);
  91:         $this->assertNotEquals($newFileset->getFileList(), $newList);

DiscountOfficeItems • tests/library/Dx/Import/Etilize/RawImportTest.php:
   88:         $this->assertEquals(
  116:         $this->assertStringContainsString('Table name not specified', $output);
  117:         $this->assertStringContainsString('dummy.csv', $output);
  123:         $this->assertEquals(600, $size);
  129:         $this->assertEquals(600, $size);
  145:         $this->assertEquals(0, $size);
  174:         $this->assertEquals($count, $actualCount, $message);

DiscountOfficeItems • tests/library/Dx/Import/Etilize/AttributeName/DataSourceTest.php:
   36:         $this->assertEquals(
   47:         $this->assertCount(0, $this->fixture);
   74:         $this->assertCount(2, $this->fixture);
  114:         $this->assertEquals(

DiscountOfficeItems • tests/library/Dx/Import/Etilize/Category/DataSourceTest.php:
   57:         $this->assertEquals(
   68:         $this->assertCount(0, $this->fixture);
  100:         $this->assertCount(2, $this->fixture);
  152:         $this->assertEquals(

DiscountOfficeItems • tests/library/Dx/Import/Etilize/Manufacturer/DataSourceTest.php:
   36:         $this->assertEquals(
   47:         $this->assertCount(0, $this->fixture);
   72:         $this->assertCount(2, $this->fixture);
  102:         $this->assertEquals(

DiscountOfficeItems • tests/library/Dx/Import/Etilize/Product/BrandIdMapCallbackTest.php:
  46:         $this->assertIsCallable($this->fixture);
  56:         $this->assertIsArray($actual);
  79:         $this->assertTrue(in_array($actual[0], $idList), 'did not return an expected result');
  80:         $this->assertCount(1, $actual, 'did not return the expected number of results');
  98:         $this->assertEquals([$nameA, $nameB], $actual);

DiscountOfficeItems • tests/library/Dx/Import/Etilize/Product/DataSourceTest.php:
   66:         $this->assertEquals(
   88:         $this->assertCount(0, $this->fixture);
  150:         $this->assertCount(3, $this->fixture);
  680:         $this->assertEquals(
  726:         $this->assertEquals($this->fixture->current(), $this->fixture->getByVendorId($productid));
  734:         $this->assertEqualsWithDelta($expectedOutput, $this->fixture->convertWeight($row), 0.01, 'Weight Convertion Error');
  779:         $this->assertEquals($expectedOutput, $this->fixture->convertUom($row));
  825:         $this->assertEquals($expectedOutput, $this->fixture->filterString($string));

DiscountOfficeItems • tests/library/Dx/Import/Etilize/Product/NewMfgDataSourceTest.php:
   70:         $this->assertEquals($expected, $this->fixture->getProvidedFields());
   81:         $this->assertEquals($expected, $this->fixture->getVendorId($input));
   96:         $this->assertEquals($expected, $this->fixture->getByVendorId($input));
  112:         $this->assertEquals($expected, $this->fixture->getByVendorId($input));
  140:         $this->assertEquals($expected, $this->fixture->getByVendorId(rand()));
  168:         $this->assertEquals($expected, $this->fixture->getByVendorId(rand()));
  197:         $this->assertEquals($expected, $this->fixture->getByVendorId(rand()));
  202:         $this->assertCount(0, $this->fixture);
  214:         $this->assertCount(0, $this->fixture);
  226:         $this->assertCount(1, $this->fixture);
  239:         $this->assertCount(1, $this->fixture);
  240:         $this->assertCount(1, $this->fixture);
  276:         $this->assertEquals($expectedIdList, $actualIdList);
  308:         $this->assertEquals($start, $this->fixture->getStartPosition());
  313:         $this->assertCount(count($expectedIdList) - $start, $actualIdList);
  314:         $this->assertEmpty(array_diff($actualIdList, $expectedIdList));

DiscountOfficeItems • tests/library/Dx/Import/IdMapper/FilterOneTest.php:
  32:         $this->assertIsCallable($this->fixture);
  39:         $this->assertEquals('', call_user_func($this->fixture, []));
  51:         $this->assertEquals($expected, call_user_func($this->fixture, $input));

DiscountOfficeItems • tests/library/Dx/Import/IdMapper/FilterTest.php:
  32:         $this->assertIsCallable($this->fixture);
  39:         $this->assertEquals([], call_user_func($this->fixture, []));
  51:         $this->assertEquals($output, call_user_func($this->fixture, $input));

DiscountOfficeItems • tests/library/Dx/Import/IdMapper/MfgNameMapCallbackTest.php:
  45:         $this->assertIsCallable($this->fixture);
  54:         $this->assertIsArray($actual);
  81:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • tests/library/Dx/Import/Pipeline/CharactersetTest.php:
  24:         $this->assertIsCallable($this->fixture);
  32:         $this->assertEquals($expected, ($this->fixture)($input));

DiscountOfficeItems • tests/library/Dx/Import/Pipeline/MissingValueCleanupTest.php:
  24:         $this->assertIsCallable($this->fixture);
  33:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • tests/library/Dx/Import/Pipeline/ProductAltIdCleanupTest.php:
  24:         $this->assertIsCallable($this->fixture);
  32:         $this->assertEquals($productDataList, $actual);
  41:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • tests/library/Dx/Import/Pipeline/ProductAssignTicTest.php:
   43:         $this->assertIsCallable($this->fixture);
   52:         $this->assertEquals($input, call_user_func($this->fixture, $input));
  124:         $this->assertEquals($expected, $actual);
  147:         $this->assertEquals($expected, $actual);
  166:         $this->assertEquals($expected, $actual);
  197:         $this->assertEquals($expected, $actual);
  238:         $this->assertEquals($expected, $actual);
  269:         $this->assertEquals($expected, $actual);
  305:         $this->assertEquals($expected, $actual);
  333:         $this->assertEquals($productDataList, $actual);

DiscountOfficeItems • tests/library/Dx/Import/Pipeline/ProductCategorySubtreeTest.php:
   25:         $this->assertIsCallable($this->fixture);
   34:         $this->assertEquals($input, call_user_func($this->fixture, $input));
   47:         $this->assertEquals([], call_user_func($this->fixture, $input)['Categories']);
   59:         $this->assertEquals(
   87:         $this->assertEquals(
  114:         $this->assertEquals(

DiscountOfficeItems • tests/library/Dx/Import/Pipeline/ProductCostCleanupTest.php:
  24:         $this->assertIsCallable($this->fixture);
  32:         $this->assertEquals($productDataList, $actual);
  41:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • tests/library/Dx/Import/Pipeline/ProductExpandAttributeTest.php:
   44:         $this->assertIsCallable($this->fixture);
   52:         $this->assertEquals($productDataList, $actual);
   71:                 $this->assertEquals(E_USER_NOTICE, $errno);
   72:                 $this->assertEquals($message, $errstr);
   98:                 $this->assertEquals(E_USER_NOTICE, $errno);
   99:                 $this->assertEquals($message, $errstr);
  121:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • tests/library/Dx/Import/Pipeline/ProductImageCleanupTest.php:
  24:         $this->assertIsCallable($this->fixture);
  33:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • tests/library/Dx/Import/Pipeline/ProductMediaCleanupTest.php:
  24:         $this->assertIsCallable($this->fixture);
  33:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • tests/library/Dx/Import/Pipeline/ProductStateRestrictionTest.php:
  24:         $this->assertIsCallable($this->fixture);
  37:         $this->assertEquals($expectedAttributes, $actual['Attributes'], 'Review the attributes.');
  39:             $this->assertFalse(isset($actual['Restrictions']));
  41:             $this->assertEquals($expectedRestrictions, $actual['Restrictions'], 'Review the restrictions.');

DiscountOfficeItems • tests/library/Dx/Import/Pipeline/RelatedProductReferenceTest.php:
   36:         $this->assertEquals($input, call_user_func($this->fixture, $input));
   77:         $this->assertEquals(
  111:         $this->assertEquals(
  150:         $this->assertEquals(
  185:         $this->assertEquals(
  220:         $this->assertEquals(
  255:         $this->assertEquals(

DiscountOfficeItems • tests/library/Dx/Import/Pipeline/UniqueBulletPointListTest.php:
  24:         $this->assertIsCallable($this->fixture);
  32:         $this->assertEquals(
  42:         $this->assertEquals(

DiscountOfficeItems • tests/library/Dx/Import/Pipeline/UrlCleanupTest.php:
  24:         $this->assertIsCallable($this->fixture);
  42:         $this->assertEquals($dataList, $actual);
  53:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • tests/library/Dx/Inventory/AuditLoggingListenerTest.php:
   42:         $this->assertEquals($user, $this->listener->getUser());
   49:         $this->assertEquals($script, $this->listener->getScript());
   87:         $this->assertEquals(
  139:         $this->assertEquals($user, $this->listener->getUser());
  140:         $this->assertEquals($script, $this->listener->getScript());
  144:         $this->assertEquals($wasUser, $this->listener->getUser());
  145:         $this->assertEquals($wasScript, $this->listener->getScript());

DiscountOfficeItems • tests/library/Dx/Inventory/TrimegaPhantomInvListenerTest.php:
  135:         $this->assertEquals($mock, $this->fixture->getSupplier());
  148:         $this->assertInventory($expected);
  548:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • tests/library/Dx/Inventory/Service/CacheTest.php:
   41:         $this->assertInstanceOf(Dx_Inventory_Service_Interface::class, $this->fixture);
   54:         $this->assertEquals($dc, $actual);
   70:         $this->assertSame($this->fixture, $actual);
   86:         $this->assertSame($this->fixture, $actual);
  102:         $this->assertSame($this->fixture, $actual);
  115:         $this->assertSame($count, $this->fixture->getCount($product));
  116:         $this->assertSame($count, $this->fixture->getCount($product));
  132:         $this->assertSame($counts, $this->fixture->getCountList([$productA, $productB]));
  133:         $this->assertSame($counts, $this->fixture->getCountList([$productA, $productB]));
  146:         $this->assertSame($counts, $this->fixture->getCounts($product));
  147:         $this->assertSame($counts, $this->fixture->getCounts($product));
  161:         $this->assertSame($counts, $this->fixture->getCountDetailList([$productA, $productB]));
  162:         $this->assertSame($counts, $this->fixture->getCountDetailList([$productA, $productB]));
  177:         $this->assertSame($count, $this->fixture->getSupplierSkuCount($product, $supplierId, $sku));
  178:         $this->assertSame($count, $this->fixture->getSupplierSkuCount($product, $supplierId, $sku));
  192:         $this->assertSame($ts, $this->fixture->getSupplierCountTS($product, $supplierId));
  193:         $this->assertSame($ts, $this->fixture->getSupplierCountTS($product, $supplierId));
  207:         $this->assertSame($counts, $this->fixture->getCountsBySupplier($product));
  208:         $this->assertSame($counts, $this->fixture->getCountsBySupplier($product));
  248:         $this->assertSame($this->fixture, $actual);
  262:         $this->assertSame($this->fixture, $actual);

DiscountOfficeItems • tests/library/Dx/Inventory/Service/DbalInventoryTest.php:
    69:         $this->assertEquals($this->reserveDc, $this->fixture->getReserveDc());
    87:         $this->assertEquals(
    95:         $this->assertEquals($qtyA, $this->fixture->getCount($product));
   102:         $this->assertEquals(
   113:         $this->assertEquals(0, $this->fixture->getCount($product));
   118:         $this->assertEquals(
   126:         $this->assertEquals($qtyB, $this->fixture->getCount($product));
   147:             $this->assertInstanceOf(Dx_Inventory_Event::class, $invocation->getParameters()[1]);
   159:         $this->assertEquals(0, $prePostCount, 'More pre events than post events');
   188:         $this->assertEquals(
   194:         $this->assertEquals(
   200:         $this->assertEquals(
   207:         $this->assertEquals(
   245:         $this->assertEquals(
   251:         $this->assertEquals(
   257:         $this->assertEquals(
   264:         $this->assertEquals(
   309:         $this->assertEquals(
   315:         $this->assertEquals(
   321:         $this->assertEquals(
   328:         $this->assertEquals(
   372:         $this->assertEquals(
   378:         $this->assertEquals(
   384:         $this->assertEquals(
   391:         $this->assertEquals(
   411:         $this->assertEquals(
   419:         $this->assertEquals($qty, $this->fixture->getCount($product));
   423:         $this->assertEquals(
   434:         $this->assertEquals($qty, $this->fixture->getCount($product));
   437:         $this->assertEquals(
   451:         $this->assertEquals(
   462:         $this->assertEquals($qty, $this->fixture->getCount($product));
   481:         $this->assertEquals(
   489:         $this->assertEquals($count, $this->fixture->getCount($product));
   493:         $this->assertEquals(
   504:         $this->assertEquals($count, $this->fixture->getCount($product));
   507:         $this->assertEquals(
   521:         $this->assertEquals(
   532:         $this->assertEquals($count, $this->fixture->getCount($product));
   593:         $this->assertEquals($qtyX, $this->fixture->getSupplierSkuCount($product, $supplierId, $sku));
   594:         $this->assertEquals(0, $this->fixture->getSupplierSkuCount($product, $supplierId, $sku.'EA'));
   595:         $this->assertEquals(0, $this->fixture->getSupplierSkuCount($product, rand(), $sku));
   599:         $this->assertEquals($qtyX + $qtyY, $this->fixture->getSupplierSkuCount($product, $supplierId, $sku));
   600:         $this->assertEquals(0, $this->fixture->getSupplierSkuCount($product, rand(), $sku));
   619:         $this->assertEquals(0, $this->fixture->getSupplierSkuCount($product, $supplierId, $sku));
   620:         $this->assertEquals(0, $this->fixture->getSupplierSkuCount($product, $supplierId, $sku.'EA'));
   621:         $this->assertEquals(0, $this->fixture->getSupplierSkuCount($product, rand(), $sku));
   625:         $this->assertEquals($qtyX, $this->fixture->getSupplierSkuCount($product, $supplierId, $sku));
   626:         $this->assertEquals(0, $this->fixture->getSupplierSkuCount($product, rand(), $sku));
   657:         $this->assertEquals(
   707:         $this->assertEquals(
   732:         $this->assertFalse($this->fixture->getSupplierCountTS($product, $supplierId));
   735:         $this->assertEquals(
   790:         $this->assertEquals(
   847:         $this->assertEquals(
   901:         $this->assertEquals(
   911:         $this->assertEquals(
   915:         $this->assertEquals(0, $this->fixture->getCount($product));
   916:         $this->assertEquals([], $this->fixture->getCounts($product));
   955:         $this->assertEquals(
   976:         $this->assertEquals($qtyA + $qtyB - $reserveQty, $this->fixture->getCount($product));
   993:         $this->assertEquals($qtyX + $qtyY, $this->fixture->getCount($product));
   997:         $this->assertEquals(0, $this->fixture->getCount($product));
  1023:         $this->assertEquals(array_sum([$qtyM, $qtyN, $qtyO, $qtyP]), $this->fixture->getCount($product));
  1060:         $this->assertEquals(0, $this->fixture->getCount($product));
  1061:         $this->assertEquals([], $this->fixture->getCounts($product));
  1085:         $this->assertEquals(array_sum([$qtyA, $qtyB, $qtyC]), $this->fixture->getCount($product));
  1089:         $this->assertEquals($qtyC, $this->fixture->getCount($product));

DiscountOfficeItems • tests/library/Dx/Iterator/BufferedCallbackTest.php:
   62:         $this->assertEquals($callCount, $this->spy->getInvocationCount());
   75:         $this->assertEquals($callCount, $this->spy->getInvocationCount());
   99:             $this->assertCount(1, $invocation->getParameters());
  100:             $this->assertIsArray($call);
  101:             $this->assertLessThanOrEqual($this->bufferCount, count($call));
  104:         $this->assertEquals($expectedList, $actualList);

DiscountOfficeItems • tests/library/Dx/Iterator/DelimitedFileIteratorFactoryTest.php:
  18:         $this->assertEquals(

DiscountOfficeItems • tests/library/Dx/Iterator/ExcelDoubleHeaderTest.php:
  27:         $this->assertEquals(
  48:         $this->assertEquals(
  68:         $this->assertEquals(

DiscountOfficeItems • tests/library/Dx/Iterator/ExcelSheetHyperLinkTest.php:
  15:         $this->assertEquals(
  38:         $this->assertEquals(
  60:         $this->assertEquals(

DiscountOfficeItems • tests/library/Dx/Iterator/ExcelSheetTest.php:
   60:         $this->assertEquals(
   78:         $this->assertEquals(
   89:         $this->assertEquals(
  107:         $this->assertEquals(
  121:         $this->assertEquals(

DiscountOfficeItems • tests/library/Dx/Iterator/GroupByIteratorTest.php:
   16:         $this->assertCount(0, $fixture);
   43:         $this->assertEquals(
   94:         $this->assertEquals(
  145:         $this->assertEquals(

DiscountOfficeItems • tests/library/Dx/Iterator/JoinIteratorTest.php:
   25:         $this->assertCount(0, $this->fixture);
   32:         $this->assertCount(0, $this->fixture);
   50:         $this->assertEquals(2, $count);
   51:         $this->assertEquals(
   84:         $this->assertEquals(2, $count);
   85:         $this->assertEquals(
  146:         $this->assertEquals(3, $count);
  147:         $this->assertEquals(

DiscountOfficeItems • tests/library/Dx/Iterator/KeyFieldIteratorTest.php:
  16:         $this->assertCount(0, $fixture);
  43:         $this->assertEquals(
  86:         $this->assertEquals(

DiscountOfficeItems • tests/library/Dx/Iterator/LeftJoinIteratorTest.php:
   27:         $this->assertEquals([], $result);
   36:         $this->assertEquals([], $result);
   48:         $this->assertEquals(
   71:         $this->assertEquals(
  122:         $this->assertEquals(

DiscountOfficeItems • tests/library/Dx/Iterator/TransformCallbackIteratorTest.php:
  27:         $this->assertEquals($expected, iterator_to_array($fixture));

DiscountOfficeItems • tests/library/Dx/PHPUnit/CatalogTestCaseTest.php:
  36:             $this->assertEquals($timeStampDate->format("Y-m-d H:i:s:v:uP"), $createDate->format("Y-m-d H:i:s:v:uP"));

DiscountOfficeItems • tests/library/Dx/PHPUnit/Constraint/ArraySubsetTest.php:
  60:         $this->assertSame($expected, $constraint->evaluate($other, '', true));
  72:             $this->assertNotNull($comparisonFailure);
  73:             $this->assertStringContainsString("'foo' => 'bar'", $comparisonFailure->getExpectedAsString());
  74:             $this->assertStringContainsString("'baz' => 'bar'", $comparisonFailure->getActualAsString());
  82:         $this->assertTrue(
  95:         $this->assertTrue(

DiscountOfficeItems • tests/library/Dx/PHPUnit/Constraint/IsFileCsvFormattedCorrectlyTest.php:
  18:         $this->assertTrue($fixture->evaluate($other, '', true));

DiscountOfficeItems • tests/library/Dx/PHPUnit/Expose/Test.php:
  149:         $this->assertEquals($value, Dx_PHPUnit_Expose::get($obj, $property));
  152:         $this->assertEquals($now, Dx_PHPUnit_Expose::get($obj, $property));
  172:         $this->assertEquals($value, Dx_PHPUnit_Expose::getStatic($objType, $property));
  175:         $this->assertEquals($now, Dx_PHPUnit_Expose::getStatic($objType, $property));
  188:         $this->assertEquals($method, $return['method']);
  189:         $this->assertEquals($objType, $return['called']);
  201:         $this->assertEquals($method, $return['method']);
  202:         $this->assertEquals($objType, $return['called']);

DiscountOfficeItems • tests/library/Dx/Report/Generator/ActiveLossLeaderTest.php:
  106:         $this->assertEquals($expectedCount, $actual);
  206:         $this->assertEquals($expectedCount, count($actual));
  208:             $this->assertLineData($key, $lossLeaderList[$key], $resultLine);
  237:         $this->assertEquals($formattedExpected, $actual, 'Line '.$key.' did not match as expected');

DiscountOfficeItems • tests/library/Dx/Report/Result/ActiveLossLeaderTest.php:
  28:             $this->assertEquals($expected[$index], $result);

DiscountOfficeItems • tests/library/Dx/Report/Result/NewProductsTest.php:
  35:         $this->assertEquals($expected, $actual);
  51:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • tests/library/Dx/Report/Result/UnlinkedProductsTest.php:
  56:         $this->assertStringEqualsFile(
  70:         $this->assertEquals(
  79:         $this->assertEquals(

DiscountOfficeItems • tests/library/Dx/Report/Type/ActiveLossLeaderTest.php:
  105:         $this->assertEquals(['count' => $randValue], $actual);
  121:         $this->assertEquals(['data' => $randValue], $actual);

DiscountOfficeItems • tests/library/Dx/Report/Type/NewProductsTest.php:
   91:         $this->assertEquals($expected, $actual);
  120:         $this->assertEquals($expected, $actual);
  133:         $this->assertEquals($expected, $actual);
  149:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • tests/library/Dx/Report/Type/UnlinkedProductsTest.php:
  80:         $this->assertFalse($this->fixture->validate($request));
  84:         $this->assertTrue($this->fixture->validate($request));
  98:         $this->assertStringEqualsFile(

DiscountOfficeItems • tests/library/Dx/Report/Type/UoMMismatchProductsTest.php:
  100:         $this->assertFalse($this->fixture->validate($request));
  104:         $this->assertTrue($this->fixture->validate($request));
  108:         $this->assertEquals(

DiscountOfficeItems • tests/library/Dx/Signal/ManagerTest.php:
  22:         $this->assertTrue(Manager::isAvailable());
  38:         $this->assertTrue($handlerCalled);
  56:         $this->assertFalse($handlerCalled);

DiscountOfficeItems • tests/library/Dx/Tracking/ActivityTest.php:
  16:         $this->assertEquals($timestamp, $fixture->getTS());
  34:         $this->assertEquals($isDelivered, $fixture->isDelivered());
  61:         $this->assertEquals($summary, $fixture->getSummary());

DiscountOfficeItems • tests/library/Dx/Tracking/Core/ApiCacheTest.php:
   39:         $this->assertInstanceOf(ApiInterface::class, $this->fixture);
   67:         $this->assertEquals($tracking, $actual);
   95:         $this->assertEquals($tracking, $actual);
  121:         $this->assertEquals($tracking, $actual);
  145:         $this->assertEquals($tracking, $actual);

DiscountOfficeItems • tests/library/Dx/Tracking/DHL/ApiTest.php:
   69:         $this->assertInstanceOf(ApiInterface::class, $this->fixture);
  153:         $this->assertInstanceOf(Tracking::class, $actual);
  176:         $this->assertEquals($trackingNumber, $actual->getTrackingNumber());
  177:         $this->assertEquals($activityList, $actual->getActivities());
  178:         $this->assertEta($eta, $actual);
  223:         $this->assertEquals('Request failure', $actual->getError());
  240:         $this->assertSame($xmlMessage, $actual->getError());
  258:         $this->assertSame($errorMessage, $actual->getError());
  313:             $this->assertNull($actual->getDeliveryDate());
  320:         $this->assertEquals($expectedDate, $actual->getDeliveryDate());

DiscountOfficeItems • tests/library/Dx/Tracking/DHL/RequestBuilderTest.php:
  56:         $this->assertInstanceOf(Request::class, $actual);
  78:         $this->assertXmlStringEqualsXmlString($expected, $actualXml);

DiscountOfficeItems • tests/library/Dx/Tracking/DHL/XmlResponseParserTest.php:
   35:         $this->assertIsInt($actualEta);
   36:         $this->assertEquals($eta, $actualEta);
   96:         $this->assertContainsOnlyInstancesOf(Activity::class, $activityList);
   97:         $this->assertCount(count($eventList), $activityList);
  101:             $this->assertActivityPieces($event, $activity);
  111:         $this->assertEquals($event['timestamp'], $activity->getTS());
  112:         $this->assertSignatory($event['signatory'], $activity);
  113:         $this->assertStringContainsString($event['location'], $activity->getSummary());
  114:         $this->assertEquals($event['delivered'], $activity->isDelivered());
  115:         $this->assertStringContainsString($event['status'], $activity->getSummary());
  125:             $this->assertStringContainsString('Signed for by: '.$signatory, $activity->getSummary());
  127:             $this->assertStringNotContainsString('Signed for by: ', $activity->getSummary());

DiscountOfficeItems • tests/library/Dx/Tracking/FedEx/ApiTest.php:
   37:         $this->assertInstanceOf(ApiInterface::class, $this->fixture);
  116:         $this->assertEquals($expected['tracking'], $tracking->getTrackingNumber());
  117:         $this->assertEquals($expected['delivered'], $tracking->isDelivered());
  118:         $this->assertEquals($expected['summary'], $tracking->getSummary());
  122:         $this->assertEquals(count($expected['activity']), count($activities));
  124:             $this->assertEquals($expected['activity'][$idx]['ts'], $activity->getTS());
  125:             $this->assertEquals($expected['activity'][$idx]['delivered'], $activity->isDelivered());
  126:             $this->assertEquals($expected['activity'][$idx]['summary'], $activity->getSummary());
  158:         $this->assertEquals($expected['tracking'], $tracking->getTrackingNumber());
  159:         $this->assertTrue($tracking->isError());
  160:         $this->assertFalse($tracking->isValid());
  161:         $this->assertEquals($expected['summary'], $tracking->getSummary());
  162:         $this->assertEquals($expected['error'], $tracking->getError());
  166:         $this->assertEquals(0, count($activities));

DiscountOfficeItems • tests/library/Dx/Tracking/Missing/ClientTest.php:
  32:         $this->assertInstanceOf(ApiInterface::class, $this->fixture);
  39:         $this->assertInstanceOf(Tracking::class, $actual);
  48:         $this->assertNull($actual->getDeliveryDate());
  49:         $this->assertFalse($actual->isDelivered());
  59:         $this->assertEquals($number, $actual->getTrackingNumber());
  68:         $this->assertTrue($actual->isShipped());
  77:         $this->assertFalse($actual->isDelivered());
  86:         $this->assertFalse($actual->isDelivered());

DiscountOfficeItems • tests/library/Dx/Tracking/Saia/ClientTest.php:
   70:         $this->assertInstanceOf(ApiInterface::class, $this->fixture);
   81:         $this->assertInstanceOf(Tracking::class, $actual);
  109:         $this->assertEquals(
  144:         $this->assertTracking($expected, $actual);
  145:         $this->assertNull($actual->getDeliveryDate());
  172:         $this->assertTracking($expected, $actual);
  192:         $this->assertTracking($expected, $actual);
  212:         $this->assertTracking($expected, $actual);
  224:         $this->assertTracking($expected, $actual);
  328:         $this->assertEquals($expected, $actualValue);
  343:             $this->assertInstanceOf(Activity::class, $activity);

DiscountOfficeItems • tests/library/Dx/Tracking/Ups/ApiTest.php:
   34:         $this->assertInstanceOf(ApiInterface::class, $this->fixture);
   63:         $this->assertEquals('', $actual);
   76:         $this->assertEquals($body, $actual);
   89:         $this->assertEquals($expected['tracking'], $tracking->getTrackingNumber());
   90:         $this->assertEquals($expected['delivered'], $tracking->isDelivered(), 'Delivery status did not match');
   91:         $this->assertEquals($expected['summary'], $tracking->getSummary());
   93:         $this->assertEquals(
  100:         $this->assertEquals(count($expected['activity']), count($activities));
  102:             $this->assertEquals($expected['activity'][$idx]['ts'], $activity->getTS());
  103:             $this->assertEquals($expected['activity'][$idx]['delivered'], $activity->isDelivered());
  104:             $this->assertEquals($expected['activity'][$idx]['summary'], $activity->getSummary());
  185:         $this->assertEquals($expected['tracking'], $tracking->getTrackingNumber());
  186:         $this->assertTrue($tracking->isError());
  187:         $this->assertFalse($tracking->isValid());
  188:         $this->assertEquals($expected['summary'], $tracking->getSummary());
  189:         $this->assertEquals($expected['error'], $tracking->getError());
  193:         $this->assertEquals(0, count($activities));

DiscountOfficeItems • tests/library/Dx/Tracking/Usps/ApiTest.php:
   46:         $this->assertInstanceOf(ApiInterface::class, $this->fixture);
   84:         $this->assertTracking($expected, $actual);
  183:         $this->assertEquals($expected, $actualValue);
  198:             $this->assertInstanceOf(Activity::class, $activity);

DiscountOfficeItems • tests/library/Dx/Tracking/Usps/UspsSubContractTrackingTest.php:
  40:         $this->assertInstanceOf(ApiInterface::class, $this->fixture);
  63:         $this->assertEquals($expected, $actual->getTrackingNumber());
  97:         $this->assertEquals('Contract', $actual->getTrackingNumber());

DiscountOfficeItems • tests/library/Dx/Type/AbstractTest.php:
  20:         $this->assertFalse($this->abstract->equals(6.7770, 6.7773), '1 They are equal');
  21:         $this->assertFalse($this->abstract->equals(6.7773, 6.7770), '2 They are equal');
  23:         $this->assertTrue($this->abstract->equals(6.7773, 6.7773), '1 They are not equal');
  24:         $this->assertTrue($this->abstract->equals(0, 0), '2 They are not equal');
  26:         $this->assertFalse($this->abstract->equals(0, 'test'), "1 0 and 'test' are equal");
  27:         $this->assertFalse($this->abstract->equals(null, 0), '2 NULL and 0 are equal');

DiscountOfficeItems • tests/library/Dx/Type/ArrayTest.php:
  26:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • tests/library/Dx/Type/BinStringTest.php:
  16:         $this->assertEquals($expectedOutput, $fixture->equals($a, $b));

DiscountOfficeItems • tests/library/Dx/Type/DateTest.php:
  30:         $this->assertEquals($expectedOutput, $this->dates->equals($a, $b));

DiscountOfficeItems • tests/library/Dx/Type/DateTimeTest.php:
  22:         $this->assertEquals($expectedOutput, $this->fixture->equals($a, $b));

DiscountOfficeItems • tests/library/Dx/Type/FloatTest.php:
  26:         $this->assertEquals($expected, $actual);
  58:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • tests/library/Dx/Type/IntegerTest.php:
  30:         $this->assertEquals($expectedOutput, $this->_measure->equals($a, $b));

DiscountOfficeItems • tests/library/Dx/Type/StringTest.php:
  33:         $this->assertEquals($expectedOutput, $this->_testing->equals($a, $b));

DiscountOfficeItems • tests/library/Dx/Type/UrlTest.php:
  15:         $this->assertTrue($this->_testing->equals('http://example.com', 'example.com'));
  24:         $this->assertEquals($expectedOutput, $this->_testing->equals($b, $c));
  25:         $this->assertEquals($expectedOutput, $this->_testing->equals($c, $b));

DiscountOfficeItems • tests/library/Dx/Type/Product/AttributeTest.php:
  29:         $this->assertEquals($expectedOutput, $this->_measure->equals($a, $b));

DiscountOfficeItems • tests/library/Dx/Type/Product/WeightTest.php:
  33:         $this->assertEquals($expectedOutput, $this->_measure->equals($a, $b));

DiscountOfficeItems • tests/library/Dx/Ups/ValidateTransitTest.php:
   51:         $this->assertInstanceOf(AddressValidationInterface::class, $this->fixture);
   75:         $this->assertEquals(ValidationResponseInterface::STATUS_INVALID, $actual->getStatus());
   86:         $this->assertEquals(ValidationResponseInterface::STATUS_VALID, $actual->getStatus());
   97:         $this->assertEquals(ValidationResponseInterface::STATUS_INVALID, $actual->getStatus());
  108:         $this->assertEquals(ValidationResponseInterface::STATUS_INVALID, $actual->getStatus());
  119:         $this->assertEquals(ValidationResponseInterface::STATUS_INVALID, $actual->getStatus());
  134:         $this->assertEquals($classification, $actual->getType());

DiscountOfficeItems • tests/library/Dx/Ups/ValidationTest.php:
   50:         $this->assertInstanceOf(AddressValidationInterface::class, $this->fixture);
  100:         $this->assertEquals($expected, $actual);
  174:         $this->assertEquals($expected, $actual);
  190:         $this->assertEquals($expected, $actual);
  226:         $this->assertInstanceOf(ValidationResponseInterface::class, $actual);
  227:         $this->assertEquals($expected['status'], $actual->getStatus());
  228:         $this->assertEquals($expected['type'], $actual->getType());
  229:         $this->assertEquals($expected['isAmbiguous'], $actual->isAmbiguous());
  230:         $this->assertFalse($actual->hasErrors());
  231:         $this->assertEmpty($actual->getErrorMessages());
  232:         $this->assertSuggestionsEqual($expected['suggested'], $actual->getSuggestedAddresses());
  485:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • tests/library/Dx/Usc/ElinkTest.php:
  29:         $this->assertIsArray($ret);
  32:             $this->assertEquals($expectedFields, array_keys($line));

DiscountOfficeItems • tests/library/Dx/Xml/WriterTest.php:
  16:         $this->assertXmlStringEqualsXmlString(trim($output), $writer->outputMemory());

DiscountOfficeItems • tests/tools/PriceUpdate/MessageLoggerTest.php:
  20:         $this->assertStringContainsString($message, $actual[$productId]);
  33:         $this->assertEmpty($logger->getBuffer());
  49:         $this->assertStringContainsString($messageA, $actual[$productIdA]);
  50:         $this->assertStringNotContainsString($messageB, $actual[$productIdA]);
  52:         $this->assertStringContainsString($messageB, $actual[$productIdB]);
  53:         $this->assertStringNotContainsString($messageA, $actual[$productIdB]);

DiscountOfficeItems • tests/tools/PriceUpdate/RuleResolver/FlagRuleResolverTest.php:
   42:         $this->assertTrue($this->fixture instanceof RuleResolverInterface);
   47:         $this->assertTrue($this->fixture->hasApplication(['flag_rule' => uniqid()]));
   48:         $this->assertFalse($this->fixture->hasApplication([uniqid() => uniqid()]));
   49:         $this->assertFalse($this->fixture->hasApplication(['flag_rule' => []]));
   50:         $this->assertFalse($this->fixture->hasApplication([]));
   78:         $this->assertEquals($expected, $actual);
  108:         $this->assertEquals($extraRules[$option], $actual[$option]);
  135:         $this->assertStringContainsString($label, implode($actual['messages']));
  160:         $this->assertStringContainsString($labels[0], implode($actual['messages']));
  161:         $this->assertStringContainsString($labels[1], implode($actual['messages']));
  187:         $this->assertEquals($expected, $actual);
  221:         $this->assertEquals($expected, $actual);
  255:         $this->assertEquals($expected, $actual);

DiscountOfficeItems • tests/tools/PriceUpdate/RuleResolver/CalculatedFlag/FreightOfficeDepotVirtualWarehouseTest.php:
   46:         $this->assertTrue(is_callable($this->fixture));
   57:         $this->assertFalse(($this->fixture)($context));
   68:         $this->assertFalse(($this->fixture)($context));
   79:         $this->assertFalse(($this->fixture)($context));
   93:         $this->assertFalse(($this->fixture)($context));
  109:         $this->assertFalse(($this->fixture)($context));
  128:         $this->assertFalse(($this->fixture)($context));
  142:         $this->assertTrue(($this->fixture)($context));
  156:         $this->assertTrue(($this->fixture)($context));

notes • notes-PHPUnit.md:
  30: 103     // $this->logs->assertLogsContains(' ');
  31: 104     // $this->logs->assertLogsContains('Cheese Castle');
  34: 107 //    $this->assertTrue('ham' == 'ham');
  36: 109     // $this->assertTrue(strlen('OfficeSupplies') >= 10);
  37: 110     $this->assertNotSame('horse', 'algebra');
  38: 111     $this->assertNotSame('inchoate', 'inchoate');

notes • phpunit-EXAMPLE.php:
  11:         $this->assertTrue($foo);
  18:         $this->assertTrue('ham' == 'ham'); 
  28:         $this->assertTrue($resultant == $expected);
  40:         $this->assertTrue($resultant === $expected); 

notes • rays-tests.txt:
  16:                     $this->assertEquals(MapDataConsumer::AS_AGENT, $this->logContext->getAgent());
  23:         $this->assertEquals($before, $this->logContext->getAgent());
  50:         $this->assertEquals(['MAP'], array_unique($fieldList));
  51:         $this->assertCount(1, $fieldList);
  52:         $this->assertEquals(
